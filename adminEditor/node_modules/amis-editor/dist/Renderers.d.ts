import React from 'react';
import PropTypes from 'prop-types';
import BasicContainerEditor from './BasicContainerEditor';
export interface RenderersProps {
    id: string;
    editor: BasicContainerEditor;
}
export declare type RendererItem = {
    label: string;
    value: any;
    image: string;
    docLink: string;
    previewSchema: any;
    description: string;
    id: string;
    tags?: Array<string>;
    icon?: string;
};
export interface RenderersState {
    items: Array<RendererItem>;
    filteredItems: Array<RendererItem>;
    keywords: string;
}
export default class Renderers extends React.PureComponent<RenderersProps, RenderersState> {
    static contextTypes: {
        editor: PropTypes.Requireable<object>;
    };
    id: string;
    constructor(props: RenderersProps);
    build(props?: Readonly<RenderersProps> & Readonly<{
        children?: React.ReactNode;
    }>): any;
    componentDidUpdate(prevProps: RenderersProps): void;
    handleDragStart(e: React.DragEvent): void;
    handleFilterChange(keywords: string): void;
    handleFilterReset(): void;
    renderThumb(schema: any): JSX.Element;
    render(): JSX.Element;
}
