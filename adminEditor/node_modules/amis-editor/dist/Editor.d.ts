/// <reference types="node" />
import React from 'react';
import './editors/index';
import { scaffoldForm } from './Preview';
import { Schema } from './types';
import PropTypes from 'prop-types';
import { RenderOptions } from 'amis/lib/factory';
export interface EditorProps {
    value: any;
    onChange: (value: any) => void;
    preview?: boolean;
    autoFocus?: boolean;
    pathPrefix?: string;
    previewClassName?: string;
    previewProps?: object;
    clipboard?: any;
    amis_env?: RenderOptions;
    theme?: string;
    onEditorMount?: (component: any) => void;
    onEditorUnMount?: (component: any) => void;
    onHover?: (id?: string, schema?: any) => boolean;
    onActive?: (id?: string, schema?: any, onChange?: (newValue: any) => void) => boolean | void;
    onAdd?: (path: string, id: string, region: string, callback: (json: any) => void) => boolean | void;
    onAccept?: (id: string, region: string, index: number, data: any) => void | boolean;
    onMove?: (id: string, region: string, index: number, sId: string) => boolean | void;
    onMoveUp?: (id: string) => boolean | void;
    onMoveDown?: (id: string) => boolean | void;
    onDelete?: (id: string) => boolean | void;
    [propName: string]: any;
}
export declare type PatchItem = {
    op: 'update' | 'replace';
    target: string;
    value: any;
} | {
    op: 'delete';
    target: string;
} | {
    op: 'push';
    target: string;
    key: string;
    value: any;
} | {
    op: 'splice';
    target: string;
    key: string;
    args: Array<any>;
};
export interface DialogConfig {
    title: string;
    body: any;
    onConfirm: (value: any) => void;
    size?: string;
    closeOnEsc?: boolean;
    actions?: Array<any>;
    onCancel?: () => void;
}
export interface EditorState {
    settings: {
        id: string;
        editor: any;
        $schema?: string;
        schema: Schema;
        value?: any;
        getValue?: () => any;
        getRaw: () => any;
        onChange: (value: any, mode: string, callback?: (value: any) => void) => void;
    } | null;
    value: Schema;
    clipboard?: any;
    dialog?: DialogConfig | null;
    drawer?: DialogConfig | null;
    outline?: any;
    seetingsSize: 'normal' | 'large';
    draging: boolean;
    dropId?: string | null;
    dropRegion?: string | null;
}
export default class AMisEditor extends React.PureComponent<EditorProps, EditorState> {
    static defaultProps: {
        value: {
            title: string;
            body: string;
        };
        pathPrefix: string;
        previewClassName: string;
        theme: string;
        autoFocus: boolean;
    };
    static childContextTypes: {
        editor: PropTypes.Requireable<object>;
        editorNode: PropTypes.Requireable<object>;
        theme: PropTypes.Requireable<string>;
    };
    state: EditorState;
    hoverId?: string | null;
    hoverRegion?: string | null;
    value: any;
    settings?: null | {
        id: string;
        editor: any;
        $schema: string;
        value?: any;
        getValue?: () => any;
        getRaw: () => any;
        schema: Schema;
        onChange: (value: any, mode: string, callback?: (value: any) => void) => void;
    };
    outline: any;
    lastValue: any;
    widgetsLayer: HTMLElement;
    nodes: Array<any>;
    defaultOpenTimer: NodeJS.Timeout;
    settingsInstance: any;
    previewInstance: any;
    mounted: boolean;
    unSensor?: () => void;
    emitChangeLazy: () => void;
    constructor(props: EditorProps);
    static contextTypes: {
        editor: PropTypes.Requireable<object>;
    };
    id: string;
    getChildContext(): any;
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: EditorProps): void;
    componentWillUnmount(): void;
    focus(): void;
    handlePreviewResize(): void;
    resolveEditorById(id: string): any;
    switchSettingPane(key: 'nav' | 'form' | 'code'): void;
    handleClick(e: MouseEvent): void;
    handleMouseMove(e: React.MouseEvent): void;
    handleMouseLeave(e: React.MouseEvent): void;
    addNode(node: any): void;
    removeTo(node: any): void;
    getWidgetsLayer(): HTMLElement;
    getPreviewLayer(): Element | Text | null;
    getEditorLayout(): Element | Text | null;
    widgetsLayerRef(ref: any): void;
    settingsRef(ref: any): void;
    previewRef(ref: any): void;
    refreshSettings(): void;
    selectEditor(id: string, forceOpen?: boolean): void;
    unSelectEditor(): void;
    getSettings(id: string): any;
    updateSettings(id: string | void, value: any, replace?: boolean, mode?: string, lazyEmit?: boolean): void;
    getParentSettings(id: string, skipArray?: boolean): any;
    moveSeetingsUp(id: string): void;
    moveSeetingsDown(id: string): void;
    deleteSettings(id: string, deleteIfEmpty?: boolean): string[] | null;
    duplicateSettings(id: string): void;
    cutSettings(id: string, cb: Function): void;
    clearClipBoard(): void;
    getSchema(): any;
    handleChange(value: Schema, lazyEmit?: boolean, mode?: string): void;
    versionIdIndex: number;
    versionId: number;
    history: Array<{
        versionId: number;
        value: any;
    }>;
    emitChange(mode?: string): void;
    getVersionId(): number;
    undo(): void;
    redo(): void;
    confirmForm(config: scaffoldForm, initalData?: any): Promise<unknown>;
    getActiveId(): string;
    getHoverId(): string | null | undefined;
    getHoverRegion(): string | null | undefined;
    getDropId(): string | null | undefined;
    setDropId(target: string | null, force?: boolean, fn?: () => void): void;
    getDropRegion(): string | null | undefined;
    getDragId(): string | null | undefined;
    setDragId(id: string | null): void;
    handleEditorHover(target: string | null): void;
    activeEditor(id: string, config?: {
        editor: any;
        $schema: string;
        value?: any;
        getValue?: () => any;
        getRaw: () => any;
        schema: Schema;
        onChange: (value: any, mode: string, callback?: (value: any) => void) => void;
    }, forceOpen?: boolean): void;
    getRendererCandidates(path: string, whiteList?: Array<string> | ((type: string, path: string) => boolean), sortList?: Array<string>): {
        label: string | undefined;
        value: any;
        image: string | undefined;
        docLink: string | undefined;
        previewSchema: Schema | undefined;
        description: string | undefined;
        icon: string | undefined;
        tags: string[];
    }[];
    pickRenderer(path: string, id: string, region: string, callback: (json: any) => void, whiteList?: Array<string> | ((type: string, path: string) => boolean), sortList?: Array<string>): void;
    openDialog(title: string, body: any, onConfirm: (value: any) => void, size?: string, mode?: 'dialog' | 'drawer', closeOnEsc?: boolean, onCancel?: () => void): void;
    syncOutline(): void;
    handleDialogClose(): void;
    handleDialogConfirm(values: Array<any>): void;
    handleDrawerClose(): void;
    handleDrawerConfirm(values: Array<any>): void;
    handleOutlineSelect(value: any, forceOpen?: boolean): void;
    handleSettingsSizeToggle(): void;
    dragGhost: HTMLElement;
    dragCallback: () => void;
    dragData?: {
        type: string;
        [propName: string]: any;
    };
    dragRendererId?: string;
    dragEl: HTMLElement | null;
    dragElRaw: HTMLElement | null;
    dragId?: string | null;
    dropId?: string | null;
    dropRegion?: string | null;
    lastX: number;
    lastY: number;
    dragCache: any;
    dragImage: HTMLDivElement | null;
    getDragElement(): HTMLElement | null;
    setDragElement(el: HTMLElement | null): void;
    handleDragStart(e: any, el?: HTMLElement): any;
    handleDragEnter(e: React.DragEvent): void;
    lastMoveAt: number;
    highlightedRegion: HTMLElement;
    handleDragOver(e: any, el?: HTMLElement, ignoreMovement?: boolean): void;
    handleDrop(e: any): void;
    handleDragLeave(e: React.DragEvent): void;
    handleDragEnd(e: any): void;
    highlightRegion(e: Event): void;
    unhighlightRegion(): void;
    switchRegion(e: Event): void;
    handleContextMenu(e: React.MouseEvent<HTMLElement>): void;
    handleKeyDown(e: KeyboardEvent): void;
    moveBackward(): void;
    moveForward(): void;
    selectBackward(): void;
    selectForward(): void;
    selectOutside(): void;
    selectInside(): void;
    cutActive(): void;
    pasteOnActive(): void;
    deleteActive(): void;
    openActiveSetting(): void;
    openActiveCode(): void;
    duplicateActive(): void;
    renderToolbar(): JSX.Element | null;
    render(): JSX.Element;
}
