import React = require('react');
import PropTypes from 'prop-types';
interface RegionProps {
    name: string;
    hostId: string;
    label?: string;
    className?: string;
    wrapperResolve?: ((dom: HTMLElement) => HTMLElement) | string;
}
export default class Region extends React.Component<RegionProps> {
    isRegion: boolean;
    nodes: Array<any>;
    entered: boolean;
    static contextTypes: {
        editor: PropTypes.Requireable<object>;
        editorNode: PropTypes.Requireable<object>;
    };
    static childContextTypes: {
        editorNode: PropTypes.Requireable<object>;
    };
    hlDom: HTMLElement | null;
    addBtn: HTMLElement;
    constructor(props: RegionProps);
    getChildContext(this: any): {
        editorNode: {
            isRegion: boolean;
            id: string;
            add: any;
            remove: any;
            getNodes: any;
            component: any;
            parent: any;
        };
    };
    componentWillMount(): void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    hlDomRef(ref: HTMLElement | null): void;
    getWrapper(): HTMLElement;
    updateHlbox(): void;
    addNode(node: any): void;
    removeTo(node: any): void;
    getNodes(): any[];
    getContextMenus(): any[];
    dropPosition: number;
    schema: any;
    wrapper: HTMLElement;
    handleDragEnter(e: React.DragEvent, ghost: HTMLElement, dragData: any): void;
    handleDragLeave(e: React.DragEvent, ghost: HTMLElement, dragData: any): void;
    handleAdd(): void;
    lastX: number;
    lastY: number;
    handleDragOver(e: React.DragEvent, ghost: HTMLElement, dragData: any, rendererId: any, vertical: boolean): void;
    getTarget(e: React.DragEvent, regionDom: HTMLElement): HTMLElement | null;
    getChild(dom: HTMLElement, descend: HTMLElement): HTMLElement;
    getDropIndex(): number;
    update(): void;
    render(): {} | null | undefined;
}
export {};
