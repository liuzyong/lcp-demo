/// <reference types="react" />
import BasicEditor from '../BasicEditor';
import { RendererProps } from '../types';
import BasicContainerEditor from '../BasicContainerEditor';
export declare class CardEditor extends BasicContainerEditor {
    tipName: string;
    containers: string[];
    $schema: string;
    regions2path: {
        body: string;
    };
    childrenSortList: {
        body: string[];
    };
    settingsSchema: {
        title: string;
        controls: any[];
    };
    acceptChild(type: string, region?: string, rendererId?: string): boolean | null;
    getContextMenus(): any[];
    onAddNode(key: string, child: any): any;
}
export declare class CardItemEditor extends BasicEditor {
    tipName: string;
    replaceable: boolean;
    settingsSchema: {
        title: string;
        controls: any[];
    };
    childrenOrder: string[];
    state: any;
    constructor(props: RendererProps, context: any);
    componentWillReceiveProps(nextProps: RendererProps): void;
    editorWillUpdate(activeId: string | null, prevId: string | null, mode: string): any;
    modifyProps(props: RendererProps, context?: any): {
        quickEdit: any;
        popOver: any;
    };
    deleteSelf(): void;
    onChildSettingsGet(type: string, value: any): any;
    onChildSettingsSet(type: string, value: any, origin: any, replaceMode?: boolean): any;
    getSettingsValue(): any;
    setSettingsValue(value: any): void;
    handleQuickEditSetting(): void;
    handlePopOverSetting(): void;
    acceptChild(type: string, region?: string, rendererId?: string): boolean | null;
    renderRenderer(props: any): JSX.Element;
}
