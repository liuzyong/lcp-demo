{
    "version": 3,
    "file": "FieldSet.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/FieldSet.tsx"
    ],
    "names": [],
    "mappings": ";;;AAAA,wDAA0B;AAC1B,yCAAsD;AACtD,iEAAmC;AAiBnC;IAA6C,2CAG5C;IACC,yBAAY,KAAoB;QAAhC,YACE,kBAAM,KAAK,CAAC,SAEb;QADC,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IAC/C,CAAC;IAOD,oCAAU,GAAV;QACQ,IAAA,eAaQ,EAZZ,oCAAe,EACf,sBAAQ,EACR,cAAI,EACJ,4BAAW,EACX,0BAAU,EACV,kBAAM,EACN,cAAI,EACJ,sBAAQ,EACR,gBAAK,EACL,kBAAc,EACd,gBAAK,EACL,gCACY,CAAC;QAEf,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,MAAM,CAAC,MAAM,EAAE,IAAI,CAAgB,CAAC;SAC5C;QAED,IAAI,KAAK,GAAQ;YACf,KAAK,OAAA;YACL,IAAI,EAAE,KAAM,CAAC,IAAI;YACjB,MAAM,QAAA;SACP,CAAC;QACF,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;QAC5B,OAAO,WAAW,KAAK,WAAW,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC,CAAC;QACxE,UAAU,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC;QAE9C,OAAO,CACL,uCACE,SAAS,EAAE,EAAE,CACX,YAAS,KAAK,CAAC,IAAI,IAAI,QAAQ,IAAI,QAAQ,CAAE,EAC7C,aAAa,CACd,IAEA,eAAe,CACd,EAAC,QAAQ,UAAA,EAAC,EACT,KAAgB,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,EAC1C,KAAK,CACN,CACG,CACP,CAAC;IACJ,CAAC;IAED,gCAAM,GAAN;QACE,IAAM,eAAiD,EAAhD,sBAAQ,EAAE,wBAAS,EAAE,cAAI,EAAE,4DAAqB,CAAC;QAExD,OAAO,CACL,8BAAC,kBAAQ,uBACH,IAAI,IACR,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,IAAI,CAAC,UAAU,EACzB,gBAAgB,EAAC,UAAU,EAC3B,gBAAgB,EAAC,QAAQ,IACzB,CACH,CAAC;IACJ,CAAC;IA9DM,4BAAY,GAAG;QACpB,gBAAgB,EAAE,EAAE;QACpB,WAAW,EAAE,KAAK;KACnB,CAAC;IA4DJ,sBAAC;CAAA,AAxED,CAA6C,eAAK,CAAC,SAAS,GAwE3D;kBAxEoB,eAAe;AA+EpC;IAAsC,4CAAe;IAArD;;IAAuD,CAAC;IAA3C,gBAAgB;QAL5B,kBAAQ,CAAC;YACR,IAAI,EAAE,wCAAwC;YAC9C,MAAM,EAAE,CAAC,GAAG;YACZ,IAAI,EAAE,UAAU;SACjB,CAAC;OACW,gBAAgB,CAA2B;IAAD,uBAAC;CAAA,AAAxD,CAAsC,eAAe,GAAG;AAA3C,4CAAgB",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../../factory';\nimport Collapse from '../Collapse';\nimport cx from 'classnames';\n\nexport interface FieldSetProps extends RendererProps {\n  title?: string;\n  collapsed?: boolean;\n  mode?: 'normal' | 'inline' | 'horizontal' | 'row';\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'base';\n  formClassName?: string;\n  collapsable?: boolean;\n  horizontal: {\n    left: string;\n    right: string;\n    offset: string;\n  };\n}\n\nexport default class FieldSetControl extends React.Component<\n  FieldSetProps,\n  any\n> {\n  constructor(props: FieldSetProps) {\n    super(props);\n    this.renderBody = this.renderBody.bind(this);\n  }\n\n  static defaultProps = {\n    headingClassName: '',\n    collapsable: false\n  };\n\n  renderBody(): JSX.Element {\n    const {\n      renderFormItems,\n      controls,\n      body,\n      collapsable,\n      horizontal,\n      render,\n      mode,\n      formMode,\n      $path,\n      classnames: cx,\n      store,\n      formClassName\n    } = this.props;\n\n    if (!controls) {\n      return render('body', body) as JSX.Element;\n    }\n\n    let props: any = {\n      store,\n      data: store!.data,\n      render\n    };\n    mode && (props.mode = mode);\n    typeof collapsable !== 'undefined' && (props.collapsable = collapsable);\n    horizontal && (props.horizontal = horizontal);\n\n    return (\n      <div\n        className={cx(\n          `Form--${props.mode || formMode || 'normal'}`,\n          formClassName\n        )}\n      >\n        {renderFormItems(\n          {controls},\n          ($path as string).replace(/^.*form\\//, ''),\n          props\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    const {controls, className, mode, ...rest} = this.props;\n\n    return (\n      <Collapse\n        {...rest}\n        className={className}\n        children={this.renderBody}\n        wrapperComponent=\"fieldset\"\n        headingComponent=\"legend\"\n      />\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)form(?:.+)?\\/control\\/fieldSet$/i,\n  weight: -100,\n  name: 'fieldset'\n})\nexport class FieldSetRenderer extends FieldSetControl {}\n"
    ]
}