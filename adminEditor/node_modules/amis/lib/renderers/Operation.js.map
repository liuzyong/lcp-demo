{
    "version": 3,
    "file": "Operation.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Operation.tsx"
    ],
    "names": [],
    "mappings": ";;;AAAA,wDAA0B;AAC1B,sCAAmD;AAYnD;IAAoC,0CAAuC;IAA3E;;IA+BA,CAAC;IA1BC,+BAAM,GAAN;QACQ,IAAA,eAAyD,EAAxD,wBAAS,EAAE,oBAAO,EAAE,kBAAM,EAAE,kBAA4B,CAAC;QAEhE,OAAO,CACL,uCAAK,SAAS,EAAE,EAAE,CAAC,gBAAgB,EAAE,SAAS,CAAC,IAC5C,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;YACrB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK;gBACxB,OAAA,MAAM,CACJ,KAAG,KAAO,qBAER,IAAI,EAAE,QAAQ,EACd,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,IAAI,EACzB,KAAK,EACH,MAAM,CAAC,KAAK;wBACZ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,IAC1C,MAAc,GAEpB;oBACE,GAAG,EAAE,KAAK;iBACX,CACF;YAbD,CAaC,CACF;YACH,CAAC,CAAC,IAAI,CACJ,CACP,CAAC;IACJ,CAAC;IA7BM,wBAAS,GAAkB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAEhD,2BAAY,GAA4B,EAAE,CAAC;IA4BpD,qBAAC;CAAA,AA/BD,CAAoC,eAAK,CAAC,SAAS,GA+BlD;AA/BY,wCAAc;AAsC3B;IAA4C,kDAAc;IAA1D;;IAA4D,CAAC;IAAhD,sBAAsB;QALlC,kBAAQ,CAAC;YACR,yCAAyC;YACzC,IAAI,EAAE,UAAC,IAAY,IAAK,OAAA,+BAA+B,CAAC,IAAI,CAAC,IAAI,CAAC,EAA1C,CAA0C;YAClE,IAAI,EAAE,WAAW;SAClB,CAAC;OACW,sBAAsB,CAA0B;IAAD,6BAAC;CAAA,AAA7D,CAA4C,cAAc,GAAG;AAAhD,wDAAsB",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {ServiceStore, IServiceStore} from '../store/service';\nimport {Api, SchemaNode, Action} from '../types';\nimport {filter} from '../utils/tpl';\nimport cx from 'classnames';\nimport moment from 'moment';\n\nexport interface OperationProps extends RendererProps {\n  className?: string;\n  buttons: Array<Action>;\n}\n\nexport class OperationField extends React.Component<OperationProps, object> {\n  static propsList: Array<string> = ['buttons', 'label'];\n\n  static defaultProps: Partial<OperationProps> = {};\n\n  render() {\n    const {className, buttons, render, classnames: cx} = this.props;\n\n    return (\n      <div className={cx('OperationField', className)}>\n        {Array.isArray(buttons)\n          ? buttons.map((button, index) =>\n              render(\n                `${index}`,\n                {\n                  type: 'button',\n                  size: button.size || 'sm',\n                  level:\n                    button.level ||\n                    (button.icon && !button.label ? 'link' : ''),\n                  ...(button as any)\n                },\n                {\n                  key: index\n                }\n              )\n            )\n          : null}\n      </div>\n    );\n  }\n}\n\n@Renderer({\n  // test: /(^|\\/)table\\/(.*\\/)operation$/,\n  test: (path: string) => /(^|\\/)table\\/(.*\\/)operation$/.test(path),\n  name: 'operation'\n})\nexport class OperationFieldRenderer extends OperationField {}\n"
    ]
}