{
    "version": 3,
    "file": "VBox.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/VBox.tsx"
    ],
    "names": [],
    "mappings": ";;;AAAA,wDAA0B;AAC1B,sCAAmD;AAEnD,kEAA4B;AAY5B;IAAkC,gCAAkC;IAApE;;IAsCA,CAAC;IAjCC,0BAAW,GAAX,UAAY,MAAc,EAAE,IAAY;QAC/B,IAAA,0BAAM,CAAe;QAE5B,OAAO,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,yBAAU,GAAV,UAAW,GAAQ,EAAE,GAAQ;QACpB,IAAA,2BAAe,CAAe;QACrC,OAAO,CACL,uCAAK,SAAS,EAAE,oBAAE,CAAI,EAAE,cAAW,EAAG,GAAW,CAAC,aAAa,CAAC,IAC7D,IAAI,CAAC,WAAW,CAAC,SAAO,GAAK,EAAE,GAAG,CAAC,CAChC,CACP,CAAC;IACJ,CAAC;IAED,qBAAM,GAAN;QAAA,iBAiBC;QAhBO,IAAA,eAA+C,EAA9C,wBAAS,EAAE,cAAI,EAAE,mBAA6B,CAAC;QAEtD,OAAO,CACL,uCAAK,SAAS,EAAE,oBAAE,CAAI,EAAE,SAAM,EAAE,SAAS,CAAC,IACvC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;YAClB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,GAAG,IAAK,OAAA,CACrB,uCACE,SAAS,EAAE,oBAAE,CAAC,SAAS,EAAG,GAAW,CAAC,YAAY,CAAC,EACnD,GAAG,EAAE,GAAG,IAEP,KAAI,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CACtB,CACP,EAPsB,CAOtB,CAAC;YACJ,CAAC,CAAC,IAAI,CACJ,CACP,CAAC;IACJ,CAAC;IApCM,cAAS,GAAkB,CAAC,MAAM,CAAC,CAAC;IAEpC,iBAAY,GAAuB,EAAE,CAAC;IAmC/C,WAAC;CAAA,AAtCD,CAAkC,eAAK,CAAC,SAAS,GAsChD;kBAtCoB,IAAI;AA4CzB;IAAkC,wCAAI;IAAtC;;IAAwC,CAAC;IAA5B,YAAY;QAJxB,kBAAQ,CAAC;YACR,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,MAAM;SACb,CAAC;OACW,YAAY,CAAgB;IAAD,mBAAC;CAAA,AAAzC,CAAkC,IAAI,GAAG;AAA5B,oCAAY",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {Api, SchemaNode, Schema, Action} from '../types';\nimport cx from 'classnames';\n\nexport type Row = Schema & {\n  rowClassName?: string;\n  cellClassName?: string;\n};\n\nexport interface HBoxProps extends RendererProps {\n  rows?: Array<Row>;\n  className?: string;\n}\n\nexport default class VBox extends React.Component<HBoxProps, object> {\n  static propsList: Array<string> = ['rows'];\n\n  static defaultProps: Partial<HBoxProps> = {};\n\n  renderChild(region: string, node: Schema) {\n    const {render} = this.props;\n\n    return render(region, node);\n  }\n\n  renderCell(row: Row, key: any) {\n    const {classPrefix: ns} = this.props;\n    return (\n      <div className={cx(`${ns}Vbox-cell`, (row as Row).cellClassName)}>\n        {this.renderChild(`row/${key}`, row)}\n      </div>\n    );\n  }\n\n  render() {\n    const {className, rows, classPrefix: ns} = this.props;\n\n    return (\n      <div className={cx(`${ns}Vbox`, className)}>\n        {Array.isArray(rows)\n          ? rows.map((row, key) => (\n              <div\n                className={cx('row-row', (row as Row).rowClassName)}\n                key={key}\n              >\n                {this.renderCell(row, key)}\n              </div>\n            ))\n          : null}\n      </div>\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)vbox$/,\n  name: 'vbox'\n})\nexport class VBoxRenderer extends VBox {}\n"
    ]
}