import 'setimmediate';
import { iRendererStore, IIRendererStore, SIRendererStore } from './iRenderer';
import { TranslateFn } from '../locale';
export declare const RendererStore: import("mobx-state-tree").IModelType<{
    storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
    stores: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
}, {
    readonly fetcher: any;
    readonly notify: any;
    readonly isCancel: (value: any) => boolean;
    readonly __: TranslateFn<any>;
} & {
    getStoreById(id: string): any;
} & {
    addStore(store: SIRendererStore): IIRendererStore;
    removeStore(store: IIRendererStore): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type IRendererStore = typeof RendererStore.Type;
export { iRendererStore, IIRendererStore };
export declare const RegisterStore: (store: any) => void;
