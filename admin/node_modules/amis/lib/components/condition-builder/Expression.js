"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Expression = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var Field_1 = tslib_1.__importDefault(require("./Field"));
var helper_1 = require("../../utils/helper");
var Value_1 = tslib_1.__importDefault(require("./Value"));
var InputSwitch_1 = tslib_1.__importDefault(require("./InputSwitch"));
var Func_1 = tslib_1.__importDefault(require("./Func"));
var theme_1 = require("../../theme");
var fieldMap = {
    value: '值',
    field: '字段',
    func: '函数',
    raw: '公式'
};
var Expression = /** @class */ (function (_super) {
    tslib_1.__extends(Expression, _super);
    function Expression() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Expression.prototype.handleInputTypeChange = function (type) {
        var _a;
        var value = this.props.value;
        var onChange = this.props.onChange;
        if (type === 'value') {
            value = '';
        }
        else if (type === 'func') {
            value = {
                type: 'func',
                func: (_a = helper_1.findTree(this.props.funcs, function (item) { return item.type; })) === null || _a === void 0 ? void 0 : _a.type,
                args: []
            };
        }
        else if (type === 'field') {
            value = {
                type: 'field',
                field: ''
            };
        }
        else if (type === 'raw') {
            value = {
                type: 'raw',
                value: ''
            };
        }
        onChange(value, this.props.index);
    };
    Expression.prototype.handleValueChange = function (data) {
        this.props.onChange(data, this.props.index);
    };
    Expression.prototype.handleFieldChange = function (field) {
        var value = this.props.value;
        var onChange = this.props.onChange;
        value = {
            type: 'field',
            field: field
        };
        onChange(value, this.props.index);
    };
    Expression.prototype.handleFuncChange = function (func) {
        var value = this.props.value;
        var onChange = this.props.onChange;
        value = tslib_1.__assign(tslib_1.__assign({}, func), { type: 'func' });
        onChange(value, this.props.index);
    };
    Expression.prototype.handleRawChange = function () { };
    Expression.prototype.render = function () {
        var _a, _b, _c, _d;
        var _e = this.props, value = _e.value, valueField = _e.valueField, defaultType = _e.defaultType, allowedTypes = _e.allowedTypes, funcs = _e.funcs, fields = _e.fields, op = _e.op;
        var inputType = (((_a = value) === null || _a === void 0 ? void 0 : _a.type) === 'field'
            ? 'field'
            : ((_b = value) === null || _b === void 0 ? void 0 : _b.type) === 'func'
                ? 'func'
                : ((_c = value) === null || _c === void 0 ? void 0 : _c.type) === 'raw'
                    ? 'raw'
                    : value !== undefined
                        ? 'value'
                        : undefined) ||
            defaultType || (allowedTypes === null || allowedTypes === void 0 ? void 0 : allowedTypes[0]) ||
            'value';
        var types = allowedTypes || ['value', 'field', 'func'];
        if ((!Array.isArray(funcs) || !funcs.length) && ~types.indexOf('func')) {
            types.splice(types.indexOf('func'), 1);
        }
        return (react_1.default.createElement(react_1.default.Fragment, null,
            inputType === 'value' ? (react_1.default.createElement(Value_1.default, { field: valueField, value: value, onChange: this.handleValueChange, op: op })) : null,
            inputType === 'field' ? (react_1.default.createElement(Field_1.default, { value: (_d = value) === null || _d === void 0 ? void 0 : _d.field, onChange: this.handleFieldChange, options: valueField
                    ? helper_1.filterTree(fields, function (item) {
                        return item.children ||
                            item.type === valueField.type;
                    })
                    : fields })) : null,
            inputType === 'func' ? (react_1.default.createElement(Func_1.default, { value: value, onChange: this.handleFuncChange, funcs: funcs, fields: fields, defaultType: defaultType, allowedTypes: allowedTypes })) : null,
            types.length > 1 ? (react_1.default.createElement(InputSwitch_1.default, { value: inputType, onChange: this.handleInputTypeChange, options: types.map(function (item) { return ({
                    label: fieldMap[item],
                    value: item
                }); }) })) : null));
    };
    tslib_1.__decorate([
        helper_1.autobind,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [String]),
        tslib_1.__metadata("design:returntype", void 0)
    ], Expression.prototype, "handleInputTypeChange", null);
    tslib_1.__decorate([
        helper_1.autobind,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], Expression.prototype, "handleValueChange", null);
    tslib_1.__decorate([
        helper_1.autobind,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [String]),
        tslib_1.__metadata("design:returntype", void 0)
    ], Expression.prototype, "handleFieldChange", null);
    tslib_1.__decorate([
        helper_1.autobind,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], Expression.prototype, "handleFuncChange", null);
    tslib_1.__decorate([
        helper_1.autobind,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], Expression.prototype, "handleRawChange", null);
    return Expression;
}(react_1.default.Component));
exports.Expression = Expression;
exports.default = theme_1.themeable(Expression);
//# sourceMappingURL=./components/condition-builder/Expression.js.map
