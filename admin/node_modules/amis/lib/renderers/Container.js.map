{
    "version": 3,
    "file": "Container.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Container.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,wDAA0B;AAC1B,sCAAmD;AASnD;IAA0C,qCAGzC;IAHD;;IAgCA,CAAC;IAvBC,8BAAU,GAAV;QACQ,IAAA,KAA0D,IAAI,CAAC,KAAK,EAAnE,QAAQ,cAAA,EAAE,IAAI,UAAA,EAAE,MAAM,YAAA,EAAc,EAAE,gBAAA,EAAE,aAAa,mBAAc,CAAC;QAE3E,OAAO,CACL,uCAAK,SAAS,EAAE,EAAE,CAAC,gBAAgB,EAAE,aAAa,CAAC,IAChD,QAAQ;YACP,CAAC,CAAC,OAAO,QAAQ,KAAK,UAAU;gBAC9B,CAAC,CAAG,QAAgB,CAAC,IAAI,CAAC,KAAK,CAAiB;gBAChD,CAAC,CAAE,QAAwB;YAC7B,CAAC,CAAC,IAAI;gBACN,CAAC,CAAE,MAAM,CAAC,MAAM,EAAE,IAAW,CAAiB;gBAC9C,CAAC,CAAC,IAAI,CACJ,CACP,CAAC;IACJ,CAAC;IAED,0BAAM,GAAN;QACQ,IAAA,KAAoC,IAAI,CAAC,KAAK,EAA7C,SAAS,eAAA,EAAE,IAAI,UAAA,EAAc,EAAE,gBAAc,CAAC;QAErD,OAAO,CACL,uCAAK,SAAS,EAAE,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC,IAAG,IAAI,CAAC,UAAU,EAAE,CAAO,CACtE,CAAC;IACJ,CAAC;IA3BM,mBAAS,GAAkB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IACjD,sBAAY,GAAG;QACpB,SAAS,EAAE,EAAE;KACd,CAAC;IAyBJ,gBAAC;CAAA,AAhCD,CAA0C,eAAK,CAAC,SAAS,GAgCxD;kBAhCoB,SAAS;AAsC9B;IAAuC,6CAAa;IAApD;;IAAsD,CAAC;IAA1C,iBAAiB;QAJ7B,kBAAQ,CAAC;YACR,IAAI,EAAE,kBAAkB;YACxB,IAAI,EAAE,WAAW;SAClB,CAAC;OACW,iBAAiB,CAAyB;IAAD,wBAAC;CAAA,AAAvD,CAAuC,SAAS,GAAO;AAA1C,8CAAiB",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {SchemaNode} from '../types';\n\nexport interface ContainerProps extends RendererProps {\n  body?: SchemaNode;\n  children?: (props: any) => React.ReactNode;\n  className?: string;\n}\n\nexport default class Container<T> extends React.Component<\n  ContainerProps & T,\n  object\n> {\n  static propsList: Array<string> = ['body', 'className'];\n  static defaultProps = {\n    className: ''\n  };\n\n  renderBody(): JSX.Element | null {\n    const {children, body, render, classnames: cx, bodyClassName} = this.props;\n\n    return (\n      <div className={cx('Container-body', bodyClassName)}>\n        {children\n          ? typeof children === 'function'\n            ? ((children as any)(this.props) as JSX.Element)\n            : (children as JSX.Element)\n          : body\n          ? (render('body', body as any) as JSX.Element)\n          : null}\n      </div>\n    );\n  }\n\n  render() {\n    const {className, size, classnames: cx} = this.props;\n\n    return (\n      <div className={cx('Container', className)}>{this.renderBody()}</div>\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)container$/,\n  name: 'container'\n})\nexport class ContainerRenderer extends Container<{}> {}\n"
    ]
}