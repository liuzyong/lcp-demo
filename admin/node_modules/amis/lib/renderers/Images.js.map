{
    "version": 3,
    "file": "Images.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Images.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {filter} from '../utils/tpl';\nimport {resolveVariable, isPureVariable} from '../utils/tpl-builtin';\nimport Image, {ImageThumbProps} from './Image';\nimport {autobind} from '../utils/helper';\n\nexport interface ImagesProps extends RendererProps {\n  className: string;\n  defaultImage: string;\n  placeholder: string;\n  delimiter: string;\n  thumbMode: 'w-full' | 'h-full' | 'contain' | 'cover';\n  thumbRatio: '1:1' | '4:3' | '16:9';\n\n  name?: string;\n  value?: any;\n  source?: string;\n  src?: string;\n  originalSrc?: string; // 原图\n  enlargeAble?: boolean;\n  onEnlarge?: (\n    info: ImageThumbProps & {\n      list?: Array<\n        Pick<ImageThumbProps, 'src' | 'originalSrc' | 'title' | 'caption'>\n      >;\n    }\n  ) => void;\n  showDimensions?: boolean;\n}\n\nexport class ImagesField extends React.Component<ImagesProps> {\n  static defaultProps: Pick<\n    ImagesProps,\n    | 'className'\n    | 'delimiter'\n    | 'defaultImage'\n    | 'placehoder'\n    | 'thumbMode'\n    | 'thumbRatio'\n  > = {\n    className: '',\n    delimiter: ',',\n    defaultImage:\n      'https://fex.bdstatic.com/n/static/amis/renderers/crud/field/placeholder_cfad9b1.png',\n    placehoder: '-',\n    thumbMode: 'contain',\n    thumbRatio: '1:1'\n  };\n\n  list: Array<any> = [];\n\n  @autobind\n  handleEnlarge(info: ImageThumbProps) {\n    const {onImageEnlarge, src, originalSrc} = this.props;\n\n    onImageEnlarge &&\n      onImageEnlarge(\n        {\n          ...info,\n          originalSrc: info.originalSrc || info.src,\n          list: this.list.map(item => ({\n            src: src\n              ? filter(src, item, '| raw')\n              : (item && item.image) || item,\n            originalSrc: originalSrc\n              ? filter(originalSrc, item, '| raw')\n              : (item && item.src) || item,\n            title: item && (item.enlargeTitle || item.title),\n            caption:\n              item && (item.enlargeCaption || item.description || item.caption)\n          }))\n        },\n        this.props\n      );\n  }\n\n  render() {\n    const {\n      className,\n      defaultImage,\n      thumbMode,\n      thumbRatio,\n      data,\n      name,\n      value,\n      placeholder,\n      classnames: cx,\n      source,\n      delimiter,\n      enlargeAble,\n      src,\n      originalSrc\n    } = this.props;\n\n    let list: any;\n\n    if (typeof source === 'string' && isPureVariable(source)) {\n      list = resolveVariable(source, data) || undefined;\n    } else if (Array.isArray(value)) {\n      list = value;\n    } else if (name && data[name]) {\n      list = data[name];\n    }\n\n    if (typeof list === 'string') {\n      list = list.split(delimiter);\n    } else if (list && !Array.isArray(list)) {\n      list = [list];\n    }\n\n    this.list = list;\n\n    return (\n      <div className={cx('ImagesField', className)}>\n        {Array.isArray(list) ? (\n          <div className={cx('Images')}>\n            {list.map((item: any, index: number) => (\n              <Image\n                index={index}\n                className={cx('Images-item')}\n                key={index}\n                src={\n                  (src ? filter(src, item, '| raw') : item && item.image) ||\n                  item\n                }\n                originalSrc={\n                  (originalSrc\n                    ? filter(originalSrc, item, '| raw')\n                    : item && item.src) || item\n                }\n                title={item && item.title}\n                caption={item && (item.description || item.caption)}\n                thumbMode={thumbMode}\n                thumbRatio={thumbRatio}\n                enlargeAble={enlargeAble!}\n                onEnlarge={this.handleEnlarge}\n              />\n            ))}\n          </div>\n        ) : defaultImage ? (\n          <Image\n            className={cx('Images-item')}\n            src={defaultImage}\n            thumbMode={thumbMode}\n            thumbRatio={thumbRatio}\n          />\n        ) : (\n          placeholder\n        )}\n      </div>\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)images$/\n})\nexport class ImagesFieldRenderer extends ImagesField {}\n"
    ]
}