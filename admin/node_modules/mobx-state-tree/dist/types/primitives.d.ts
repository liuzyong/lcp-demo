import { ISimpleType, IType } from "../internal";
/**
 * Creates a type that can only contain a string value.
 * This type is used for string values by default
 *
 * @export
 * @alias types.string
 * @example
 * const Person = types.model({
 *   firstName: types.string,
 *   lastName: "Doe"
 * })
 */
export declare const string: ISimpleType<string>;
/**
 * Creates a type that can only contain a numeric value.
 * This type is used for numeric values by default
 *
 * @export
 * @alias types.number
 * @example
 * const Vector = types.model({
 *   x: types.number,
 *   y: 1.5
 * })
 */
export declare const number: ISimpleType<number>;
/**
 * Creates a type that can only contain an integer value.
 * This type is used for integer values by default
 *
 * @export
 * @alias types.integer
 * @example
 * const Size = types.model({
 *   width: types.integer,
 *   height: 10
 * })
 */
export declare const integer: ISimpleType<number>;
/**
 * Creates a type that can only contain a boolean value.
 * This type is used for boolean values by default
 *
 * @export
 * @alias types.boolean
 * @example
 * const Thing = types.model({
 *   isCool: types.boolean,
 *   isAwesome: false
 * })
 */
export declare const boolean: ISimpleType<boolean>;
/**
 * The type of the value `null`
 *
 * @export
 * @alias types.null
 */
export declare const nullType: ISimpleType<null>;
/**
 * The type of the value `undefined`
 *
 * @export
 * @alias types.undefined
 */
export declare const undefinedType: ISimpleType<undefined>;
/**
 * Creates a type that can only contain a javascript Date value.
 *
 * @export
 * @alias types.Date
 * @example
 * const LogLine = types.model({
 *   timestamp: types.Date,
 * })
 *
 * LogLine.create({ timestamp: new Date() })
 */
export declare const DatePrimitive: IType<number | Date, number, Date>;
/**
 * Returns if a given value represents a primitive type.
 *
 * @export
 * @template IT
 * @param {IT} type
 * @returns {type is IT}
 */
export declare function isPrimitiveType<IT extends ISimpleType<string> | ISimpleType<number> | ISimpleType<boolean> | typeof DatePrimitive>(type: IT): type is IT;
