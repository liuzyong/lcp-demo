import { ISimpleType } from "../../internal";
/**
 * Identifiers are used to make references, lifecycle events and reconciling works.
 * Inside a state tree, for each type can exist only one instance for each given identifier.
 * For example there couldn't be 2 instances of user with id 1. If you need more, consider using references.
 * Identifier can be used only as type property of a model.
 * This type accepts as parameter the value type of the identifier field that can be either string or number.
 *
 * @example
 *  const Todo = types.model("Todo", {
 *      id: types.identifier,
 *      title: types.string
 *  })
 *
 * @export
 * @alias types.identifier
 * @template T
 * @returns {IType<T, T>}
 */
export declare const identifier: ISimpleType<string>;
/**
 * Similar to `types.identifier`, but `identifierNumber` will serialize from / to a number when applying snapshots
 *
 * @example
 *  const Todo = types.model("Todo", {
 *      id: types.identifierNumber,
 *      title: types.string
 *  })
 *
 * @export
 * @alias types.identifierNumber
 * @template T
 * @returns {IType<T, T>}
 */
export declare const identifierNumber: ISimpleType<number>;
/**
 * Returns if a given value represents an identifier type.
 *
 * @export
 * @template IT
 * @param {IT} type
 * @returns {type is IT}
 */
export declare function isIdentifierType<IT extends typeof identifier | typeof identifierNumber>(type: IT): type is IT;
