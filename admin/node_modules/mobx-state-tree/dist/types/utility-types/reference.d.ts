import { ExtractT, IComplexType, IAnyStateTreeNode, IAnyComplexType } from "../../internal";
export interface ReferenceOptions<T> {
    get(identifier: string | number, parent: IAnyStateTreeNode | null): T;
    set(value: T, parent: IAnyStateTreeNode | null): string | number;
}
export interface IReferenceType<IR extends IAnyComplexType> extends IComplexType<string | number | ExtractT<IR>, string | number, ExtractT<IR>> {
}
/**
 * Creates a reference to another type, which should have defined an identifier.
 * See also the [reference and identifiers](https://github.com/mobxjs/mobx-state-tree#references-and-identifiers) section.
 *
 * @export
 * @alias types.reference
 */
export declare function reference<IT extends IAnyComplexType>(subType: IT, options?: ReferenceOptions<ExtractT<IT>>): IReferenceType<IT>;
/**
 * Returns if a given value represents a reference type.
 *
 * @export
 * @template IT
 * @param {IT} type
 * @returns {type is IT}
 */
export declare function isReferenceType<IT extends IReferenceType<any>>(type: IT): type is IT;
