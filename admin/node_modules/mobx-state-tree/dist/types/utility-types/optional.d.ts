import { IType, IAnyType, IComplexType, OptionalProperty, ExtractT, ExtractS, ExtractC, ExtractCST, IAnyComplexType } from "../../internal";
export declare type OptionalDefaultValueOrFunction<IT extends IAnyType> = ExtractC<IT> | ExtractS<IT> | (() => ExtractCST<IT>);
export interface IOptionalIComplexType<IT extends IAnyComplexType> extends IComplexType<ExtractC<IT> | undefined, ExtractS<IT>, ExtractT<IT>>, OptionalProperty {
}
export interface IOptionalIType<IT extends IAnyType> extends IType<ExtractC<IT> | undefined, ExtractS<IT>, ExtractT<IT>>, OptionalProperty {
}
export declare function optional<IT extends IAnyComplexType>(type: IT, defaultValueOrFunction: OptionalDefaultValueOrFunction<IT>): IOptionalIComplexType<IT>;
export declare function optional<IT extends IAnyType>(type: IT, defaultValueOrFunction: OptionalDefaultValueOrFunction<IT>): IOptionalIType<IT>;
/**
 * Returns if a value represents an optional type.
 *
 * @export
 * @template IT
 * @param {IT} type
 * @returns {type is IT}
 */
export declare function isOptionalType<IT extends IType<any | undefined, any, any> & OptionalProperty>(type: IT): type is IT;
