import { IType } from "../../internal";
export interface CustomTypeOptions<S, T> {
    name: string;
    fromSnapshot(snapshot: S): T;
    toSnapshot(value: T): S;
    isTargetType(value: T | S): boolean;
    getValidationMessage(snapshot: S): string;
}
/**
 * Creates a custom type. Custom types can be used for arbitrary immutable values, that have a serializable representation. For example, to create your own Date representation, Decimal type etc.
 *
 * The signature of the options is:
 *
 * ```javascript
 * export interface CustomTypeOptions<S, T> {
 *     // Friendly name
 *     name: string
 *     // given a serialized value, how to turn it into the target type
 *     fromSnapshot(snapshot: S): T
 *     // return the serialization of the current value
 *     toSnapshot(value: T): S
 *     // if true, this is a converted value, if false, it's a snapshot
 *     isTargetType(value: T | S): boolean
 *     // a non empty string is assumed to be a validation error
 *     getValidationMessage?(snapshot: S): string
 * }
 * ```
 *
 * @example
 * const DecimalPrimitive = types.custom<string, Decimal>({
 *     name: "Decimal",
 *     fromSnapshot(value: string) {
 *         return new Decimal(value)
 *     },
 *     toSnapshot(value: Decimal) {
 *         return value.toString()
 *     },
 *     isTargetType(value: string | Decimal): boolean {
 *         return value instanceof Decimal
 *     },
 *     getValidationMessage(value: string): string {
 *         if (/^-?\d+\.\d+$/.test(value)) return "" // OK
 *         return `'${value}' doesn't look like a valid decimal number`
 *     }
 * })
 *
 * const Wallet = types.model({
 *     balance: DecimalPrimitive
 * })
 *
 * @export
 * @alias types.custom
 * @template S
 * @template T
 * @param {CustomTypeOptions<S, T>} options
 * @returns {(IType<S | T, S, T>)}
 */
export declare function custom<S, T>(options: CustomTypeOptions<S, T>): IType<S | T, S, T>;
