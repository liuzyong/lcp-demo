import { IType, IComplexType, IAnyType, ExtractC, ExtractS, ExtractT, IAnyComplexType, OptionalProperty } from "../../internal";
export interface IMaybeIComplexType<IT extends IAnyComplexType, C, O> extends IComplexType<ExtractC<IT> | C, ExtractS<IT> | O, ExtractT<IT> | O>, OptionalProperty {
}
export interface IMaybeIType<IT extends IAnyType, C, O> extends IType<ExtractC<IT> | C, ExtractS<IT> | O, ExtractT<IT> | O>, OptionalProperty {
}
export declare function maybe<IT extends IAnyComplexType>(type: IT): IMaybeIComplexType<IT, undefined, undefined>;
export declare function maybe<IT extends IAnyType>(type: IT): IMaybeIType<IT, undefined, undefined>;
export declare function maybeNull<IT extends IAnyComplexType>(type: IT): IMaybeIComplexType<IT, null | undefined, null>;
export declare function maybeNull<IT extends IAnyType>(type: IT): IMaybeIType<IT, null | undefined, null>;
