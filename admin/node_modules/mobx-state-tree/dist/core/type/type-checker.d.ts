import { IAnyType, IType } from "../../internal";
export interface IContextEntry {
    path: string;
    type?: IAnyType;
}
export declare type IContext = IContextEntry[];
export interface IValidationError {
    context: IContext;
    value: any;
    message?: string;
}
export declare type IValidationResult = IValidationError[];
/**
 * Run's the typechecker on the given type.
 * Throws if the given value is not according the provided type specification.
 * Use this if you need typechecks even in a production build (by default all automatic runtime type checks will be skipped in production builds)
 *
 * @export
 * @param {IAnyType} type
 * @param {*} value
 */
export declare function typecheck<C, S, T>(type: IType<C, S, T>, value: C | S | T): void;
