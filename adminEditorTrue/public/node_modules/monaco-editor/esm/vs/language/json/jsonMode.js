define('node_modules/monaco-editor/esm/vs/language/json/jsonMode', function(require, exports, module) {

  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.setupMode = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  var workerManager_js_1 = require("node_modules/monaco-editor/esm/vs/language/json/workerManager");
  var languageFeatures = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/language/json/languageFeatures"));
  var tokenization_js_1 = require("node_modules/monaco-editor/esm/vs/language/json/tokenization");
  function setupMode(defaults) {
      var disposables = [];
      var client = new workerManager_js_1.WorkerManager(defaults);
      disposables.push(client);
      var worker = function () {
          var uris = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              uris[_i] = arguments[_i];
          }
          return client.getLanguageServiceWorker.apply(client, uris);
      };
      var languageId = defaults.languageId;
      disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));
      disposables.push(monaco.languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));
      disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new languageFeatures.DocumentSymbolAdapter(worker)));
      disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingEditProvider(worker)));
      disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new languageFeatures.DocumentRangeFormattingEditProvider(worker)));
      disposables.push(new languageFeatures.DiagnosticsAdapter(languageId, worker, defaults));
      disposables.push(monaco.languages.setTokensProvider(languageId, tokenization_js_1.createTokenizationSupport(true)));
      disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));
      disposables.push(monaco.languages.registerColorProvider(languageId, new languageFeatures.DocumentColorAdapter(worker)));
      disposables.push(monaco.languages.registerFoldingRangeProvider(languageId, new languageFeatures.FoldingRangeAdapter(worker)));
  }
  exports.setupMode = setupMode;
  var richEditConfiguration = {
      wordPattern: /(-?\d*\.\d\w*)|([^\[\{\]\}\:\"\,\s]+)/g,
      comments: {
          lineComment: '//',
          blockComment: ['/*', '*/']
      },
      brackets: [
          ['{', '}'],
          ['[', ']']
      ],
      autoClosingPairs: [
          { open: '{', close: '}', notIn: ['string'] },
          { open: '[', close: ']', notIn: ['string'] },
          { open: '"', close: '"', notIn: ['string'] }
      ]
  };
  

});
