define('node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getMigratedSettingValue = exports.overrideIdentifierFromKey = exports.getDefaultValues = exports.getConfigurationKeys = exports.getConfigurationValue = exports.removeFromValueTree = exports.addToValueTree = exports.toValuesTree = exports.IConfigurationService = void 0;
  var platform_js_1 = require("node_modules/monaco-editor/esm/vs/platform/registry/common/platform");
  var instantiation_js_1 = require("node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation");
  var configurationRegistry_js_1 = require("node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry");
  exports.IConfigurationService = instantiation_js_1.createDecorator('configurationService');
  function toValuesTree(properties, conflictReporter) {
      var root = Object.create(null);
      for (var key in properties) {
          addToValueTree(root, key, properties[key], conflictReporter);
      }
      return root;
  }
  exports.toValuesTree = toValuesTree;
  function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {
      var segments = key.split('.');
      var last = segments.pop();
      var curr = settingsTreeRoot;
      for (var i = 0; i < segments.length; i++) {
          var s = segments[i];
          var obj = curr[s];
          switch (typeof obj) {
              case 'undefined':
                  obj = curr[s] = Object.create(null);
                  break;
              case 'object':
                  break;
              default:
                  conflictReporter("Ignoring " + key + " as " + segments.slice(0, i + 1).join('.') + " is " + JSON.stringify(obj));
                  return;
          }
          curr = obj;
      }
      if (typeof curr === 'object') {
          curr[last] = value; // workaround https://github.com/Microsoft/vscode/issues/13606
      }
      else {
          conflictReporter("Ignoring " + key + " as " + segments.join('.') + " is " + JSON.stringify(curr));
      }
  }
  exports.addToValueTree = addToValueTree;
  function removeFromValueTree(valueTree, key) {
      var segments = key.split('.');
      doRemoveFromValueTree(valueTree, segments);
  }
  exports.removeFromValueTree = removeFromValueTree;
  function doRemoveFromValueTree(valueTree, segments) {
      var first = segments.shift();
      if (segments.length === 0) {
          // Reached last segment
          delete valueTree[first];
          return;
      }
      if (Object.keys(valueTree).indexOf(first) !== -1) {
          var value = valueTree[first];
          if (typeof value === 'object' && !Array.isArray(value)) {
              doRemoveFromValueTree(value, segments);
              if (Object.keys(value).length === 0) {
                  delete valueTree[first];
              }
          }
      }
  }
  /**
   * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)
   */
  function getConfigurationValue(config, settingPath, defaultValue) {
      function accessSetting(config, path) {
          var current = config;
          for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
              var component = path_1[_i];
              if (typeof current !== 'object' || current === null) {
                  return undefined;
              }
              current = current[component];
          }
          return current;
      }
      var path = settingPath.split('.');
      var result = accessSetting(config, path);
      return typeof result === 'undefined' ? defaultValue : result;
  }
  exports.getConfigurationValue = getConfigurationValue;
  function getConfigurationKeys() {
      var properties = platform_js_1.Registry.as(configurationRegistry_js_1.Extensions.Configuration).getConfigurationProperties();
      return Object.keys(properties);
  }
  exports.getConfigurationKeys = getConfigurationKeys;
  function getDefaultValues() {
      var valueTreeRoot = Object.create(null);
      var properties = platform_js_1.Registry.as(configurationRegistry_js_1.Extensions.Configuration).getConfigurationProperties();
      for (var key in properties) {
          var value = properties[key].default;
          addToValueTree(valueTreeRoot, key, value, function (message) { return console.error("Conflict in default settings: " + message); });
      }
      return valueTreeRoot;
  }
  exports.getDefaultValues = getDefaultValues;
  function overrideIdentifierFromKey(key) {
      return key.substring(1, key.length - 1);
  }
  exports.overrideIdentifierFromKey = overrideIdentifierFromKey;
  function getMigratedSettingValue(configurationService, currentSettingName, legacySettingName) {
      var setting = configurationService.inspect(currentSettingName);
      var legacySetting = configurationService.inspect(legacySettingName);
      if (typeof setting.user !== 'undefined' || typeof setting.workspace !== 'undefined' || typeof setting.workspaceFolder !== 'undefined') {
          return setting.value;
      }
      else if (typeof legacySetting.user !== 'undefined' || typeof legacySetting.workspace !== 'undefined' || typeof legacySetting.workspaceFolder !== 'undefined') {
          return legacySetting.value;
      }
      else {
          return setting.default;
      }
  }
  exports.getMigratedSettingValue = getMigratedSettingValue;
  

});
