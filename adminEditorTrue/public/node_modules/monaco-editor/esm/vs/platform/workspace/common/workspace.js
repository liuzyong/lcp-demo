define('node_modules/monaco-editor/esm/vs/platform/workspace/common/workspace', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.WorkspaceFolder = exports.Workspace = exports.IWorkspaceFolder = exports.IWorkspace = exports.IWorkspaceContextService = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var uri_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/uri");
  var resources = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/base/common/resources"));
  var instantiation_js_1 = require("node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation");
  var map_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/map");
  exports.IWorkspaceContextService = instantiation_js_1.createDecorator('contextService');
  (function (IWorkspace) {
      function isIWorkspace(thing) {
          return thing && typeof thing === 'object'
              && typeof thing.id === 'string'
              && Array.isArray(thing.folders);
      }
      IWorkspace.isIWorkspace = isIWorkspace;
  })(exports.IWorkspace || (exports.IWorkspace = {}));
  (function (IWorkspaceFolder) {
      function isIWorkspaceFolder(thing) {
          return thing && typeof thing === 'object'
              && uri_js_1.URI.isUri(thing.uri)
              && typeof thing.name === 'string'
              && typeof thing.toResource === 'function';
      }
      IWorkspaceFolder.isIWorkspaceFolder = isIWorkspaceFolder;
  })(exports.IWorkspaceFolder || (exports.IWorkspaceFolder = {}));
  var Workspace = /** @class */ (function () {
      function Workspace(_id, folders, _configuration) {
          if (folders === void 0) {
              folders = [];
          }
          if (_configuration === void 0) {
              _configuration = null;
          }
          this._id = _id;
          this._configuration = _configuration;
          this._foldersMap = map_js_1.TernarySearchTree.forPaths();
          this.folders = folders;
      }
      Object.defineProperty(Workspace.prototype, "folders", {
          get: function () {
              return this._folders;
          },
          set: function (folders) {
              this._folders = folders;
              this.updateFoldersMap();
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Workspace.prototype, "id", {
          get: function () {
              return this._id;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Workspace.prototype, "configuration", {
          get: function () {
              return this._configuration;
          },
          set: function (configuration) {
              this._configuration = configuration;
          },
          enumerable: true,
          configurable: true
      });
      Workspace.prototype.getFolder = function (resource) {
          if (!resource) {
              return null;
          }
          return this._foldersMap.findSubstr(resource.toString()) || null;
      };
      Workspace.prototype.updateFoldersMap = function () {
          this._foldersMap = map_js_1.TernarySearchTree.forPaths();
          for (var _i = 0, _a = this.folders; _i < _a.length; _i++) {
              var folder = _a[_i];
              this._foldersMap.set(folder.uri.toString(), folder);
          }
      };
      Workspace.prototype.toJSON = function () {
          return { id: this.id, folders: this.folders, configuration: this.configuration };
      };
      return Workspace;
  }());
  exports.Workspace = Workspace;
  var WorkspaceFolder = /** @class */ (function () {
      function WorkspaceFolder(data, raw) {
          this.raw = raw;
          this.uri = data.uri;
          this.index = data.index;
          this.name = data.name;
      }
      WorkspaceFolder.prototype.toResource = function (relativePath) {
          return resources.joinPath(this.uri, relativePath);
      };
      WorkspaceFolder.prototype.toJSON = function () {
          return { uri: this.uri, name: this.name, index: this.index };
      };
      return WorkspaceFolder;
  }());
  exports.WorkspaceFolder = WorkspaceFolder;
  

});
