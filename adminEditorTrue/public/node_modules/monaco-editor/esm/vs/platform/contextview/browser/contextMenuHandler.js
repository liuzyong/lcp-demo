define('node_modules/monaco-editor/esm/vs/platform/contextview/browser/contextMenuHandler', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ContextMenuHandler = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  ''/*@require node_modules/monaco-editor/esm/vs/platform/contextview/browser/contextMenuHandler.css*/;
  var lifecycle_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/lifecycle");
  var actions_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/actions");
  var menu_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/ui/menu/menu");
  var dom_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/dom");
  var styler_js_1 = require("node_modules/monaco-editor/esm/vs/platform/theme/common/styler");
  var event_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/event");
  var mouseEvent_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/mouseEvent");
  var ContextMenuHandler = /** @class */ (function () {
      function ContextMenuHandler(contextViewService, telemetryService, notificationService, keybindingService, themeService) {
          this.contextViewService = contextViewService;
          this.telemetryService = telemetryService;
          this.notificationService = notificationService;
          this.keybindingService = keybindingService;
          this.themeService = themeService;
          this.options = { blockMouse: true };
      }
      ContextMenuHandler.prototype.configure = function (options) {
          this.options = options;
      };
      ContextMenuHandler.prototype.showContextMenu = function (delegate) {
          var _this = this;
          var actions = delegate.getActions();
          if (!actions.length) {
              return; // Don't render an empty context menu
          }
          this.focusToReturn = document.activeElement;
          var menu;
          this.contextViewService.showContextView({
              getAnchor: function () { return delegate.getAnchor(); },
              canRelayout: false,
              anchorAlignment: delegate.anchorAlignment,
              render: function (container) {
                  var className = delegate.getMenuClassName ? delegate.getMenuClassName() : '';
                  if (className) {
                      container.className += ' ' + className;
                  }
                  // Render invisible div to block mouse interaction in the rest of the UI
                  if (_this.options.blockMouse) {
                      _this.block = container.appendChild(dom_js_1.$('.context-view-block'));
                  }
                  var menuDisposables = [];
                  var actionRunner = delegate.actionRunner || new actions_js_1.ActionRunner();
                  actionRunner.onDidBeforeRun(_this.onActionRun, _this, menuDisposables);
                  actionRunner.onDidRun(_this.onDidActionRun, _this, menuDisposables);
                  menu = new menu_js_1.Menu(container, actions, {
                      actionItemProvider: delegate.getActionItem,
                      context: delegate.getActionsContext ? delegate.getActionsContext() : null,
                      actionRunner: actionRunner,
                      getKeyBinding: delegate.getKeyBinding ? delegate.getKeyBinding : function (action) { return _this.keybindingService.lookupKeybinding(action.id); }
                  });
                  menuDisposables.push(styler_js_1.attachMenuStyler(menu, _this.themeService));
                  menu.onDidCancel(function () { return _this.contextViewService.hideContextView(true); }, null, menuDisposables);
                  menu.onDidBlur(function () { return _this.contextViewService.hideContextView(true); }, null, menuDisposables);
                  event_js_1.domEvent(window, dom_js_1.EventType.BLUR)(function () { _this.contextViewService.hideContextView(true); }, null, menuDisposables);
                  event_js_1.domEvent(window, dom_js_1.EventType.MOUSE_DOWN)(function (e) {
                      var event = new mouseEvent_js_1.StandardMouseEvent(e);
                      var element = event.target;
                      // Don't do anything as we are likely creating a context menu
                      if (event.rightButton) {
                          return;
                      }
                      while (element) {
                          if (element === container) {
                              return;
                          }
                          element = element.parentElement;
                      }
                      _this.contextViewService.hideContextView(true);
                  }, null, menuDisposables);
                  return lifecycle_js_1.combinedDisposable(menuDisposables.concat([menu]));
              },
              focus: function () {
                  if (menu) {
                      menu.focus(!!delegate.autoSelectFirstItem);
                  }
              },
              onHide: function (didCancel) {
                  if (delegate.onHide) {
                      delegate.onHide(!!didCancel);
                  }
                  if (_this.block) {
                      dom_js_1.removeNode(_this.block);
                      _this.block = null;
                  }
                  if (_this.focusToReturn) {
                      _this.focusToReturn.focus();
                  }
              }
          });
      };
      ContextMenuHandler.prototype.onActionRun = function (e) {
          if (this.telemetryService) {
              /* __GDPR__
                  "workbenchActionExecuted" : {
                      "id" : { "classification": "SystemMetaData", "purpose": "FeatureInsight" },
                      "from": { "classification": "SystemMetaData", "purpose": "FeatureInsight" }
                  }
              */
              this.telemetryService.publicLog('workbenchActionExecuted', { id: e.action.id, from: 'contextMenu' });
          }
          this.contextViewService.hideContextView(false);
          // Restore focus here
          if (this.focusToReturn) {
              this.focusToReturn.focus();
          }
      };
      ContextMenuHandler.prototype.onDidActionRun = function (e) {
          if (e.error && this.notificationService) {
              this.notificationService.error(e.error);
          }
      };
      return ContextMenuHandler;
  }());
  exports.ContextMenuHandler = ContextMenuHandler;
  

});
