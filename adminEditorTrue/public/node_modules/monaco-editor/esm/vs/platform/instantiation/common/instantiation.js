define('node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.optional = exports.createDecorator = exports.IInstantiationService = exports._util = void 0;
  (function (_util) {
      _util.serviceIds = new Map();
      _util.DI_TARGET = '$di$target';
      _util.DI_DEPENDENCIES = '$di$dependencies';
      function getServiceDependencies(ctor) {
          return ctor[_util.DI_DEPENDENCIES] || [];
      }
      _util.getServiceDependencies = getServiceDependencies;
  })(exports._util || (exports._util = {}));
  exports.IInstantiationService = createDecorator('instantiationService');
  function storeServiceDependency(id, target, index, optional) {
      if (target[exports._util.DI_TARGET] === target) {
          target[exports._util.DI_DEPENDENCIES].push({ id: id, index: index, optional: optional });
      }
      else {
          target[exports._util.DI_DEPENDENCIES] = [{ id: id, index: index, optional: optional }];
          target[exports._util.DI_TARGET] = target;
      }
  }
  /**
   * A *only* valid way to create a {{ServiceIdentifier}}.
   */
  function createDecorator(serviceId) {
      if (exports._util.serviceIds.has(serviceId)) {
          return exports._util.serviceIds.get(serviceId);
      }
      var id = function (target, key, index) {
          if (arguments.length !== 3) {
              throw new Error('@IServiceName-decorator can only be used to decorate a parameter');
          }
          storeServiceDependency(id, target, index, false);
      };
      id.toString = function () { return serviceId; };
      exports._util.serviceIds.set(serviceId, id);
      return id;
  }
  exports.createDecorator = createDecorator;
  /**
   * Mark a service dependency as optional.
   */
  function optional(serviceIdentifier) {
      return function (target, key, index) {
          if (arguments.length !== 3) {
              throw new Error('@optional-decorator can only be used to decorate a parameter');
          }
          storeServiceDependency(serviceIdentifier, target, index, true);
      };
  }
  exports.optional = optional;
  

});
