define('node_modules/monaco-editor/esm/vs/platform/markers/common/markers', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.IMarkerService = exports.IMarkerData = exports.MarkerSeverity = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var instantiation_js_1 = require("node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation");
  var nls_js_1 = require("node_modules/monaco-editor/esm/vs/nls");
  var severity_js_1 = tslib_1.__importDefault(require("node_modules/monaco-editor/esm/vs/base/common/severity"));
  (function (MarkerSeverity) {
      MarkerSeverity[MarkerSeverity["Hint"] = 1] = "Hint";
      MarkerSeverity[MarkerSeverity["Info"] = 2] = "Info";
      MarkerSeverity[MarkerSeverity["Warning"] = 4] = "Warning";
      MarkerSeverity[MarkerSeverity["Error"] = 8] = "Error";
  })(exports.MarkerSeverity || (exports.MarkerSeverity = {}));
  (function (MarkerSeverity) {
      function compare(a, b) {
          return b - a;
      }
      MarkerSeverity.compare = compare;
      var _displayStrings = Object.create(null);
      _displayStrings[MarkerSeverity.Error] = nls_js_1.localize('sev.error', "Error");
      _displayStrings[MarkerSeverity.Warning] = nls_js_1.localize('sev.warning', "Warning");
      _displayStrings[MarkerSeverity.Info] = nls_js_1.localize('sev.info', "Info");
      function toString(a) {
          return _displayStrings[a] || '';
      }
      MarkerSeverity.toString = toString;
      function fromSeverity(severity) {
          switch (severity) {
              case severity_js_1.default.Error: return MarkerSeverity.Error;
              case severity_js_1.default.Warning: return MarkerSeverity.Warning;
              case severity_js_1.default.Info: return MarkerSeverity.Info;
              case severity_js_1.default.Ignore: return MarkerSeverity.Hint;
          }
      }
      MarkerSeverity.fromSeverity = fromSeverity;
  })(exports.MarkerSeverity || (exports.MarkerSeverity = {}));
  (function (IMarkerData) {
      var emptyString = '';
      function makeKey(markerData) {
          var result = [emptyString];
          if (markerData.source) {
              result.push(markerData.source.replace('¦', '\¦'));
          }
          else {
              result.push(emptyString);
          }
          if (markerData.code) {
              result.push(markerData.code.replace('¦', '\¦'));
          }
          else {
              result.push(emptyString);
          }
          if (markerData.severity !== undefined && markerData.severity !== null) {
              result.push(exports.MarkerSeverity.toString(markerData.severity));
          }
          else {
              result.push(emptyString);
          }
          if (markerData.message) {
              result.push(markerData.message.replace('¦', '\¦'));
          }
          else {
              result.push(emptyString);
          }
          if (markerData.startLineNumber !== undefined && markerData.startLineNumber !== null) {
              result.push(markerData.startLineNumber.toString());
          }
          else {
              result.push(emptyString);
          }
          if (markerData.startColumn !== undefined && markerData.startColumn !== null) {
              result.push(markerData.startColumn.toString());
          }
          else {
              result.push(emptyString);
          }
          if (markerData.endLineNumber !== undefined && markerData.endLineNumber !== null) {
              result.push(markerData.endLineNumber.toString());
          }
          else {
              result.push(emptyString);
          }
          if (markerData.endColumn !== undefined && markerData.endColumn !== null) {
              result.push(markerData.endColumn.toString());
          }
          else {
              result.push(emptyString);
          }
          result.push(emptyString);
          return result.join('¦');
      }
      IMarkerData.makeKey = makeKey;
  })(exports.IMarkerData || (exports.IMarkerData = {}));
  exports.IMarkerService = instantiation_js_1.createDecorator('markerService');
  

});
