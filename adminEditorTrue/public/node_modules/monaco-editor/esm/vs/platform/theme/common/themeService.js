define('node_modules/monaco-editor/esm/vs/platform/theme/common/themeService', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.registerThemingParticipant = exports.Extensions = exports.getThemeTypeSelector = exports.HIGH_CONTRAST = exports.DARK = exports.themeColorFromId = exports.IThemeService = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var instantiation_js_1 = require("node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation");
  var lifecycle_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/lifecycle");
  var platform = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/platform/registry/common/platform"));
  var event_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/event");
  exports.IThemeService = instantiation_js_1.createDecorator('themeService');
  function themeColorFromId(id) {
      return { id: id };
  }
  exports.themeColorFromId = themeColorFromId;
  // base themes
  exports.DARK = 'dark';
  exports.HIGH_CONTRAST = 'hc';
  function getThemeTypeSelector(type) {
      switch (type) {
          case exports.DARK: return 'vs-dark';
          case exports.HIGH_CONTRAST: return 'hc-black';
          default: return 'vs';
      }
  }
  exports.getThemeTypeSelector = getThemeTypeSelector;
  // static theming participant
  exports.Extensions = {
      ThemingContribution: 'base.contributions.theming'
  };
  var ThemingRegistry = /** @class */ (function () {
      function ThemingRegistry() {
          this.themingParticipants = [];
          this.themingParticipants = [];
          this.onThemingParticipantAddedEmitter = new event_js_1.Emitter();
      }
      ThemingRegistry.prototype.onThemeChange = function (participant) {
          var _this = this;
          this.themingParticipants.push(participant);
          this.onThemingParticipantAddedEmitter.fire(participant);
          return lifecycle_js_1.toDisposable(function () {
              var idx = _this.themingParticipants.indexOf(participant);
              _this.themingParticipants.splice(idx, 1);
          });
      };
      ThemingRegistry.prototype.getThemingParticipants = function () {
          return this.themingParticipants;
      };
      return ThemingRegistry;
  }());
  var themingRegistry = new ThemingRegistry();
  platform.Registry.add(exports.Extensions.ThemingContribution, themingRegistry);
  function registerThemingParticipant(participant) {
      return themingRegistry.onThemeChange(participant);
  }
  exports.registerThemingParticipant = registerThemingParticipant;
  

});
