define('node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.workbenchColorsSchemaId = exports.oneOf = exports.transparent = exports.lighten = exports.darken = exports.overviewRulerSelectionHighlightForeground = exports.overviewRulerFindMatchForeground = exports.snippetFinalTabstopHighlightBorder = exports.snippetFinalTabstopHighlightBackground = exports.snippetTabstopHighlightBorder = exports.snippetTabstopHighlightBackground = exports.diffBorder = exports.diffRemovedOutline = exports.diffInsertedOutline = exports.diffRemoved = exports.diffInserted = exports.defaultRemoveColor = exports.defaultInsertColor = exports.editorActiveLinkForeground = exports.editorHoverStatusBarBackground = exports.editorHoverBorder = exports.editorHoverBackground = exports.editorHoverHighlight = exports.editorFindRangeHighlightBorder = exports.editorFindMatchHighlightBorder = exports.editorFindMatchBorder = exports.editorFindRangeHighlight = exports.editorFindMatchHighlight = exports.editorFindMatch = exports.editorSelectionHighlightBorder = exports.editorSelectionHighlight = exports.editorInactiveSelection = exports.editorSelectionForeground = exports.editorSelectionBackground = exports.editorWidgetResizeBorder = exports.editorWidgetBorder = exports.editorWidgetBackground = exports.editorForeground = exports.editorBackground = exports.menuSeparatorBackground = exports.menuSelectionBorder = exports.menuSelectionBackground = exports.menuSelectionForeground = exports.menuBackground = exports.menuForeground = exports.menuBorder = exports.progressBarBackground = exports.scrollbarSliderActiveBackground = exports.scrollbarSliderHoverBackground = exports.scrollbarSliderBackground = exports.scrollbarShadow = exports.badgeForeground = exports.badgeBackground = exports.pickerGroupBorder = exports.pickerGroupForeground = exports.listFilterWidgetNoMatchesOutline = exports.listFilterWidgetOutline = exports.listFilterWidgetBackground = exports.listHighlightForeground = exports.listDropBackground = exports.listHoverForeground = exports.listHoverBackground = exports.listInactiveFocusBackground = exports.listInactiveSelectionForeground = exports.listInactiveSelectionBackground = exports.listActiveSelectionForeground = exports.listActiveSelectionBackground = exports.listFocusForeground = exports.listFocusBackground = exports.selectForeground = exports.selectBackground = exports.inputValidationErrorBorder = exports.inputValidationErrorForeground = exports.inputValidationErrorBackground = exports.inputValidationWarningBorder = exports.inputValidationWarningForeground = exports.inputValidationWarningBackground = exports.inputValidationInfoBorder = exports.inputValidationInfoForeground = exports.inputValidationInfoBackground = exports.inputActiveOptionBorder = exports.inputBorder = exports.inputForeground = exports.inputBackground = exports.widgetShadow = exports.textCodeBlockBackground = exports.textLinkForeground = exports.activeContrastBorder = exports.contrastBorder = exports.focusBorder = exports.errorForeground = exports.foreground = exports.registerColor = exports.Extensions = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var platform = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/platform/registry/common/platform"));
  var color_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/color");
  var event_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/event");
  var nls = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/nls"));
  var jsonContributionRegistry_js_1 = require("node_modules/monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry");
  var async_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/async");
  // color registry
  exports.Extensions = {
      ColorContribution: 'base.contributions.colors'
  };
  var ColorRegistry = /** @class */ (function () {
      function ColorRegistry() {
          this._onDidChangeSchema = new event_js_1.Emitter();
          this.onDidChangeSchema = this._onDidChangeSchema.event;
          this.colorSchema = { type: 'object', properties: {} };
          this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };
          this.colorsById = {};
      }
      ColorRegistry.prototype.registerColor = function (id, defaults, description, needsTransparency, deprecationMessage) {
          if (needsTransparency === void 0) {
              needsTransparency = false;
          }
          var colorContribution = { id: id, description: description, defaults: defaults, needsTransparency: needsTransparency, deprecationMessage: deprecationMessage };
          this.colorsById[id] = colorContribution;
          var propertySchema = { type: 'string', description: description, format: 'color-hex', default: '#ff0000' };
          if (deprecationMessage) {
              propertySchema.deprecationMessage = deprecationMessage;
          }
          this.colorSchema.properties[id] = propertySchema;
          this.colorReferenceSchema.enum.push(id);
          this.colorReferenceSchema.enumDescriptions.push(description);
          this._onDidChangeSchema.fire();
          return id;
      };
      ColorRegistry.prototype.resolveDefaultColor = function (id, theme) {
          var colorDesc = this.colorsById[id];
          if (colorDesc && colorDesc.defaults) {
              var colorValue = colorDesc.defaults[theme.type];
              return resolveColorValue(colorValue, theme);
          }
          return undefined;
      };
      ColorRegistry.prototype.getColorSchema = function () {
          return this.colorSchema;
      };
      ColorRegistry.prototype.toString = function () {
          var _this = this;
          var sorter = function (a, b) {
              var cat1 = a.indexOf('.') === -1 ? 0 : 1;
              var cat2 = b.indexOf('.') === -1 ? 0 : 1;
              if (cat1 !== cat2) {
                  return cat1 - cat2;
              }
              return a.localeCompare(b);
          };
          return Object.keys(this.colorsById).sort(sorter).map(function (k) { return "- `" + k + "`: " + _this.colorsById[k].description; }).join('\n');
      };
      return ColorRegistry;
  }());
  var colorRegistry = new ColorRegistry();
  platform.Registry.add(exports.Extensions.ColorContribution, colorRegistry);
  function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {
      return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);
  }
  exports.registerColor = registerColor;
  // ----- base colors
  exports.foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hc: '#FFFFFF' }, nls.localize('foreground', "Overall foreground color. This color is only used if not overridden by a component."));
  exports.errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hc: '#F48771' }, nls.localize('errorForeground', "Overall foreground color for error messages. This color is only used if not overridden by a component."));
  exports.focusBorder = registerColor('focusBorder', { dark: color_js_1.Color.fromHex('#0E639C').transparent(0.8), light: color_js_1.Color.fromHex('#007ACC').transparent(0.4), hc: '#F38518' }, nls.localize('focusBorder', "Overall border color for focused elements. This color is only used if not overridden by a component."));
  exports.contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hc: '#6FC3DF' }, nls.localize('contrastBorder', "An extra border around elements to separate them from others for greater contrast."));
  exports.activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hc: exports.focusBorder }, nls.localize('activeContrastBorder', "An extra border around active elements to separate them from others for greater contrast."));
  exports.textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hc: '#3794FF' }, nls.localize('textLinkForeground', "Foreground color for links in text."));
  exports.textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hc: color_js_1.Color.black }, nls.localize('textCodeBlockBackground', "Background color for code blocks in text."));
  // ----- widgets
  exports.widgetShadow = registerColor('widget.shadow', { dark: '#000000', light: '#A8A8A8', hc: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));
  exports.inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: color_js_1.Color.white, hc: color_js_1.Color.black }, nls.localize('inputBoxBackground', "Input box background."));
  exports.inputForeground = registerColor('input.foreground', { dark: exports.foreground, light: exports.foreground, hc: exports.foreground }, nls.localize('inputBoxForeground', "Input box foreground."));
  exports.inputBorder = registerColor('input.border', { dark: null, light: null, hc: exports.contrastBorder }, nls.localize('inputBoxBorder', "Input box border."));
  exports.inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hc: exports.activeContrastBorder }, nls.localize('inputBoxActiveOptionBorder', "Border color of activated options in input fields."));
  exports.inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hc: color_js_1.Color.black }, nls.localize('inputValidationInfoBackground', "Input validation background color for information severity."));
  exports.inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationInfoForeground', "Input validation foreground color for information severity."));
  exports.inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hc: exports.contrastBorder }, nls.localize('inputValidationInfoBorder', "Input validation border color for information severity."));
  exports.inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hc: color_js_1.Color.black }, nls.localize('inputValidationWarningBackground', "Input validation background color for warning severity."));
  exports.inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationWarningForeground', "Input validation foreground color for warning severity."));
  exports.inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hc: exports.contrastBorder }, nls.localize('inputValidationWarningBorder', "Input validation border color for warning severity."));
  exports.inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hc: color_js_1.Color.black }, nls.localize('inputValidationErrorBackground', "Input validation background color for error severity."));
  exports.inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationErrorForeground', "Input validation foreground color for error severity."));
  exports.inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hc: exports.contrastBorder }, nls.localize('inputValidationErrorBorder', "Input validation border color for error severity."));
  exports.selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: color_js_1.Color.white, hc: color_js_1.Color.black }, nls.localize('dropdownBackground', "Dropdown background."));
  exports.selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: null, hc: color_js_1.Color.white }, nls.localize('dropdownForeground', "Dropdown foreground."));
  exports.listFocusBackground = registerColor('list.focusBackground', { dark: '#062F4A', light: '#D6EBFF', hc: null }, nls.localize('listFocusBackground', "List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
  exports.listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hc: null }, nls.localize('listFocusForeground', "List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
  exports.listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#094771', light: '#0074E8', hc: null }, nls.localize('listActiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
  exports.listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: color_js_1.Color.white, light: color_js_1.Color.white, hc: null }, nls.localize('listActiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
  exports.listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hc: null }, nls.localize('listInactiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
  exports.listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hc: null }, nls.localize('listInactiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
  exports.listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hc: null }, nls.localize('listInactiveFocusBackground', "List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
  exports.listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hc: null }, nls.localize('listHoverBackground', "List/Tree background when hovering over items using the mouse."));
  exports.listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hc: null }, nls.localize('listHoverForeground', "List/Tree foreground when hovering over items using the mouse."));
  exports.listDropBackground = registerColor('list.dropBackground', { dark: exports.listFocusBackground, light: exports.listFocusBackground, hc: null }, nls.localize('listDropBackground', "List/Tree drag and drop background when moving items around using the mouse."));
  exports.listHighlightForeground = registerColor('list.highlightForeground', { dark: '#0097fb', light: '#0066BF', hc: exports.focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));
  exports.listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: '#efc1ad', dark: '#653723', hc: color_js_1.Color.black }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));
  exports.listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: color_js_1.Color.transparent, light: color_js_1.Color.transparent, hc: '#f38518' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));
  exports.listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hc: exports.contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));
  exports.pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hc: color_js_1.Color.white }, nls.localize('pickerGroupForeground', "Quick picker color for grouping labels."));
  exports.pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hc: color_js_1.Color.white }, nls.localize('pickerGroupBorder', "Quick picker color for grouping borders."));
  exports.badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hc: color_js_1.Color.black }, nls.localize('badgeBackground', "Badge background color. Badges are small information labels, e.g. for search results count."));
  exports.badgeForeground = registerColor('badge.foreground', { dark: color_js_1.Color.white, light: '#333', hc: color_js_1.Color.white }, nls.localize('badgeForeground', "Badge foreground color. Badges are small information labels, e.g. for search results count."));
  exports.scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hc: null }, nls.localize('scrollbarShadow', "Scrollbar shadow to indicate that the view is scrolled."));
  exports.scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: color_js_1.Color.fromHex('#797979').transparent(0.4), light: color_js_1.Color.fromHex('#646464').transparent(0.4), hc: transparent(exports.contrastBorder, 0.6) }, nls.localize('scrollbarSliderBackground', "Scrollbar slider background color."));
  exports.scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: color_js_1.Color.fromHex('#646464').transparent(0.7), light: color_js_1.Color.fromHex('#646464').transparent(0.7), hc: transparent(exports.contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', "Scrollbar slider background color when hovering."));
  exports.scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: color_js_1.Color.fromHex('#BFBFBF').transparent(0.4), light: color_js_1.Color.fromHex('#000000').transparent(0.6), hc: exports.contrastBorder }, nls.localize('scrollbarSliderActiveBackground', "Scrollbar slider background color when clicked on."));
  exports.progressBarBackground = registerColor('progressBar.background', { dark: color_js_1.Color.fromHex('#0E70C0'), light: color_js_1.Color.fromHex('#0E70C0'), hc: exports.contrastBorder }, nls.localize('progressBarBackground', "Background color of the progress bar that can show for long running operations."));
  exports.menuBorder = registerColor('menu.border', { dark: null, light: null, hc: exports.contrastBorder }, nls.localize('menuBorder', "Border color of menus."));
  exports.menuForeground = registerColor('menu.foreground', { dark: exports.selectForeground, light: exports.foreground, hc: exports.selectForeground }, nls.localize('menuForeground', "Foreground color of menu items."));
  exports.menuBackground = registerColor('menu.background', { dark: exports.selectBackground, light: exports.selectBackground, hc: exports.selectBackground }, nls.localize('menuBackground', "Background color of menu items."));
  exports.menuSelectionForeground = registerColor('menu.selectionForeground', { dark: exports.listActiveSelectionForeground, light: exports.listActiveSelectionForeground, hc: exports.listActiveSelectionForeground }, nls.localize('menuSelectionForeground', "Foreground color of the selected menu item in menus."));
  exports.menuSelectionBackground = registerColor('menu.selectionBackground', { dark: exports.listActiveSelectionBackground, light: exports.listActiveSelectionBackground, hc: exports.listActiveSelectionBackground }, nls.localize('menuSelectionBackground', "Background color of the selected menu item in menus."));
  exports.menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hc: exports.activeContrastBorder }, nls.localize('menuSelectionBorder', "Border color of the selected menu item in menus."));
  exports.menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#BBBBBB', light: '#888888', hc: exports.contrastBorder }, nls.localize('menuSeparatorBackground', "Color of a separator menu item in menus."));
  /**
   * Editor background color.
   * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254
   * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.
   */
  exports.editorBackground = registerColor('editor.background', { light: '#fffffe', dark: '#1E1E1E', hc: color_js_1.Color.black }, nls.localize('editorBackground', "Editor background color."));
  /**
   * Editor foreground color.
   */
  exports.editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hc: color_js_1.Color.white }, nls.localize('editorForeground', "Editor default foreground color."));
  /**
   * Editor widgets
   */
  exports.editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hc: '#0C141F' }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));
  exports.editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hc: exports.contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));
  exports.editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hc: null }, nls.localize('editorWidgetResizeBorder', "Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget."));
  /**
   * Editor selection colors.
   */
  exports.editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hc: '#f3f518' }, nls.localize('editorSelectionBackground', "Color of the editor selection."));
  exports.editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hc: '#000000' }, nls.localize('editorSelectionForeground', "Color of the selected text for high contrast."));
  exports.editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(exports.editorSelectionBackground, 0.5), dark: transparent(exports.editorSelectionBackground, 0.5), hc: transparent(exports.editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', "Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations."), true);
  exports.editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(exports.editorSelectionBackground, exports.editorBackground, 0.3, 0.6), dark: lessProminent(exports.editorSelectionBackground, exports.editorBackground, 0.3, 0.6), hc: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);
  exports.editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hc: exports.activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', "Border color for regions with the same content as the selection."));
  /**
   * Editor find match colors.
   */
  exports.editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hc: null }, nls.localize('editorFindMatch', "Color of the current search match."));
  exports.editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hc: null }, nls.localize('findMatchHighlight', "Color of the other search matches. The color must not be opaque so as not to hide underlying decorations."), true);
  exports.editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hc: null }, nls.localize('findRangeHighlight', "Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."), true);
  exports.editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hc: exports.activeContrastBorder }, nls.localize('editorFindMatchBorder', "Border color of the current search match."));
  exports.editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hc: exports.activeContrastBorder }, nls.localize('findMatchHighlightBorder', "Border color of the other search matches."));
  exports.editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hc: transparent(exports.activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', "Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."), true);
  /**
   * Editor hover
   */
  exports.editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hc: '#ADD6FF26' }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);
  exports.editorHoverBackground = registerColor('editorHoverWidget.background', { light: exports.editorWidgetBackground, dark: exports.editorWidgetBackground, hc: exports.editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));
  exports.editorHoverBorder = registerColor('editorHoverWidget.border', { light: exports.editorWidgetBorder, dark: exports.editorWidgetBorder, hc: exports.editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));
  exports.editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(exports.editorHoverBackground, 0.2), light: darken(exports.editorHoverBackground, 0.05), hc: exports.editorWidgetBackground }, nls.localize('statusBarBackground', "Background color of the editor hover status bar."));
  /**
   * Editor link colors
   */
  exports.editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: color_js_1.Color.blue, hc: color_js_1.Color.cyan }, nls.localize('activeLinkForeground', 'Color of active links.'));
  /**
   * Diff Editor Colors
   */
  exports.defaultInsertColor = new color_js_1.Color(new color_js_1.RGBA(155, 185, 85, 0.2));
  exports.defaultRemoveColor = new color_js_1.Color(new color_js_1.RGBA(255, 0, 0, 0.2));
  exports.diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: exports.defaultInsertColor, light: exports.defaultInsertColor, hc: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);
  exports.diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: exports.defaultRemoveColor, light: exports.defaultRemoveColor, hc: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);
  exports.diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hc: '#33ff2eff' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));
  exports.diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hc: '#FF008F' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));
  exports.diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hc: exports.contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));
  /**
   * Snippet placeholder colors
   */
  exports.snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new color_js_1.Color(new color_js_1.RGBA(124, 124, 124, 0.3)), light: new color_js_1.Color(new color_js_1.RGBA(10, 50, 100, 0.2)), hc: new color_js_1.Color(new color_js_1.RGBA(124, 124, 124, 0.3)) }, nls.localize('snippetTabstopHighlightBackground', "Highlight background color of a snippet tabstop."));
  exports.snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hc: null }, nls.localize('snippetTabstopHighlightBorder', "Highlight border color of a snippet tabstop."));
  exports.snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hc: null }, nls.localize('snippetFinalTabstopHighlightBackground', "Highlight background color of the final tabstop of a snippet."));
  exports.snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new color_js_1.Color(new color_js_1.RGBA(10, 50, 100, 0.5)), hc: '#525252' }, nls.localize('snippetFinalTabstopHighlightBorder', "Highlight border color of the final stabstop of a snippet."));
  var findMatchColorDefault = new color_js_1.Color(new color_js_1.RGBA(246, 185, 77, 0.7));
  exports.overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: findMatchColorDefault, light: findMatchColorDefault, hc: findMatchColorDefault }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);
  exports.overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hc: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
  // ----- color functions
  function darken(colorValue, factor) {
      return function (theme) {
          var color = resolveColorValue(colorValue, theme);
          if (color) {
              return color.darken(factor);
          }
          return undefined;
      };
  }
  exports.darken = darken;
  function lighten(colorValue, factor) {
      return function (theme) {
          var color = resolveColorValue(colorValue, theme);
          if (color) {
              return color.lighten(factor);
          }
          return undefined;
      };
  }
  exports.lighten = lighten;
  function transparent(colorValue, factor) {
      return function (theme) {
          var color = resolveColorValue(colorValue, theme);
          if (color) {
              return color.transparent(factor);
          }
          return undefined;
      };
  }
  exports.transparent = transparent;
  function oneOf() {
      var colorValues = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          colorValues[_i] = arguments[_i];
      }
      return function (theme) {
          for (var _i = 0, colorValues_1 = colorValues; _i < colorValues_1.length; _i++) {
              var colorValue = colorValues_1[_i];
              var color = resolveColorValue(colorValue, theme);
              if (color) {
                  return color;
              }
          }
          return undefined;
      };
  }
  exports.oneOf = oneOf;
  function lessProminent(colorValue, backgroundColorValue, factor, transparency) {
      return function (theme) {
          var from = resolveColorValue(colorValue, theme);
          if (from) {
              var backgroundColor = resolveColorValue(backgroundColorValue, theme);
              if (backgroundColor) {
                  if (from.isDarkerThan(backgroundColor)) {
                      return color_js_1.Color.getLighterColor(from, backgroundColor, factor).transparent(transparency);
                  }
                  return color_js_1.Color.getDarkerColor(from, backgroundColor, factor).transparent(transparency);
              }
              return from.transparent(factor * transparency);
          }
          return undefined;
      };
  }
  // ----- implementation
  /**
   * @param colorValue Resolve a color value in the context of a theme
   */
  function resolveColorValue(colorValue, theme) {
      if (colorValue === null) {
          return undefined;
      }
      else if (typeof colorValue === 'string') {
          if (colorValue[0] === '#') {
              return color_js_1.Color.fromHex(colorValue);
          }
          return theme.getColor(colorValue);
      }
      else if (colorValue instanceof color_js_1.Color) {
          return colorValue;
      }
      else if (typeof colorValue === 'function') {
          return colorValue(theme);
      }
      return undefined;
  }
  exports.workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';
  var schemaRegistry = platform.Registry.as(jsonContributionRegistry_js_1.Extensions.JSONContribution);
  schemaRegistry.registerSchema(exports.workbenchColorsSchemaId, colorRegistry.getColorSchema());
  var delayer = new async_js_1.RunOnceScheduler(function () { return schemaRegistry.notifySchemaChanged(exports.workbenchColorsSchemaId); }, 200);
  colorRegistry.onDidChangeSchema(function () {
      if (!delayer.isScheduled()) {
          delayer.schedule();
      }
  });
  // setTimeout(_ => console.log(colorRegistry.toString()), 5000);
  

});
