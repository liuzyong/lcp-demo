define('node_modules/monaco-editor/esm/vs/platform/list/browser/listService', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.WorkbenchAsyncDataTree = exports.WorkbenchDataTree = exports.WorkbenchObjectTree = exports.automaticKeyboardNavigationSettingKey = exports.keyboardNavigationSettingKey = exports.horizontalScrollingKey = exports.openModeSettingKey = exports.multiSelectModifierSettingKey = exports.didBindWorkbenchListAutomaticKeyboardNavigation = exports.WorkbenchListAutomaticKeyboardNavigation = exports.WorkbenchListAutomaticKeyboardNavigationKey = exports.WorkbenchListSupportsKeyboardNavigation = exports.WorkbenchListMultiSelection = exports.WorkbenchListDoubleSelection = exports.WorkbenchListHasSelectionOrFocus = exports.WorkbenchListSupportsMultiSelectContextKey = exports.ListService = exports.IListService = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b)
                  if (b.hasOwnProperty(p))
                      d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __assign = (this && this.__assign) || function () {
      __assign = Object.assign || function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s)
                  if (Object.prototype.hasOwnProperty.call(s, p))
                      t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };
  var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
      else
          for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                  r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = (this && this.__param) || function (paramIndex, decorator) {
      return function (target, key) { decorator(target, key, paramIndex); };
  };
  var _a;
  var dom_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/dom");
  var listWidget_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/ui/list/listWidget");
  var lifecycle_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/lifecycle");
  var nls_js_1 = require("node_modules/monaco-editor/esm/vs/nls");
  var configuration_js_1 = require("node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration");
  var configurationRegistry_js_1 = require("node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry");
  var contextkey_js_1 = require("node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey");
  var instantiation_js_1 = require("node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation");
  var keybinding_js_1 = require("node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding");
  var platform_js_1 = require("node_modules/monaco-editor/esm/vs/platform/registry/common/platform");
  var styler_js_1 = require("node_modules/monaco-editor/esm/vs/platform/theme/common/styler");
  var themeService_js_1 = require("node_modules/monaco-editor/esm/vs/platform/theme/common/themeService");
  var objectTree_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/ui/tree/objectTree");
  var asyncDataTree_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/ui/tree/asyncDataTree");
  var dataTree_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/ui/tree/dataTree");
  var accessibility_js_1 = require("node_modules/monaco-editor/esm/vs/platform/accessibility/common/accessibility");
  exports.IListService = instantiation_js_1.createDecorator('listService');
  var ListService = /** @class */ (function () {
      function ListService(contextKeyService) {
          this.lists = [];
          this._lastFocusedWidget = undefined;
      }
      Object.defineProperty(ListService.prototype, "lastFocusedList", {
          get: function () {
              return this._lastFocusedWidget;
          },
          enumerable: true,
          configurable: true
      });
      ListService.prototype.register = function (widget, extraContextKeys) {
          var _this = this;
          if (this.lists.some(function (l) { return l.widget === widget; })) {
              throw new Error('Cannot register the same widget multiple times');
          }
          // Keep in our lists list
          var registeredList = { widget: widget, extraContextKeys: extraContextKeys };
          this.lists.push(registeredList);
          // Check for currently being focused
          if (widget.getHTMLElement() === document.activeElement) {
              this._lastFocusedWidget = widget;
          }
          var result = lifecycle_js_1.combinedDisposable([
              widget.onDidFocus(function () { return _this._lastFocusedWidget = widget; }),
              lifecycle_js_1.toDisposable(function () { return _this.lists.splice(_this.lists.indexOf(registeredList), 1); }),
              widget.onDidDispose(function () {
                  _this.lists = _this.lists.filter(function (l) { return l !== registeredList; });
                  if (_this._lastFocusedWidget === widget) {
                      _this._lastFocusedWidget = undefined;
                  }
              })
          ]);
          return result;
      };
      ListService = __decorate([
          __param(0, contextkey_js_1.IContextKeyService)
      ], ListService);
      return ListService;
  }());
  exports.ListService = ListService;
  var RawWorkbenchListFocusContextKey = new contextkey_js_1.RawContextKey('listFocus', true);
  exports.WorkbenchListSupportsMultiSelectContextKey = new contextkey_js_1.RawContextKey('listSupportsMultiselect', true);
  exports.WorkbenchListHasSelectionOrFocus = new contextkey_js_1.RawContextKey('listHasSelectionOrFocus', false);
  exports.WorkbenchListDoubleSelection = new contextkey_js_1.RawContextKey('listDoubleSelection', false);
  exports.WorkbenchListMultiSelection = new contextkey_js_1.RawContextKey('listMultiSelection', false);
  exports.WorkbenchListSupportsKeyboardNavigation = new contextkey_js_1.RawContextKey('listSupportsKeyboardNavigation', true);
  exports.WorkbenchListAutomaticKeyboardNavigationKey = 'listAutomaticKeyboardNavigation';
  exports.WorkbenchListAutomaticKeyboardNavigation = new contextkey_js_1.RawContextKey(exports.WorkbenchListAutomaticKeyboardNavigationKey, true);
  exports.didBindWorkbenchListAutomaticKeyboardNavigation = false;
  function createScopedContextKeyService(contextKeyService, widget) {
      var result = contextKeyService.createScoped(widget.getHTMLElement());
      RawWorkbenchListFocusContextKey.bindTo(result);
      return result;
  }
  exports.multiSelectModifierSettingKey = 'workbench.list.multiSelectModifier';
  exports.openModeSettingKey = 'workbench.list.openMode';
  exports.horizontalScrollingKey = 'workbench.list.horizontalScrolling';
  exports.keyboardNavigationSettingKey = 'workbench.list.keyboardNavigation';
  exports.automaticKeyboardNavigationSettingKey = 'workbench.list.automaticKeyboardNavigation';
  var treeIndentKey = 'workbench.tree.indent';
  function getHorizontalScrollingSetting(configurationService) {
      return configuration_js_1.getMigratedSettingValue(configurationService, exports.horizontalScrollingKey, 'workbench.tree.horizontalScrolling');
  }
  function useAltAsMultipleSelectionModifier(configurationService) {
      return configurationService.getValue(exports.multiSelectModifierSettingKey) === 'alt';
  }
  function useSingleClickToOpen(configurationService) {
      return configurationService.getValue(exports.openModeSettingKey) !== 'doubleClick';
  }
  var MultipleSelectionController = /** @class */ (function (_super) {
      __extends(MultipleSelectionController, _super);
      function MultipleSelectionController(configurationService) {
          var _this = _super.call(this) || this;
          _this.configurationService = configurationService;
          _this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);
          _this.registerListeners();
          return _this;
      }
      MultipleSelectionController.prototype.registerListeners = function () {
          var _this = this;
          this._register(this.configurationService.onDidChangeConfiguration(function (e) {
              if (e.affectsConfiguration(exports.multiSelectModifierSettingKey)) {
                  _this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(_this.configurationService);
              }
          }));
      };
      MultipleSelectionController.prototype.isSelectionSingleChangeEvent = function (event) {
          if (this.useAltAsMultipleSelectionModifier) {
              return event.browserEvent.altKey;
          }
          return listWidget_js_1.isSelectionSingleChangeEvent(event);
      };
      MultipleSelectionController.prototype.isSelectionRangeChangeEvent = function (event) {
          return listWidget_js_1.isSelectionRangeChangeEvent(event);
      };
      return MultipleSelectionController;
  }(lifecycle_js_1.Disposable));
  var WorkbenchOpenController = /** @class */ (function (_super) {
      __extends(WorkbenchOpenController, _super);
      function WorkbenchOpenController(configurationService, existingOpenController) {
          var _this = _super.call(this) || this;
          _this.configurationService = configurationService;
          _this.existingOpenController = existingOpenController;
          _this.openOnSingleClick = useSingleClickToOpen(configurationService);
          _this.registerListeners();
          return _this;
      }
      WorkbenchOpenController.prototype.registerListeners = function () {
          var _this = this;
          this._register(this.configurationService.onDidChangeConfiguration(function (e) {
              if (e.affectsConfiguration(exports.openModeSettingKey)) {
                  _this.openOnSingleClick = useSingleClickToOpen(_this.configurationService);
              }
          }));
      };
      WorkbenchOpenController.prototype.shouldOpen = function (event) {
          if (event instanceof MouseEvent) {
              var isLeftButton = event.button === 0;
              var isDoubleClick = event.detail === 2;
              if (isLeftButton && !this.openOnSingleClick && !isDoubleClick) {
                  return false;
              }
              if (isLeftButton /* left mouse button */ || event.button === 1 /* middle mouse button */) {
                  return this.existingOpenController ? this.existingOpenController.shouldOpen(event) : true;
              }
              return false;
          }
          return this.existingOpenController ? this.existingOpenController.shouldOpen(event) : true;
      };
      return WorkbenchOpenController;
  }(lifecycle_js_1.Disposable));
  function toWorkbenchListOptions(options, configurationService, keybindingService) {
      var disposables = [];
      var result = __assign({}, options);
      if (options.multipleSelectionSupport !== false && !options.multipleSelectionController) {
          var multipleSelectionController = new MultipleSelectionController(configurationService);
          result.multipleSelectionController = multipleSelectionController;
          disposables.push(multipleSelectionController);
      }
      var openController = new WorkbenchOpenController(configurationService, options.openController);
      result.openController = openController;
      disposables.push(openController);
      if (options.keyboardNavigationLabelProvider) {
          var tlp_1 = options.keyboardNavigationLabelProvider;
          result.keyboardNavigationLabelProvider = {
              getKeyboardNavigationLabel: function (e) { return tlp_1.getKeyboardNavigationLabel(e); },
              mightProducePrintableCharacter: function (e) { return keybindingService.mightProducePrintableCharacter(e); }
          };
      }
      return [result, lifecycle_js_1.combinedDisposable(disposables)];
  }
  var sharedListStyleSheet;
  function getSharedListStyleSheet() {
      if (!sharedListStyleSheet) {
          sharedListStyleSheet = dom_js_1.createStyleSheet();
      }
      return sharedListStyleSheet;
  }
  function createKeyboardNavigationEventFilter(container, keybindingService) {
      var inChord = false;
      return function (event) {
          if (inChord) {
              inChord = false;
              return false;
          }
          var result = keybindingService.softDispatch(event, container);
          if (result && result.enterChord) {
              inChord = true;
              return false;
          }
          inChord = false;
          return true;
      };
  }
  var WorkbenchObjectTree = /** @class */ (function (_super) {
      __extends(WorkbenchObjectTree, _super);
      function WorkbenchObjectTree(container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {
          var _this = this;
          var _a = workbenchTreeDataPreamble(container, options, contextKeyService, themeService, configurationService, keybindingService, accessibilityService), treeOptions = _a.options, getAutomaticKeyboardNavigation = _a.getAutomaticKeyboardNavigation, disposable = _a.disposable;
          _this = _super.call(this, container, delegate, renderers, treeOptions) || this;
          _this.disposables.push(disposable);
          _this.internals = new WorkbenchTreeInternals(_this, treeOptions, getAutomaticKeyboardNavigation, contextKeyService, listService, themeService, configurationService, accessibilityService);
          _this.disposables.push(_this.internals);
          return _this;
      }
      WorkbenchObjectTree = __decorate([
          __param(4, contextkey_js_1.IContextKeyService),
          __param(5, exports.IListService),
          __param(6, themeService_js_1.IThemeService),
          __param(7, configuration_js_1.IConfigurationService),
          __param(8, keybinding_js_1.IKeybindingService),
          __param(9, accessibility_js_1.IAccessibilityService)
      ], WorkbenchObjectTree);
      return WorkbenchObjectTree;
  }(objectTree_js_1.ObjectTree));
  exports.WorkbenchObjectTree = WorkbenchObjectTree;
  var WorkbenchDataTree = /** @class */ (function (_super) {
      __extends(WorkbenchDataTree, _super);
      function WorkbenchDataTree(container, delegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {
          var _this = this;
          var _a = workbenchTreeDataPreamble(container, options, contextKeyService, themeService, configurationService, keybindingService, accessibilityService), treeOptions = _a.options, getAutomaticKeyboardNavigation = _a.getAutomaticKeyboardNavigation, disposable = _a.disposable;
          _this = _super.call(this, container, delegate, renderers, dataSource, treeOptions) || this;
          _this.disposables.push(disposable);
          _this.internals = new WorkbenchTreeInternals(_this, treeOptions, getAutomaticKeyboardNavigation, contextKeyService, listService, themeService, configurationService, accessibilityService);
          _this.disposables.push(_this.internals);
          return _this;
      }
      WorkbenchDataTree = __decorate([
          __param(5, contextkey_js_1.IContextKeyService),
          __param(6, exports.IListService),
          __param(7, themeService_js_1.IThemeService),
          __param(8, configuration_js_1.IConfigurationService),
          __param(9, keybinding_js_1.IKeybindingService),
          __param(10, accessibility_js_1.IAccessibilityService)
      ], WorkbenchDataTree);
      return WorkbenchDataTree;
  }(dataTree_js_1.DataTree));
  exports.WorkbenchDataTree = WorkbenchDataTree;
  var WorkbenchAsyncDataTree = /** @class */ (function (_super) {
      __extends(WorkbenchAsyncDataTree, _super);
      function WorkbenchAsyncDataTree(container, delegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {
          var _this = this;
          var _a = workbenchTreeDataPreamble(container, options, contextKeyService, themeService, configurationService, keybindingService, accessibilityService), treeOptions = _a.options, getAutomaticKeyboardNavigation = _a.getAutomaticKeyboardNavigation, disposable = _a.disposable;
          _this = _super.call(this, container, delegate, renderers, dataSource, treeOptions) || this;
          _this.disposables.push(disposable);
          _this.internals = new WorkbenchTreeInternals(_this, treeOptions, getAutomaticKeyboardNavigation, contextKeyService, listService, themeService, configurationService, accessibilityService);
          _this.disposables.push(_this.internals);
          return _this;
      }
      Object.defineProperty(WorkbenchAsyncDataTree.prototype, "contextKeyService", {
          get: function () { return this.internals.contextKeyService; },
          enumerable: true,
          configurable: true
      });
      WorkbenchAsyncDataTree = __decorate([
          __param(5, contextkey_js_1.IContextKeyService),
          __param(6, exports.IListService),
          __param(7, themeService_js_1.IThemeService),
          __param(8, configuration_js_1.IConfigurationService),
          __param(9, keybinding_js_1.IKeybindingService),
          __param(10, accessibility_js_1.IAccessibilityService)
      ], WorkbenchAsyncDataTree);
      return WorkbenchAsyncDataTree;
  }(asyncDataTree_js_1.AsyncDataTree));
  exports.WorkbenchAsyncDataTree = WorkbenchAsyncDataTree;
  function workbenchTreeDataPreamble(container, options, contextKeyService, themeService, configurationService, keybindingService, accessibilityService) {
      exports.WorkbenchListSupportsKeyboardNavigation.bindTo(contextKeyService);
      if (!exports.didBindWorkbenchListAutomaticKeyboardNavigation) {
          exports.WorkbenchListAutomaticKeyboardNavigation.bindTo(contextKeyService);
          exports.didBindWorkbenchListAutomaticKeyboardNavigation = true;
      }
      var getAutomaticKeyboardNavigation = function () {
          // give priority to the context key value to disable this completely
          var automaticKeyboardNavigation = contextKeyService.getContextKeyValue(exports.WorkbenchListAutomaticKeyboardNavigationKey);
          if (automaticKeyboardNavigation) {
              automaticKeyboardNavigation = configurationService.getValue(exports.automaticKeyboardNavigationSettingKey);
          }
          return automaticKeyboardNavigation;
      };
      var accessibilityOn = accessibilityService.getAccessibilitySupport() === 2 /* Enabled */;
      var keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue(exports.keyboardNavigationSettingKey);
      var horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : getHorizontalScrollingSetting(configurationService);
      var openOnSingleClick = useSingleClickToOpen(configurationService);
      var _a = toWorkbenchListOptions(options, configurationService, keybindingService), workbenchListOptions = _a[0], disposable = _a[1];
      return {
          getAutomaticKeyboardNavigation: getAutomaticKeyboardNavigation,
          disposable: disposable,
          options: __assign({ keyboardSupport: false, styleController: new listWidget_js_1.DefaultStyleController(getSharedListStyleSheet()) }, styler_js_1.computeStyles(themeService.getTheme(), styler_js_1.defaultListStyles), workbenchListOptions, { indent: configurationService.getValue(treeIndentKey), automaticKeyboardNavigation: getAutomaticKeyboardNavigation(), simpleKeyboardNavigation: keyboardNavigation === 'simple', filterOnType: keyboardNavigation === 'filter', horizontalScrolling: horizontalScrolling,
              openOnSingleClick: openOnSingleClick, keyboardNavigationEventFilter: createKeyboardNavigationEventFilter(container, keybindingService) })
      };
  }
  var WorkbenchTreeInternals = /** @class */ (function () {
      function WorkbenchTreeInternals(tree, options, getAutomaticKeyboardNavigation, contextKeyService, listService, themeService, configurationService, accessibilityService) {
          var _this = this;
          this.disposables = [];
          this.contextKeyService = createScopedContextKeyService(contextKeyService, tree);
          var listSupportsMultiSelect = exports.WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);
          listSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));
          this.hasSelectionOrFocus = exports.WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);
          this.hasDoubleSelection = exports.WorkbenchListDoubleSelection.bindTo(this.contextKeyService);
          this.hasMultiSelection = exports.WorkbenchListMultiSelection.bindTo(this.contextKeyService);
          this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);
          var interestingContextKeys = new Set();
          interestingContextKeys.add(exports.WorkbenchListAutomaticKeyboardNavigationKey);
          var updateKeyboardNavigation = function () {
              var accessibilityOn = accessibilityService.getAccessibilitySupport() === 2 /* Enabled */;
              var keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue(exports.keyboardNavigationSettingKey);
              tree.updateOptions({
                  simpleKeyboardNavigation: keyboardNavigation === 'simple',
                  filterOnType: keyboardNavigation === 'filter'
              });
          };
          this.disposables.push(this.contextKeyService, listService.register(tree), styler_js_1.attachListStyler(tree, themeService), tree.onDidChangeSelection(function () {
              var selection = tree.getSelection();
              var focus = tree.getFocus();
              _this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);
              _this.hasMultiSelection.set(selection.length > 1);
              _this.hasDoubleSelection.set(selection.length === 2);
          }), tree.onDidChangeFocus(function () {
              var selection = tree.getSelection();
              var focus = tree.getFocus();
              _this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);
          }), configurationService.onDidChangeConfiguration(function (e) {
              if (e.affectsConfiguration(exports.openModeSettingKey)) {
                  tree.updateOptions({ openOnSingleClick: useSingleClickToOpen(configurationService) });
              }
              if (e.affectsConfiguration(exports.multiSelectModifierSettingKey)) {
                  _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);
              }
              if (e.affectsConfiguration(treeIndentKey)) {
                  var indent = configurationService.getValue(treeIndentKey);
                  tree.updateOptions({ indent: indent });
              }
              if (e.affectsConfiguration(exports.keyboardNavigationSettingKey)) {
                  updateKeyboardNavigation();
              }
              if (e.affectsConfiguration(exports.automaticKeyboardNavigationSettingKey)) {
                  tree.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });
              }
          }), this.contextKeyService.onDidChangeContext(function (e) {
              if (e.affectsSome(interestingContextKeys)) {
                  tree.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });
              }
          }), accessibilityService.onDidChangeAccessibilitySupport(function () { return updateKeyboardNavigation(); }));
      }
      WorkbenchTreeInternals.prototype.dispose = function () {
          this.disposables = lifecycle_js_1.dispose(this.disposables);
      };
      WorkbenchTreeInternals = __decorate([
          __param(3, contextkey_js_1.IContextKeyService),
          __param(4, exports.IListService),
          __param(5, themeService_js_1.IThemeService),
          __param(6, configuration_js_1.IConfigurationService),
          __param(7, accessibility_js_1.IAccessibilityService)
      ], WorkbenchTreeInternals);
      return WorkbenchTreeInternals;
  }());
  var configurationRegistry = platform_js_1.Registry.as(configurationRegistry_js_1.Extensions.Configuration);
  configurationRegistry.registerConfiguration({
      'id': 'workbench',
      'order': 7,
      'title': nls_js_1.localize('workbenchConfigurationTitle', "Workbench"),
      'type': 'object',
      'properties': (_a = {},
          _a[exports.multiSelectModifierSettingKey] = {
              'type': 'string',
              'enum': ['ctrlCmd', 'alt'],
              'enumDescriptions': [
                  nls_js_1.localize('multiSelectModifier.ctrlCmd', "Maps to `Control` on Windows and Linux and to `Command` on macOS."),
                  nls_js_1.localize('multiSelectModifier.alt', "Maps to `Alt` on Windows and Linux and to `Option` on macOS.")
              ],
              'default': 'ctrlCmd',
              'description': nls_js_1.localize({
                  key: 'multiSelectModifier',
                  comment: [
                      '- `ctrlCmd` refers to a value the setting can take and should not be localized.',
                      '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.'
                  ]
              }, "The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.")
          },
          _a[exports.openModeSettingKey] = {
              'type': 'string',
              'enum': ['singleClick', 'doubleClick'],
              'default': 'singleClick',
              'description': nls_js_1.localize({
                  key: 'openModeModifier',
                  comment: ['`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.']
              }, "Controls how to open items in trees and lists using the mouse (if supported). For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable. ")
          },
          _a[exports.horizontalScrollingKey] = {
              'type': 'boolean',
              'default': false,
              'description': nls_js_1.localize('horizontalScrolling setting', "Controls whether lists and trees support horizontal scrolling in the workbench.")
          },
          _a['workbench.tree.horizontalScrolling'] = {
              'type': 'boolean',
              'default': false,
              'description': nls_js_1.localize('tree horizontalScrolling setting', "Controls whether trees support horizontal scrolling in the workbench."),
              'deprecationMessage': nls_js_1.localize('deprecated', "This setting is deprecated, please use '{0}' instead.", exports.horizontalScrollingKey)
          },
          _a[treeIndentKey] = {
              'type': 'number',
              'default': 8,
              minimum: 0,
              maximum: 40,
              'description': nls_js_1.localize('tree indent setting', "Controls tree indentation in pixels.")
          },
          _a[exports.keyboardNavigationSettingKey] = {
              'type': 'string',
              'enum': ['simple', 'highlight', 'filter'],
              'enumDescriptions': [
                  nls_js_1.localize('keyboardNavigationSettingKey.simple', "Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes."),
                  nls_js_1.localize('keyboardNavigationSettingKey.highlight', "Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements."),
                  nls_js_1.localize('keyboardNavigationSettingKey.filter', "Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.")
              ],
              'default': 'highlight',
              'description': nls_js_1.localize('keyboardNavigationSettingKey', "Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.")
          },
          _a[exports.automaticKeyboardNavigationSettingKey] = {
              'type': 'boolean',
              'default': true,
              markdownDescription: nls_js_1.localize('automatic keyboard navigation setting', "Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.")
          },
          _a)
  });
  

});
