define('node_modules/monaco-editor/esm/vs/editor/common/services/markerDecorationsServiceImpl', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.MarkerDecorationsService = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b)
                  if (b.hasOwnProperty(p))
                      d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
      else
          for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                  r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = (this && this.__param) || function (paramIndex, decorator) {
      return function (target, key) { decorator(target, key, paramIndex); };
  };
  var markers_js_1 = require("node_modules/monaco-editor/esm/vs/platform/markers/common/markers");
  var lifecycle_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/lifecycle");
  var model_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/model");
  var themeService_js_1 = require("node_modules/monaco-editor/esm/vs/platform/theme/common/themeService");
  var editorColorRegistry_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/view/editorColorRegistry");
  var modelService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/services/modelService");
  var range_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/range");
  var map_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/map");
  var network_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/network");
  var event_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/event");
  var types_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/types");
  function MODEL_ID(resource) {
      return resource.toString();
  }
  var MarkerDecorations = /** @class */ (function (_super) {
      __extends(MarkerDecorations, _super);
      function MarkerDecorations(model) {
          var _this = _super.call(this) || this;
          _this.model = model;
          _this._markersData = new Map();
          _this._register(lifecycle_js_1.toDisposable(function () {
              _this.model.deltaDecorations(map_js_1.keys(_this._markersData), []);
              _this._markersData.clear();
          }));
          return _this;
      }
      MarkerDecorations.prototype.update = function (markers, newDecorations) {
          var ids = this.model.deltaDecorations(map_js_1.keys(this._markersData), newDecorations);
          for (var index = 0; index < ids.length; index++) {
              this._markersData.set(ids[index], markers[index]);
          }
      };
      MarkerDecorations.prototype.getMarker = function (decoration) {
          return this._markersData.get(decoration.id);
      };
      return MarkerDecorations;
  }(lifecycle_js_1.Disposable));
  var MarkerDecorationsService = /** @class */ (function (_super) {
      __extends(MarkerDecorationsService, _super);
      function MarkerDecorationsService(modelService, _markerService) {
          var _this = _super.call(this) || this;
          _this._markerService = _markerService;
          _this._onDidChangeMarker = new event_js_1.Emitter();
          _this._markerDecorations = new Map();
          modelService.getModels().forEach(function (model) { return _this._onModelAdded(model); });
          _this._register(modelService.onModelAdded(_this._onModelAdded, _this));
          _this._register(modelService.onModelRemoved(_this._onModelRemoved, _this));
          _this._register(_this._markerService.onMarkerChanged(_this._handleMarkerChange, _this));
          return _this;
      }
      MarkerDecorationsService.prototype.getMarker = function (model, decoration) {
          var markerDecorations = this._markerDecorations.get(MODEL_ID(model.uri));
          return markerDecorations ? types_js_1.withUndefinedAsNull(markerDecorations.getMarker(decoration)) : null;
      };
      MarkerDecorationsService.prototype._handleMarkerChange = function (changedResources) {
          var _this = this;
          changedResources.forEach(function (resource) {
              var markerDecorations = _this._markerDecorations.get(MODEL_ID(resource));
              if (markerDecorations) {
                  _this._updateDecorations(markerDecorations);
              }
          });
      };
      MarkerDecorationsService.prototype._onModelAdded = function (model) {
          var markerDecorations = new MarkerDecorations(model);
          this._markerDecorations.set(MODEL_ID(model.uri), markerDecorations);
          this._updateDecorations(markerDecorations);
      };
      MarkerDecorationsService.prototype._onModelRemoved = function (model) {
          var _this = this;
          var markerDecorations = this._markerDecorations.get(MODEL_ID(model.uri));
          if (markerDecorations) {
              markerDecorations.dispose();
              this._markerDecorations.delete(MODEL_ID(model.uri));
          }
          // clean up markers for internal, transient models
          if (model.uri.scheme === network_js_1.Schemas.inMemory
              || model.uri.scheme === network_js_1.Schemas.internal
              || model.uri.scheme === network_js_1.Schemas.vscode) {
              if (this._markerService) {
                  this._markerService.read({ resource: model.uri }).map(function (marker) { return marker.owner; }).forEach(function (owner) { return _this._markerService.remove(owner, [model.uri]); });
              }
          }
      };
      MarkerDecorationsService.prototype._updateDecorations = function (markerDecorations) {
          var _this = this;
          // Limit to the first 500 errors/warnings
          var markers = this._markerService.read({ resource: markerDecorations.model.uri, take: 500 });
          var newModelDecorations = markers.map(function (marker) {
              return {
                  range: _this._createDecorationRange(markerDecorations.model, marker),
                  options: _this._createDecorationOption(marker)
              };
          });
          markerDecorations.update(markers, newModelDecorations);
          this._onDidChangeMarker.fire(markerDecorations.model);
      };
      MarkerDecorationsService.prototype._createDecorationRange = function (model, rawMarker) {
          var ret = range_js_1.Range.lift(rawMarker);
          if (rawMarker.severity === markers_js_1.MarkerSeverity.Hint) {
              if (!rawMarker.tags || rawMarker.tags.indexOf(1 /* Unnecessary */) === -1) {
                  // * never render hints on multiple lines
                  // * make enough space for three dots
                  ret = ret.setEndPosition(ret.startLineNumber, ret.startColumn + 2);
              }
          }
          ret = model.validateRange(ret);
          if (ret.isEmpty()) {
              var word = model.getWordAtPosition(ret.getStartPosition());
              if (word) {
                  ret = new range_js_1.Range(ret.startLineNumber, word.startColumn, ret.endLineNumber, word.endColumn);
              }
              else {
                  var maxColumn = model.getLineLastNonWhitespaceColumn(ret.startLineNumber) ||
                      model.getLineMaxColumn(ret.startLineNumber);
                  if (maxColumn === 1) {
                      // empty line
                      // console.warn('marker on empty line:', marker);
                  }
                  else if (ret.endColumn >= maxColumn) {
                      // behind eol
                      ret = new range_js_1.Range(ret.startLineNumber, maxColumn - 1, ret.endLineNumber, maxColumn);
                  }
                  else {
                      // extend marker to width = 1
                      ret = new range_js_1.Range(ret.startLineNumber, ret.startColumn, ret.endLineNumber, ret.endColumn + 1);
                  }
              }
          }
          else if (rawMarker.endColumn === Number.MAX_VALUE && rawMarker.startColumn === 1 && ret.startLineNumber === ret.endLineNumber) {
              var minColumn = model.getLineFirstNonWhitespaceColumn(rawMarker.startLineNumber);
              if (minColumn < ret.endColumn) {
                  ret = new range_js_1.Range(ret.startLineNumber, minColumn, ret.endLineNumber, ret.endColumn);
                  rawMarker.startColumn = minColumn;
              }
          }
          return ret;
      };
      MarkerDecorationsService.prototype._createDecorationOption = function (marker) {
          var className;
          var color = undefined;
          var zIndex;
          var inlineClassName = undefined;
          switch (marker.severity) {
              case markers_js_1.MarkerSeverity.Hint:
                  if (marker.tags && marker.tags.indexOf(1 /* Unnecessary */) >= 0) {
                      className = "squiggly-unnecessary" /* EditorUnnecessaryDecoration */;
                  }
                  else {
                      className = "squiggly-hint" /* EditorHintDecoration */;
                  }
                  zIndex = 0;
                  break;
              case markers_js_1.MarkerSeverity.Warning:
                  className = "squiggly-warning" /* EditorWarningDecoration */;
                  color = themeService_js_1.themeColorFromId(editorColorRegistry_js_1.overviewRulerWarning);
                  zIndex = 20;
                  break;
              case markers_js_1.MarkerSeverity.Info:
                  className = "squiggly-info" /* EditorInfoDecoration */;
                  color = themeService_js_1.themeColorFromId(editorColorRegistry_js_1.overviewRulerInfo);
                  zIndex = 10;
                  break;
              case markers_js_1.MarkerSeverity.Error:
              default:
                  className = "squiggly-error" /* EditorErrorDecoration */;
                  color = themeService_js_1.themeColorFromId(editorColorRegistry_js_1.overviewRulerError);
                  zIndex = 30;
                  break;
          }
          if (marker.tags) {
              if (marker.tags.indexOf(1 /* Unnecessary */) !== -1) {
                  inlineClassName = "squiggly-inline-unnecessary" /* EditorUnnecessaryInlineDecoration */;
              }
          }
          return {
              stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,
              className: className,
              showIfCollapsed: true,
              overviewRuler: {
                  color: color,
                  position: model_js_1.OverviewRulerLane.Right
              },
              zIndex: zIndex,
              inlineClassName: inlineClassName,
          };
      };
      MarkerDecorationsService = __decorate([
          __param(0, modelService_js_1.IModelService),
          __param(1, markers_js_1.IMarkerService)
      ], MarkerDecorationsService);
      return MarkerDecorationsService;
  }(lifecycle_js_1.Disposable));
  exports.MarkerDecorationsService = MarkerDecorationsService;
  

});
