define('node_modules/monaco-editor/esm/vs/editor/common/view/editorColorRegistry', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.overviewRulerInfo = exports.overviewRulerWarning = exports.overviewRulerError = exports.editorUnnecessaryCodeOpacity = exports.editorUnnecessaryCodeBorder = exports.editorHintBorder = exports.editorHintForeground = exports.editorInfoBorder = exports.editorInfoForeground = exports.editorWarningBorder = exports.editorWarningForeground = exports.editorErrorBorder = exports.editorErrorForeground = exports.editorGutter = exports.editorOverviewRulerBorder = exports.editorBracketMatchBorder = exports.editorBracketMatchBackground = exports.editorCodeLensForeground = exports.editorRuler = exports.editorActiveLineNumber = exports.editorLineNumbers = exports.editorActiveIndentGuides = exports.editorIndentGuides = exports.editorWhitespaces = exports.editorCursorBackground = exports.editorCursorForeground = exports.editorRangeHighlightBorder = exports.editorRangeHighlight = exports.editorLineHighlightBorder = exports.editorLineHighlight = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var nls = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/nls"));
  var color_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/color");
  var colorRegistry_js_1 = require("node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry");
  var themeService_js_1 = require("node_modules/monaco-editor/esm/vs/platform/theme/common/themeService");
  /**
   * Definition of the editor colors
   */
  exports.editorLineHighlight = colorRegistry_js_1.registerColor('editor.lineHighlightBackground', { dark: null, light: null, hc: null }, nls.localize('lineHighlight', 'Background color for the highlight of line at the cursor position.'));
  exports.editorLineHighlightBorder = colorRegistry_js_1.registerColor('editor.lineHighlightBorder', { dark: '#282828', light: '#eeeeee', hc: '#f38518' }, nls.localize('lineHighlightBorderBox', 'Background color for the border around the line at the cursor position.'));
  exports.editorRangeHighlight = colorRegistry_js_1.registerColor('editor.rangeHighlightBackground', { dark: '#ffffff0b', light: '#fdff0033', hc: null }, nls.localize('rangeHighlight', 'Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.'), true);
  exports.editorRangeHighlightBorder = colorRegistry_js_1.registerColor('editor.rangeHighlightBorder', { dark: null, light: null, hc: colorRegistry_js_1.activeContrastBorder }, nls.localize('rangeHighlightBorder', 'Background color of the border around highlighted ranges.'), true);
  exports.editorCursorForeground = colorRegistry_js_1.registerColor('editorCursor.foreground', { dark: '#AEAFAD', light: color_js_1.Color.black, hc: color_js_1.Color.white }, nls.localize('caret', 'Color of the editor cursor.'));
  exports.editorCursorBackground = colorRegistry_js_1.registerColor('editorCursor.background', null, nls.localize('editorCursorBackground', 'The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.'));
  exports.editorWhitespaces = colorRegistry_js_1.registerColor('editorWhitespace.foreground', { dark: '#e3e4e229', light: '#33333333', hc: '#e3e4e229' }, nls.localize('editorWhitespaces', 'Color of whitespace characters in the editor.'));
  exports.editorIndentGuides = colorRegistry_js_1.registerColor('editorIndentGuide.background', { dark: exports.editorWhitespaces, light: exports.editorWhitespaces, hc: exports.editorWhitespaces }, nls.localize('editorIndentGuides', 'Color of the editor indentation guides.'));
  exports.editorActiveIndentGuides = colorRegistry_js_1.registerColor('editorIndentGuide.activeBackground', { dark: exports.editorWhitespaces, light: exports.editorWhitespaces, hc: exports.editorWhitespaces }, nls.localize('editorActiveIndentGuide', 'Color of the active editor indentation guides.'));
  exports.editorLineNumbers = colorRegistry_js_1.registerColor('editorLineNumber.foreground', { dark: '#858585', light: '#237893', hc: color_js_1.Color.white }, nls.localize('editorLineNumbers', 'Color of editor line numbers.'));
  var deprecatedEditorActiveLineNumber = colorRegistry_js_1.registerColor('editorActiveLineNumber.foreground', { dark: '#c6c6c6', light: '#0B216F', hc: colorRegistry_js_1.activeContrastBorder }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'), false, nls.localize('deprecatedEditorActiveLineNumber', 'Id is deprecated. Use \'editorLineNumber.activeForeground\' instead.'));
  exports.editorActiveLineNumber = colorRegistry_js_1.registerColor('editorLineNumber.activeForeground', { dark: deprecatedEditorActiveLineNumber, light: deprecatedEditorActiveLineNumber, hc: deprecatedEditorActiveLineNumber }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'));
  exports.editorRuler = colorRegistry_js_1.registerColor('editorRuler.foreground', { dark: '#5A5A5A', light: color_js_1.Color.lightgrey, hc: color_js_1.Color.white }, nls.localize('editorRuler', 'Color of the editor rulers.'));
  exports.editorCodeLensForeground = colorRegistry_js_1.registerColor('editorCodeLens.foreground', { dark: '#999999', light: '#999999', hc: '#999999' }, nls.localize('editorCodeLensForeground', 'Foreground color of editor code lenses'));
  exports.editorBracketMatchBackground = colorRegistry_js_1.registerColor('editorBracketMatch.background', { dark: '#0064001a', light: '#0064001a', hc: '#0064001a' }, nls.localize('editorBracketMatchBackground', 'Background color behind matching brackets'));
  exports.editorBracketMatchBorder = colorRegistry_js_1.registerColor('editorBracketMatch.border', { dark: '#888', light: '#B9B9B9', hc: '#fff' }, nls.localize('editorBracketMatchBorder', 'Color for matching brackets boxes'));
  exports.editorOverviewRulerBorder = colorRegistry_js_1.registerColor('editorOverviewRuler.border', { dark: '#7f7f7f4d', light: '#7f7f7f4d', hc: '#7f7f7f4d' }, nls.localize('editorOverviewRulerBorder', 'Color of the overview ruler border.'));
  exports.editorGutter = colorRegistry_js_1.registerColor('editorGutter.background', { dark: colorRegistry_js_1.editorBackground, light: colorRegistry_js_1.editorBackground, hc: colorRegistry_js_1.editorBackground }, nls.localize('editorGutter', 'Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.'));
  exports.editorErrorForeground = colorRegistry_js_1.registerColor('editorError.foreground', { dark: '#ea4646', light: '#d60a0a', hc: null }, nls.localize('errorForeground', 'Foreground color of error squigglies in the editor.'));
  exports.editorErrorBorder = colorRegistry_js_1.registerColor('editorError.border', { dark: null, light: null, hc: color_js_1.Color.fromHex('#E47777').transparent(0.8) }, nls.localize('errorBorder', 'Border color of error squigglies in the editor.'));
  exports.editorWarningForeground = colorRegistry_js_1.registerColor('editorWarning.foreground', { dark: '#4d9e4d', light: '#117711', hc: null }, nls.localize('warningForeground', 'Foreground color of warning squigglies in the editor.'));
  exports.editorWarningBorder = colorRegistry_js_1.registerColor('editorWarning.border', { dark: null, light: null, hc: color_js_1.Color.fromHex('#71B771').transparent(0.8) }, nls.localize('warningBorder', 'Border color of warning squigglies in the editor.'));
  exports.editorInfoForeground = colorRegistry_js_1.registerColor('editorInfo.foreground', { dark: '#008000', light: '#008000', hc: null }, nls.localize('infoForeground', 'Foreground color of info squigglies in the editor.'));
  exports.editorInfoBorder = colorRegistry_js_1.registerColor('editorInfo.border', { dark: null, light: null, hc: color_js_1.Color.fromHex('#71B771').transparent(0.8) }, nls.localize('infoBorder', 'Border color of info squigglies in the editor.'));
  exports.editorHintForeground = colorRegistry_js_1.registerColor('editorHint.foreground', { dark: color_js_1.Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hc: null }, nls.localize('hintForeground', 'Foreground color of hint squigglies in the editor.'));
  exports.editorHintBorder = colorRegistry_js_1.registerColor('editorHint.border', { dark: null, light: null, hc: color_js_1.Color.fromHex('#eeeeee').transparent(0.8) }, nls.localize('hintBorder', 'Border color of hint squigglies in the editor.'));
  exports.editorUnnecessaryCodeBorder = colorRegistry_js_1.registerColor('editorUnnecessaryCode.border', { dark: null, light: null, hc: color_js_1.Color.fromHex('#fff').transparent(0.8) }, nls.localize('unnecessaryCodeBorder', 'Border color of unnecessary (unused) source code in the editor.'));
  exports.editorUnnecessaryCodeOpacity = colorRegistry_js_1.registerColor('editorUnnecessaryCode.opacity', { dark: color_js_1.Color.fromHex('#000a'), light: color_js_1.Color.fromHex('#0007'), hc: null }, nls.localize('unnecessaryCodeOpacity', 'Opacity of unnecessary (unused) source code in the editor. For example, "#000000c0" will render the code with 75% opacity. For high contrast themes, use the  \'editorUnnecessaryCode.border\' theme color to underline unnecessary code instead of fading it out.'));
  exports.overviewRulerError = colorRegistry_js_1.registerColor('editorOverviewRuler.errorForeground', { dark: new color_js_1.Color(new color_js_1.RGBA(255, 18, 18, 0.7)), light: new color_js_1.Color(new color_js_1.RGBA(255, 18, 18, 0.7)), hc: new color_js_1.Color(new color_js_1.RGBA(255, 50, 50, 1)) }, nls.localize('overviewRuleError', 'Overview ruler marker color for errors.'));
  exports.overviewRulerWarning = colorRegistry_js_1.registerColor('editorOverviewRuler.warningForeground', { dark: new color_js_1.Color(new color_js_1.RGBA(18, 136, 18, 0.7)), light: new color_js_1.Color(new color_js_1.RGBA(18, 136, 18, 0.7)), hc: new color_js_1.Color(new color_js_1.RGBA(50, 255, 50, 1)) }, nls.localize('overviewRuleWarning', 'Overview ruler marker color for warnings.'));
  exports.overviewRulerInfo = colorRegistry_js_1.registerColor('editorOverviewRuler.infoForeground', { dark: new color_js_1.Color(new color_js_1.RGBA(18, 18, 136, 0.7)), light: new color_js_1.Color(new color_js_1.RGBA(18, 18, 136, 0.7)), hc: new color_js_1.Color(new color_js_1.RGBA(50, 50, 255, 1)) }, nls.localize('overviewRuleInfo', 'Overview ruler marker color for infos.'));
  // contains all color rules that used to defined in editor/browser/widget/editor.css
  themeService_js_1.registerThemingParticipant(function (theme, collector) {
      var background = theme.getColor(colorRegistry_js_1.editorBackground);
      if (background) {
          collector.addRule(".monaco-editor, .monaco-editor-background, .monaco-editor .inputarea.ime-input { background-color: " + background + "; }");
      }
      var foreground = theme.getColor(colorRegistry_js_1.editorForeground);
      if (foreground) {
          collector.addRule(".monaco-editor, .monaco-editor .inputarea.ime-input { color: " + foreground + "; }");
      }
      var gutter = theme.getColor(exports.editorGutter);
      if (gutter) {
          collector.addRule(".monaco-editor .margin { background-color: " + gutter + "; }");
      }
      var rangeHighlight = theme.getColor(exports.editorRangeHighlight);
      if (rangeHighlight) {
          collector.addRule(".monaco-editor .rangeHighlight { background-color: " + rangeHighlight + "; }");
      }
      var rangeHighlightBorder = theme.getColor(exports.editorRangeHighlightBorder);
      if (rangeHighlightBorder) {
          collector.addRule(".monaco-editor .rangeHighlight { border: 1px " + (theme.type === 'hc' ? 'dotted' : 'solid') + " " + rangeHighlightBorder + "; }");
      }
      var invisibles = theme.getColor(exports.editorWhitespaces);
      if (invisibles) {
          collector.addRule(".vs-whitespace { color: " + invisibles + " !important; }");
      }
  });
  

});
