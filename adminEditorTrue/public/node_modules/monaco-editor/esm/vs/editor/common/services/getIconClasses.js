define('node_modules/monaco-editor/esm/vs/editor/common/services/getIconClasses', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.cssEscape = exports.getConfiguredLangId = exports.getIconClasses = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var network_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/network");
  var resources_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/resources");
  var modesRegistry_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/modes/modesRegistry");
  var files_js_1 = require("node_modules/monaco-editor/esm/vs/platform/files/common/files");
  function getIconClasses(modelService, modeService, resource, fileKind) {
      // we always set these base classes even if we do not have a path
      var classes = fileKind === files_js_1.FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === files_js_1.FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];
      if (resource) {
          // Get the path and name of the resource. For data-URIs, we need to parse specially
          var name_1;
          var path = void 0;
          if (resource.scheme === network_js_1.Schemas.data) {
              var metadata = resources_js_1.DataUri.parseMetaData(resource);
              name_1 = metadata.get(resources_js_1.DataUri.META_DATA_LABEL);
              path = name_1;
          }
          else {
              name_1 = cssEscape(resources_js_1.basenameOrAuthority(resource).toLowerCase());
              path = resource.path.toLowerCase();
          }
          // Folders
          if (fileKind === files_js_1.FileKind.FOLDER) {
              classes.push(name_1 + "-name-folder-icon");
          }
          // Files
          else {
              // Name & Extension(s)
              if (name_1) {
                  classes.push(name_1 + "-name-file-icon");
                  var dotSegments = name_1.split('.');
                  for (var i = 1; i < dotSegments.length; i++) {
                      classes.push(dotSegments.slice(i).join('.') + "-ext-file-icon"); // add each combination of all found extensions if more than one
                  }
                  classes.push("ext-file-icon"); // extra segment to increase file-ext score
              }
              // Configured Language
              var configuredLangId = getConfiguredLangId(modelService, modeService, resource);
              configuredLangId = configuredLangId || (path ? modeService.getModeIdByFilepathOrFirstLine(path) : null);
              if (configuredLangId) {
                  classes.push(cssEscape(configuredLangId) + "-lang-file-icon");
              }
          }
      }
      return classes;
  }
  exports.getIconClasses = getIconClasses;
  function getConfiguredLangId(modelService, modeService, resource) {
      var configuredLangId = null;
      if (resource) {
          var modeId = null;
          // Data URI: check for encoded metadata
          if (resource.scheme === network_js_1.Schemas.data) {
              var metadata = resources_js_1.DataUri.parseMetaData(resource);
              var mime = metadata.get(resources_js_1.DataUri.META_DATA_MIME);
              if (mime) {
                  modeId = modeService.getModeId(mime);
              }
          }
          // Any other URI: check for model if existing
          else {
              var model = modelService.getModel(resource);
              if (model) {
                  modeId = model.getLanguageIdentifier().language;
              }
          }
          if (modeId && modeId !== modesRegistry_js_1.PLAINTEXT_MODE_ID) {
              configuredLangId = modeId; // only take if the mode is specific (aka no just plain text)
          }
      }
      return configuredLangId;
  }
  exports.getConfiguredLangId = getConfiguredLangId;
  function cssEscape(val) {
      return val.replace(/\s/g, '\\$&'); // make sure to not introduce CSS classes from files that contain whitespace
  }
  exports.cssEscape = cssEscape;
  

});
