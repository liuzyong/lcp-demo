define('node_modules/monaco-editor/esm/vs/editor/common/modes/nullMode', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.nullTokenize2 = exports.nullTokenize = exports.NULL_LANGUAGE_IDENTIFIER = exports.NULL_MODE_ID = exports.NULL_STATE = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var token_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/token");
  var modes_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/modes");
  var NullStateImpl = /** @class */ (function () {
      function NullStateImpl() {
      }
      NullStateImpl.prototype.clone = function () {
          return this;
      };
      NullStateImpl.prototype.equals = function (other) {
          return (this === other);
      };
      return NullStateImpl;
  }());
  exports.NULL_STATE = new NullStateImpl();
  exports.NULL_MODE_ID = 'vs.editor.nullMode';
  exports.NULL_LANGUAGE_IDENTIFIER = new modes_js_1.LanguageIdentifier(exports.NULL_MODE_ID, 0 /* Null */);
  function nullTokenize(modeId, buffer, state, deltaOffset) {
      return new token_js_1.TokenizationResult([new token_js_1.Token(deltaOffset, '', modeId)], state);
  }
  exports.nullTokenize = nullTokenize;
  function nullTokenize2(languageId, buffer, state, deltaOffset) {
      var tokens = new Uint32Array(2);
      tokens[0] = deltaOffset;
      tokens[1] = ((languageId << 0 /* LANGUAGEID_OFFSET */)
          | (0 /* Other */ << 8 /* TOKEN_TYPE_OFFSET */)
          | (0 /* None */ << 11 /* FONT_STYLE_OFFSET */)
          | (1 /* DefaultForeground */ << 14 /* FOREGROUND_OFFSET */)
          | (2 /* DefaultBackground */ << 23 /* BACKGROUND_OFFSET */)) >>> 0;
      return new token_js_1.TokenizationResult2(tokens, state === null ? exports.NULL_STATE : state);
  }
  exports.nullTokenize2 = nullTokenize2;
  

});
