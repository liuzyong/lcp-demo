define('node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickOpenEditorWidget', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.QuickOpenEditorWidget = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var dom_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/dom");
  var quickOpenWidget_js_1 = require("node_modules/monaco-editor/esm/vs/base/parts/quickopen/browser/quickOpenWidget");
  var colorRegistry_js_1 = require("node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry");
  var styler_js_1 = require("node_modules/monaco-editor/esm/vs/platform/theme/common/styler");
  var QuickOpenEditorWidget = /** @class */ (function () {
      function QuickOpenEditorWidget(codeEditor, onOk, onCancel, onType, configuration, themeService) {
          this.codeEditor = codeEditor;
          this.themeService = themeService;
          this.create(onOk, onCancel, onType, configuration);
      }
      QuickOpenEditorWidget.prototype.create = function (onOk, onCancel, onType, configuration) {
          this.domNode = document.createElement('div');
          this.quickOpenWidget = new quickOpenWidget_js_1.QuickOpenWidget(this.domNode, {
              onOk: onOk,
              onCancel: onCancel,
              onType: onType
          }, {
              inputPlaceHolder: undefined,
              inputAriaLabel: configuration.inputAriaLabel,
              keyboardSupport: true
          });
          this.styler = styler_js_1.attachQuickOpenStyler(this.quickOpenWidget, this.themeService, {
              pickerGroupForeground: colorRegistry_js_1.foreground
          });
          this.quickOpenWidget.create();
          this.codeEditor.addOverlayWidget(this);
      };
      QuickOpenEditorWidget.prototype.setInput = function (model, focus) {
          this.quickOpenWidget.setInput(model, focus);
      };
      QuickOpenEditorWidget.prototype.getId = function () {
          return QuickOpenEditorWidget.ID;
      };
      QuickOpenEditorWidget.prototype.getDomNode = function () {
          return this.domNode;
      };
      QuickOpenEditorWidget.prototype.destroy = function () {
          this.codeEditor.removeOverlayWidget(this);
          this.quickOpenWidget.dispose();
          this.styler.dispose();
      };
      QuickOpenEditorWidget.prototype.show = function (value) {
          this.visible = true;
          var editorLayout = this.codeEditor.getLayoutInfo();
          if (editorLayout) {
              this.quickOpenWidget.layout(new dom_js_1.Dimension(editorLayout.width, editorLayout.height));
          }
          this.quickOpenWidget.show(value);
          this.codeEditor.layoutOverlayWidget(this);
      };
      QuickOpenEditorWidget.prototype.getPosition = function () {
          if (this.visible) {
              return {
                  preference: 2 /* TOP_CENTER */
              };
          }
          return null;
      };
      QuickOpenEditorWidget.ID = 'editor.contrib.quickOpenEditorWidget';
      return QuickOpenEditorWidget;
  }());
  exports.QuickOpenEditorWidget = QuickOpenEditorWidget;
  

});
