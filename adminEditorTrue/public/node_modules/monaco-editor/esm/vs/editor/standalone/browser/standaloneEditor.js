define('node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneEditor', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createMonacoEditorAPI = exports.remeasureFonts = exports.setTheme = exports.defineTheme = exports.tokenize = exports.colorizeModelLine = exports.colorize = exports.colorizeElement = exports.createWebWorker = exports.onDidChangeModelLanguage = exports.onWillDisposeModel = exports.onDidCreateModel = exports.getModels = exports.getModel = exports.getModelMarkers = exports.setModelMarkers = exports.setModelLanguage = exports.createModel = exports.createDiffNavigator = exports.createDiffEditor = exports.onDidCreateEditor = exports.create = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  ''/*@require node_modules/monaco-editor/esm/vs/editor/standalone/browser/standalone-tokens.css*/;
  var codeEditorService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService");
  var openerService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/services/openerService");
  var diffNavigator_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/widget/diffNavigator");
  var editorOptions = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/editor/common/config/editorOptions"));
  var fontInfo_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/config/fontInfo");
  var editorCommon = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/editor/common/editorCommon"));
  var model_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/model");
  var modes = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/editor/common/modes"));
  var nullMode_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/modes/nullMode");
  var editorWorkerService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/services/editorWorkerService");
  var resolverService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/services/resolverService");
  var webWorker_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/services/webWorker");
  var standaloneEnums = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums"));
  var colorizer_js_1 = require("node_modules/monaco-editor/esm/vs/editor/standalone/browser/colorizer");
  var simpleServices_js_1 = require("node_modules/monaco-editor/esm/vs/editor/standalone/browser/simpleServices");
  var standaloneCodeEditor_js_1 = require("node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneCodeEditor");
  var standaloneServices_js_1 = require("node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneServices");
  var standaloneThemeService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/standalone/common/standaloneThemeService");
  var commands_js_1 = require("node_modules/monaco-editor/esm/vs/platform/commands/common/commands");
  var configuration_js_1 = require("node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration");
  var contextkey_js_1 = require("node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey");
  var contextView_js_1 = require("node_modules/monaco-editor/esm/vs/platform/contextview/browser/contextView");
  var instantiation_js_1 = require("node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation");
  var keybinding_js_1 = require("node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding");
  var notification_js_1 = require("node_modules/monaco-editor/esm/vs/platform/notification/common/notification");
  var opener_js_1 = require("node_modules/monaco-editor/esm/vs/platform/opener/common/opener");
  var accessibility_js_1 = require("node_modules/monaco-editor/esm/vs/platform/accessibility/common/accessibility");
  var configuration_js_2 = require("node_modules/monaco-editor/esm/vs/editor/browser/config/configuration");
  function withAllStandaloneServices(domElement, override, callback) {
      var services = new standaloneServices_js_1.DynamicStandaloneServices(domElement, override);
      var simpleEditorModelResolverService = null;
      if (!services.has(resolverService_js_1.ITextModelService)) {
          simpleEditorModelResolverService = new simpleServices_js_1.SimpleEditorModelResolverService();
          services.set(resolverService_js_1.ITextModelService, simpleEditorModelResolverService);
      }
      if (!services.has(opener_js_1.IOpenerService)) {
          services.set(opener_js_1.IOpenerService, new openerService_js_1.OpenerService(services.get(codeEditorService_js_1.ICodeEditorService), services.get(commands_js_1.ICommandService)));
      }
      var result = callback(services);
      if (simpleEditorModelResolverService) {
          simpleEditorModelResolverService.setEditor(result);
      }
      return result;
  }
  /**
   * Create a new editor under `domElement`.
   * `domElement` should be empty (not contain other dom nodes).
   * The editor will read the size of `domElement`.
   */
  function create(domElement, options, override) {
      return withAllStandaloneServices(domElement, override || {}, function (services) {
          return new standaloneCodeEditor_js_1.StandaloneEditor(domElement, options, services, services.get(instantiation_js_1.IInstantiationService), services.get(codeEditorService_js_1.ICodeEditorService), services.get(commands_js_1.ICommandService), services.get(contextkey_js_1.IContextKeyService), services.get(keybinding_js_1.IKeybindingService), services.get(contextView_js_1.IContextViewService), services.get(standaloneThemeService_js_1.IStandaloneThemeService), services.get(notification_js_1.INotificationService), services.get(configuration_js_1.IConfigurationService), services.get(accessibility_js_1.IAccessibilityService));
      });
  }
  exports.create = create;
  /**
   * Emitted when an editor is created.
   * Creating a diff editor might cause this listener to be invoked with the two editors.
   * @event
   */
  function onDidCreateEditor(listener) {
      return standaloneServices_js_1.StaticServices.codeEditorService.get().onCodeEditorAdd(function (editor) {
          listener(editor);
      });
  }
  exports.onDidCreateEditor = onDidCreateEditor;
  /**
   * Create a new diff editor under `domElement`.
   * `domElement` should be empty (not contain other dom nodes).
   * The editor will read the size of `domElement`.
   */
  function createDiffEditor(domElement, options, override) {
      return withAllStandaloneServices(domElement, override || {}, function (services) {
          return new standaloneCodeEditor_js_1.StandaloneDiffEditor(domElement, options, services, services.get(instantiation_js_1.IInstantiationService), services.get(contextkey_js_1.IContextKeyService), services.get(keybinding_js_1.IKeybindingService), services.get(contextView_js_1.IContextViewService), services.get(editorWorkerService_js_1.IEditorWorkerService), services.get(codeEditorService_js_1.ICodeEditorService), services.get(standaloneThemeService_js_1.IStandaloneThemeService), services.get(notification_js_1.INotificationService), services.get(configuration_js_1.IConfigurationService));
      });
  }
  exports.createDiffEditor = createDiffEditor;
  function createDiffNavigator(diffEditor, opts) {
      return new diffNavigator_js_1.DiffNavigator(diffEditor, opts);
  }
  exports.createDiffNavigator = createDiffNavigator;
  function doCreateModel(value, languageSelection, uri) {
      return standaloneServices_js_1.StaticServices.modelService.get().createModel(value, languageSelection, uri);
  }
  /**
   * Create a new editor model.
   * You can specify the language that should be set for this model or let the language be inferred from the `uri`.
   */
  function createModel(value, language, uri) {
      value = value || '';
      if (!language) {
          var path = uri ? uri.path : null;
          var firstLF = value.indexOf('\n');
          var firstLine = value;
          if (firstLF !== -1) {
              firstLine = value.substring(0, firstLF);
          }
          return doCreateModel(value, standaloneServices_js_1.StaticServices.modeService.get().createByFilepathOrFirstLine(path, firstLine), uri);
      }
      return doCreateModel(value, standaloneServices_js_1.StaticServices.modeService.get().create(language), uri);
  }
  exports.createModel = createModel;
  /**
   * Change the language for a model.
   */
  function setModelLanguage(model, languageId) {
      standaloneServices_js_1.StaticServices.modelService.get().setMode(model, standaloneServices_js_1.StaticServices.modeService.get().create(languageId));
  }
  exports.setModelLanguage = setModelLanguage;
  /**
   * Set the markers for a model.
   */
  function setModelMarkers(model, owner, markers) {
      if (model) {
          standaloneServices_js_1.StaticServices.markerService.get().changeOne(owner, model.uri, markers);
      }
  }
  exports.setModelMarkers = setModelMarkers;
  /**
   * Get markers for owner and/or resource
   *
   * @returns list of markers
   */
  function getModelMarkers(filter) {
      return standaloneServices_js_1.StaticServices.markerService.get().read(filter);
  }
  exports.getModelMarkers = getModelMarkers;
  /**
   * Get the model that has `uri` if it exists.
   */
  function getModel(uri) {
      return standaloneServices_js_1.StaticServices.modelService.get().getModel(uri);
  }
  exports.getModel = getModel;
  /**
   * Get all the created models.
   */
  function getModels() {
      return standaloneServices_js_1.StaticServices.modelService.get().getModels();
  }
  exports.getModels = getModels;
  /**
   * Emitted when a model is created.
   * @event
   */
  function onDidCreateModel(listener) {
      return standaloneServices_js_1.StaticServices.modelService.get().onModelAdded(listener);
  }
  exports.onDidCreateModel = onDidCreateModel;
  /**
   * Emitted right before a model is disposed.
   * @event
   */
  function onWillDisposeModel(listener) {
      return standaloneServices_js_1.StaticServices.modelService.get().onModelRemoved(listener);
  }
  exports.onWillDisposeModel = onWillDisposeModel;
  /**
   * Emitted when a different language is set to a model.
   * @event
   */
  function onDidChangeModelLanguage(listener) {
      return standaloneServices_js_1.StaticServices.modelService.get().onModelModeChanged(function (e) {
          listener({
              model: e.model,
              oldLanguage: e.oldModeId
          });
      });
  }
  exports.onDidChangeModelLanguage = onDidChangeModelLanguage;
  /**
   * Create a new web worker that has model syncing capabilities built in.
   * Specify an AMD module to load that will `create` an object that will be proxied.
   */
  function createWebWorker(opts) {
      return webWorker_js_1.createWebWorker(standaloneServices_js_1.StaticServices.modelService.get(), opts);
  }
  exports.createWebWorker = createWebWorker;
  /**
   * Colorize the contents of `domNode` using attribute `data-lang`.
   */
  function colorizeElement(domNode, options) {
      return colorizer_js_1.Colorizer.colorizeElement(standaloneServices_js_1.StaticServices.standaloneThemeService.get(), standaloneServices_js_1.StaticServices.modeService.get(), domNode, options);
  }
  exports.colorizeElement = colorizeElement;
  /**
   * Colorize `text` using language `languageId`.
   */
  function colorize(text, languageId, options) {
      return colorizer_js_1.Colorizer.colorize(standaloneServices_js_1.StaticServices.modeService.get(), text, languageId, options);
  }
  exports.colorize = colorize;
  /**
   * Colorize a line in a model.
   */
  function colorizeModelLine(model, lineNumber, tabSize) {
      if (tabSize === void 0) {
          tabSize = 4;
      }
      return colorizer_js_1.Colorizer.colorizeModelLine(model, lineNumber, tabSize);
  }
  exports.colorizeModelLine = colorizeModelLine;
  /**
   * @internal
   */
  function getSafeTokenizationSupport(language) {
      var tokenizationSupport = modes.TokenizationRegistry.get(language);
      if (tokenizationSupport) {
          return tokenizationSupport;
      }
      return {
          getInitialState: function () { return nullMode_js_1.NULL_STATE; },
          tokenize: function (line, state, deltaOffset) { return nullMode_js_1.nullTokenize(language, line, state, deltaOffset); }
      };
  }
  /**
   * Tokenize `text` using language `languageId`
   */
  function tokenize(text, languageId) {
      var modeService = standaloneServices_js_1.StaticServices.modeService.get();
      // Needed in order to get the mode registered for subsequent look-ups
      modeService.triggerMode(languageId);
      var tokenizationSupport = getSafeTokenizationSupport(languageId);
      var lines = text.split(/\r\n|\r|\n/);
      var result = [];
      var state = tokenizationSupport.getInitialState();
      for (var i = 0, len = lines.length; i < len; i++) {
          var line = lines[i];
          var tokenizationResult = tokenizationSupport.tokenize(line, state, 0);
          result[i] = tokenizationResult.tokens;
          state = tokenizationResult.endState;
      }
      return result;
  }
  exports.tokenize = tokenize;
  /**
   * Define a new theme or update an existing theme.
   */
  function defineTheme(themeName, themeData) {
      standaloneServices_js_1.StaticServices.standaloneThemeService.get().defineTheme(themeName, themeData);
  }
  exports.defineTheme = defineTheme;
  /**
   * Switches to a theme.
   */
  function setTheme(themeName) {
      standaloneServices_js_1.StaticServices.standaloneThemeService.get().setTheme(themeName);
  }
  exports.setTheme = setTheme;
  /**
   * Clears all cached font measurements and triggers re-measurement.
   */
  function remeasureFonts() {
      configuration_js_2.clearAllFontInfos();
  }
  exports.remeasureFonts = remeasureFonts;
  /**
   * @internal
   */
  function createMonacoEditorAPI() {
      return {
          // methods
          create: create,
          onDidCreateEditor: onDidCreateEditor,
          createDiffEditor: createDiffEditor,
          createDiffNavigator: createDiffNavigator,
          createModel: createModel,
          setModelLanguage: setModelLanguage,
          setModelMarkers: setModelMarkers,
          getModelMarkers: getModelMarkers,
          getModels: getModels,
          getModel: getModel,
          onDidCreateModel: onDidCreateModel,
          onWillDisposeModel: onWillDisposeModel,
          onDidChangeModelLanguage: onDidChangeModelLanguage,
          createWebWorker: createWebWorker,
          colorizeElement: colorizeElement,
          colorize: colorize,
          colorizeModelLine: colorizeModelLine,
          tokenize: tokenize,
          defineTheme: defineTheme,
          setTheme: setTheme,
          remeasureFonts: remeasureFonts,
          // enums
          ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,
          WrappingIndent: standaloneEnums.WrappingIndent,
          OverviewRulerLane: standaloneEnums.OverviewRulerLane,
          EndOfLinePreference: standaloneEnums.EndOfLinePreference,
          DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,
          EndOfLineSequence: standaloneEnums.EndOfLineSequence,
          TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,
          CursorChangeReason: standaloneEnums.CursorChangeReason,
          MouseTargetType: standaloneEnums.MouseTargetType,
          TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,
          TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,
          ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,
          OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,
          RenderMinimap: standaloneEnums.RenderMinimap,
          ScrollType: standaloneEnums.ScrollType,
          RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,
          // classes
          InternalEditorOptions: editorOptions.InternalEditorOptions,
          BareFontInfo: fontInfo_js_1.BareFontInfo,
          FontInfo: fontInfo_js_1.FontInfo,
          TextModelResolvedOptions: model_js_1.TextModelResolvedOptions,
          FindMatch: model_js_1.FindMatch,
          // vars
          EditorType: editorCommon.EditorType
      };
  }
  exports.createMonacoEditorAPI = createMonacoEditorAPI;
  

});
