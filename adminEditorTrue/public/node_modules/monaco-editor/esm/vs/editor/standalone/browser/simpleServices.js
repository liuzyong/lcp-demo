define('node_modules/monaco-editor/esm/vs/editor/standalone/browser/simpleServices', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.SimpleLayoutService = exports.SimpleUriLabelService = exports.SimpleBulkEditService = exports.applyConfigurationValues = exports.SimpleWorkspaceContextService = exports.StandaloneTelemetryService = exports.SimpleResourcePropertiesService = exports.SimpleResourceConfigurationService = exports.SimpleConfigurationService = exports.StandaloneKeybindingService = exports.StandaloneCommandService = exports.SimpleNotificationService = exports.SimpleDialogService = exports.SimpleProgressService = exports.SimpleEditorModelResolverService = exports.SimpleModel = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b)
                  if (b.hasOwnProperty(p))
                      d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
      else
          for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                  r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = (this && this.__param) || function (paramIndex, decorator) {
      return function (target, key) { decorator(target, key, paramIndex); };
  };
  var strings = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/base/common/strings"));
  var dom = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/base/browser/dom"));
  var keyboardEvent_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/keyboardEvent");
  var event_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/event");
  var keyCodes_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/keyCodes");
  var lifecycle_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/lifecycle");
  var platform_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/platform");
  var severity_js_1 = tslib_1.__importDefault(require("node_modules/monaco-editor/esm/vs/base/common/severity"));
  var uri_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/uri");
  var editorBrowser_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorBrowser");
  var commonEditorConfig_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/config/commonEditorConfig");
  var editOperation_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/editOperation");
  var position_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/position");
  var range_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/range");
  var modes_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/modes");
  var commands_js_1 = require("node_modules/monaco-editor/esm/vs/platform/commands/common/commands");
  var configuration_js_1 = require("node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration");
  var configurationModels_js_1 = require("node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationModels");
  var abstractKeybindingService_js_1 = require("node_modules/monaco-editor/esm/vs/platform/keybinding/common/abstractKeybindingService");
  var keybindingResolver_js_1 = require("node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingResolver");
  var keybindingsRegistry_js_1 = require("node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry");
  var resolvedKeybindingItem_js_1 = require("node_modules/monaco-editor/esm/vs/platform/keybinding/common/resolvedKeybindingItem");
  var usLayoutResolvedKeybinding_js_1 = require("node_modules/monaco-editor/esm/vs/platform/keybinding/common/usLayoutResolvedKeybinding");
  var notification_js_1 = require("node_modules/monaco-editor/esm/vs/platform/notification/common/notification");
  var workspace_js_1 = require("node_modules/monaco-editor/esm/vs/platform/workspace/common/workspace");
  var standaloneStrings_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/standaloneStrings");
  var SimpleModel = /** @class */ (function () {
      function SimpleModel(model) {
          this.model = model;
          this._onDispose = new event_js_1.Emitter();
      }
      Object.defineProperty(SimpleModel.prototype, "textEditorModel", {
          get: function () {
              return this.model;
          },
          enumerable: true,
          configurable: true
      });
      SimpleModel.prototype.dispose = function () {
          this._onDispose.fire();
      };
      return SimpleModel;
  }());
  exports.SimpleModel = SimpleModel;
  function withTypedEditor(widget, codeEditorCallback, diffEditorCallback) {
      if (editorBrowser_js_1.isCodeEditor(widget)) {
          // Single Editor
          return codeEditorCallback(widget);
      }
      else {
          // Diff Editor
          return diffEditorCallback(widget);
      }
  }
  var SimpleEditorModelResolverService = /** @class */ (function () {
      function SimpleEditorModelResolverService() {
      }
      SimpleEditorModelResolverService.prototype.setEditor = function (editor) {
          this.editor = editor;
      };
      SimpleEditorModelResolverService.prototype.createModelReference = function (resource) {
          var _this = this;
          var model = withTypedEditor(this.editor, function (editor) { return _this.findModel(editor, resource); }, function (diffEditor) { return _this.findModel(diffEditor.getOriginalEditor(), resource) || _this.findModel(diffEditor.getModifiedEditor(), resource); });
          if (!model) {
              return Promise.reject(new Error("Model not found"));
          }
          return Promise.resolve(new lifecycle_js_1.ImmortalReference(new SimpleModel(model)));
      };
      SimpleEditorModelResolverService.prototype.findModel = function (editor, resource) {
          var model = editor.getModel();
          if (model && model.uri.toString() !== resource.toString()) {
              return null;
          }
          return model;
      };
      return SimpleEditorModelResolverService;
  }());
  exports.SimpleEditorModelResolverService = SimpleEditorModelResolverService;
  var SimpleProgressService = /** @class */ (function () {
      function SimpleProgressService() {
      }
      SimpleProgressService.prototype.showWhile = function (promise, delay) {
          return Promise.resolve(undefined);
      };
      return SimpleProgressService;
  }());
  exports.SimpleProgressService = SimpleProgressService;
  var SimpleDialogService = /** @class */ (function () {
      function SimpleDialogService() {
      }
      return SimpleDialogService;
  }());
  exports.SimpleDialogService = SimpleDialogService;
  var SimpleNotificationService = /** @class */ (function () {
      function SimpleNotificationService() {
      }
      SimpleNotificationService.prototype.info = function (message) {
          return this.notify({ severity: severity_js_1.default.Info, message: message });
      };
      SimpleNotificationService.prototype.warn = function (message) {
          return this.notify({ severity: severity_js_1.default.Warning, message: message });
      };
      SimpleNotificationService.prototype.error = function (error) {
          return this.notify({ severity: severity_js_1.default.Error, message: error });
      };
      SimpleNotificationService.prototype.notify = function (notification) {
          switch (notification.severity) {
              case severity_js_1.default.Error:
                  console.error(notification.message);
                  break;
              case severity_js_1.default.Warning:
                  console.warn(notification.message);
                  break;
              default:
                  console.log(notification.message);
                  break;
          }
          return SimpleNotificationService.NO_OP;
      };
      SimpleNotificationService.NO_OP = new notification_js_1.NoOpNotification();
      return SimpleNotificationService;
  }());
  exports.SimpleNotificationService = SimpleNotificationService;
  var StandaloneCommandService = /** @class */ (function () {
      function StandaloneCommandService(instantiationService) {
          this._onWillExecuteCommand = new event_js_1.Emitter();
          this._instantiationService = instantiationService;
          this._dynamicCommands = Object.create(null);
      }
      StandaloneCommandService.prototype.addCommand = function (command) {
          var _this = this;
          var id = command.id;
          this._dynamicCommands[id] = command;
          return lifecycle_js_1.toDisposable(function () {
              delete _this._dynamicCommands[id];
          });
      };
      StandaloneCommandService.prototype.executeCommand = function (id) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments[_i];
          }
          var command = (commands_js_1.CommandsRegistry.getCommand(id) || this._dynamicCommands[id]);
          if (!command) {
              return Promise.reject(new Error("command '" + id + "' not found"));
          }
          try {
              this._onWillExecuteCommand.fire({ commandId: id });
              var result = this._instantiationService.invokeFunction.apply(this._instantiationService, [command.handler].concat(args));
              return Promise.resolve(result);
          }
          catch (err) {
              return Promise.reject(err);
          }
      };
      return StandaloneCommandService;
  }());
  exports.StandaloneCommandService = StandaloneCommandService;
  var StandaloneKeybindingService = /** @class */ (function (_super) {
      __extends(StandaloneKeybindingService, _super);
      function StandaloneKeybindingService(contextKeyService, commandService, telemetryService, notificationService, domNode) {
          var _this = _super.call(this, contextKeyService, commandService, telemetryService, notificationService) || this;
          _this._cachedResolver = null;
          _this._dynamicKeybindings = [];
          _this._register(dom.addDisposableListener(domNode, dom.EventType.KEY_DOWN, function (e) {
              var keyEvent = new keyboardEvent_js_1.StandardKeyboardEvent(e);
              var shouldPreventDefault = _this._dispatch(keyEvent, keyEvent.target);
              if (shouldPreventDefault) {
                  keyEvent.preventDefault();
              }
          }));
          return _this;
      }
      StandaloneKeybindingService.prototype.addDynamicKeybinding = function (commandId, _keybinding, handler, when) {
          var _this = this;
          var keybinding = keyCodes_js_1.createKeybinding(_keybinding, platform_js_1.OS);
          if (!keybinding) {
              throw new Error("Invalid keybinding");
          }
          var toDispose = [];
          this._dynamicKeybindings.push({
              keybinding: keybinding,
              command: commandId,
              when: when,
              weight1: 1000,
              weight2: 0
          });
          toDispose.push(lifecycle_js_1.toDisposable(function () {
              for (var i = 0; i < _this._dynamicKeybindings.length; i++) {
                  var kb = _this._dynamicKeybindings[i];
                  if (kb.command === commandId) {
                      _this._dynamicKeybindings.splice(i, 1);
                      _this.updateResolver({ source: 1 /* Default */ });
                      return;
                  }
              }
          }));
          var commandService = this._commandService;
          if (commandService instanceof StandaloneCommandService) {
              toDispose.push(commandService.addCommand({
                  id: commandId,
                  handler: handler
              }));
          }
          else {
              throw new Error('Unknown command service!');
          }
          this.updateResolver({ source: 1 /* Default */ });
          return lifecycle_js_1.combinedDisposable(toDispose);
      };
      StandaloneKeybindingService.prototype.updateResolver = function (event) {
          this._cachedResolver = null;
          this._onDidUpdateKeybindings.fire(event);
      };
      StandaloneKeybindingService.prototype._getResolver = function () {
          if (!this._cachedResolver) {
              var defaults = this._toNormalizedKeybindingItems(keybindingsRegistry_js_1.KeybindingsRegistry.getDefaultKeybindings(), true);
              var overrides = this._toNormalizedKeybindingItems(this._dynamicKeybindings, false);
              this._cachedResolver = new keybindingResolver_js_1.KeybindingResolver(defaults, overrides);
          }
          return this._cachedResolver;
      };
      StandaloneKeybindingService.prototype._documentHasFocus = function () {
          return document.hasFocus();
      };
      StandaloneKeybindingService.prototype._toNormalizedKeybindingItems = function (items, isDefault) {
          var result = [], resultLen = 0;
          for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
              var item = items_1[_i];
              var when = (item.when ? item.when.normalize() : undefined);
              var keybinding = item.keybinding;
              if (!keybinding) {
                  // This might be a removal keybinding item in user settings => accept it
                  result[resultLen++] = new resolvedKeybindingItem_js_1.ResolvedKeybindingItem(null, item.command, item.commandArgs, when, isDefault);
              }
              else {
                  var resolvedKeybindings = this.resolveKeybinding(keybinding);
                  for (var _a = 0, resolvedKeybindings_1 = resolvedKeybindings; _a < resolvedKeybindings_1.length; _a++) {
                      var resolvedKeybinding = resolvedKeybindings_1[_a];
                      result[resultLen++] = new resolvedKeybindingItem_js_1.ResolvedKeybindingItem(resolvedKeybinding, item.command, item.commandArgs, when, isDefault);
                  }
              }
          }
          return result;
      };
      StandaloneKeybindingService.prototype.resolveKeybinding = function (keybinding) {
          return [new usLayoutResolvedKeybinding_js_1.USLayoutResolvedKeybinding(keybinding, platform_js_1.OS)];
      };
      StandaloneKeybindingService.prototype.resolveKeyboardEvent = function (keyboardEvent) {
          var keybinding = new keyCodes_js_1.SimpleKeybinding(keyboardEvent.ctrlKey, keyboardEvent.shiftKey, keyboardEvent.altKey, keyboardEvent.metaKey, keyboardEvent.keyCode).toChord();
          return new usLayoutResolvedKeybinding_js_1.USLayoutResolvedKeybinding(keybinding, platform_js_1.OS);
      };
      return StandaloneKeybindingService;
  }(abstractKeybindingService_js_1.AbstractKeybindingService));
  exports.StandaloneKeybindingService = StandaloneKeybindingService;
  function isConfigurationOverrides(thing) {
      return thing
          && typeof thing === 'object'
          && (!thing.overrideIdentifier || typeof thing.overrideIdentifier === 'string')
          && (!thing.resource || thing.resource instanceof uri_js_1.URI);
  }
  var SimpleConfigurationService = /** @class */ (function () {
      function SimpleConfigurationService() {
          this._onDidChangeConfiguration = new event_js_1.Emitter();
          this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;
          this._configuration = new configurationModels_js_1.Configuration(new configurationModels_js_1.DefaultConfigurationModel(), new configurationModels_js_1.ConfigurationModel());
      }
      SimpleConfigurationService.prototype.configuration = function () {
          return this._configuration;
      };
      SimpleConfigurationService.prototype.getValue = function (arg1, arg2) {
          var section = typeof arg1 === 'string' ? arg1 : undefined;
          var overrides = isConfigurationOverrides(arg1) ? arg1 : isConfigurationOverrides(arg2) ? arg2 : {};
          return this.configuration().getValue(section, overrides, undefined);
      };
      SimpleConfigurationService.prototype.updateValue = function (key, value, arg3, arg4) {
          this.configuration().updateValue(key, value);
          return Promise.resolve();
      };
      SimpleConfigurationService.prototype.inspect = function (key, options) {
          if (options === void 0) {
              options = {};
          }
          return this.configuration().inspect(key, options, undefined);
      };
      return SimpleConfigurationService;
  }());
  exports.SimpleConfigurationService = SimpleConfigurationService;
  var SimpleResourceConfigurationService = /** @class */ (function () {
      function SimpleResourceConfigurationService(configurationService) {
          var _this = this;
          this.configurationService = configurationService;
          this._onDidChangeConfigurationEmitter = new event_js_1.Emitter();
          this.configurationService.onDidChangeConfiguration(function (e) {
              _this._onDidChangeConfigurationEmitter.fire(e);
          });
      }
      SimpleResourceConfigurationService.prototype.getValue = function (resource, arg2, arg3) {
          var position = position_js_1.Position.isIPosition(arg2) ? arg2 : null;
          var section = position ? (typeof arg3 === 'string' ? arg3 : undefined) : (typeof arg2 === 'string' ? arg2 : undefined);
          if (typeof section === 'undefined') {
              return this.configurationService.getValue();
          }
          return this.configurationService.getValue(section);
      };
      return SimpleResourceConfigurationService;
  }());
  exports.SimpleResourceConfigurationService = SimpleResourceConfigurationService;
  var SimpleResourcePropertiesService = /** @class */ (function () {
      function SimpleResourcePropertiesService(configurationService) {
          this.configurationService = configurationService;
      }
      SimpleResourcePropertiesService.prototype.getEOL = function (resource) {
          var filesConfiguration = this.configurationService.getValue('files');
          if (filesConfiguration && filesConfiguration.eol) {
              if (filesConfiguration.eol !== 'auto') {
                  return filesConfiguration.eol;
              }
          }
          return (platform_js_1.isLinux || platform_js_1.isMacintosh) ? '\n' : '\r\n';
      };
      SimpleResourcePropertiesService = __decorate([
          __param(0, configuration_js_1.IConfigurationService)
      ], SimpleResourcePropertiesService);
      return SimpleResourcePropertiesService;
  }());
  exports.SimpleResourcePropertiesService = SimpleResourcePropertiesService;
  var StandaloneTelemetryService = /** @class */ (function () {
      function StandaloneTelemetryService() {
      }
      StandaloneTelemetryService.prototype.publicLog = function (eventName, data) {
          return Promise.resolve(undefined);
      };
      return StandaloneTelemetryService;
  }());
  exports.StandaloneTelemetryService = StandaloneTelemetryService;
  var SimpleWorkspaceContextService = /** @class */ (function () {
      function SimpleWorkspaceContextService() {
          var resource = uri_js_1.URI.from({ scheme: SimpleWorkspaceContextService.SCHEME, authority: 'model', path: '/' });
          this.workspace = { id: '4064f6ec-cb38-4ad0-af64-ee6467e63c82', folders: [new workspace_js_1.WorkspaceFolder({ uri: resource, name: '', index: 0 })] };
      }
      SimpleWorkspaceContextService.prototype.getWorkspace = function () {
          return this.workspace;
      };
      SimpleWorkspaceContextService.prototype.getWorkspaceFolder = function (resource) {
          return resource && resource.scheme === SimpleWorkspaceContextService.SCHEME ? this.workspace.folders[0] : null;
      };
      SimpleWorkspaceContextService.SCHEME = 'inmemory';
      return SimpleWorkspaceContextService;
  }());
  exports.SimpleWorkspaceContextService = SimpleWorkspaceContextService;
  function applyConfigurationValues(configurationService, source, isDiffEditor) {
      if (!source) {
          return;
      }
      if (!(configurationService instanceof SimpleConfigurationService)) {
          return;
      }
      Object.keys(source).forEach(function (key) {
          if (commonEditorConfig_js_1.isEditorConfigurationKey(key)) {
              configurationService.updateValue("editor." + key, source[key]);
          }
          if (isDiffEditor && commonEditorConfig_js_1.isDiffEditorConfigurationKey(key)) {
              configurationService.updateValue("diffEditor." + key, source[key]);
          }
      });
  }
  exports.applyConfigurationValues = applyConfigurationValues;
  var SimpleBulkEditService = /** @class */ (function () {
      function SimpleBulkEditService(_modelService) {
          this._modelService = _modelService;
          //
      }
      SimpleBulkEditService.prototype.apply = function (workspaceEdit, options) {
          var edits = new Map();
          if (workspaceEdit.edits) {
              for (var _i = 0, _a = workspaceEdit.edits; _i < _a.length; _i++) {
                  var edit = _a[_i];
                  if (!modes_js_1.isResourceTextEdit(edit)) {
                      return Promise.reject(new Error('bad edit - only text edits are supported'));
                  }
                  var model = this._modelService.getModel(edit.resource);
                  if (!model) {
                      return Promise.reject(new Error('bad edit - model not found'));
                  }
                  var array = edits.get(model);
                  if (!array) {
                      array = [];
                  }
                  edits.set(model, array.concat(edit.edits));
              }
          }
          var totalEdits = 0;
          var totalFiles = 0;
          edits.forEach(function (edits, model) {
              model.applyEdits(edits.map(function (edit) { return editOperation_js_1.EditOperation.replaceMove(range_js_1.Range.lift(edit.range), edit.text); }));
              totalFiles += 1;
              totalEdits += edits.length;
          });
          return Promise.resolve({
              selection: undefined,
              ariaSummary: strings.format(standaloneStrings_js_1.SimpleServicesNLS.bulkEditServiceSummary, totalEdits, totalFiles)
          });
      };
      return SimpleBulkEditService;
  }());
  exports.SimpleBulkEditService = SimpleBulkEditService;
  var SimpleUriLabelService = /** @class */ (function () {
      function SimpleUriLabelService() {
      }
      SimpleUriLabelService.prototype.getUriLabel = function (resource, options) {
          if (resource.scheme === 'file') {
              return resource.fsPath;
          }
          return resource.path;
      };
      return SimpleUriLabelService;
  }());
  exports.SimpleUriLabelService = SimpleUriLabelService;
  var SimpleLayoutService = /** @class */ (function () {
      function SimpleLayoutService(_container) {
          this._container = _container;
          this.onLayout = event_js_1.Event.None;
      }
      Object.defineProperty(SimpleLayoutService.prototype, "container", {
          get: function () {
              return this._container;
          },
          enumerable: true,
          configurable: true
      });
      return SimpleLayoutService;
  }());
  exports.SimpleLayoutService = SimpleLayoutService;
  

});
