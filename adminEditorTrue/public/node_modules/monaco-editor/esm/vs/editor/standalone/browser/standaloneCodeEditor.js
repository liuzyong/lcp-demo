define('node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneCodeEditor', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.StandaloneDiffEditor = exports.StandaloneEditor = exports.StandaloneCodeEditor = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b)
                  if (b.hasOwnProperty(p))
                      d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
      else
          for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                  r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = (this && this.__param) || function (paramIndex, decorator) {
      return function (target, key) { decorator(target, key, paramIndex); };
  };
  var browser = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/base/browser/browser"));
  var aria = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria"));
  var lifecycle_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/lifecycle");
  var codeEditorService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService");
  var codeEditorWidget_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/widget/codeEditorWidget");
  var diffEditorWidget_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditorWidget");
  var editorAction_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/editorAction");
  var editorWorkerService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/services/editorWorkerService");
  var simpleServices_js_1 = require("node_modules/monaco-editor/esm/vs/editor/standalone/browser/simpleServices");
  var standaloneThemeService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/standalone/common/standaloneThemeService");
  var actions_js_1 = require("node_modules/monaco-editor/esm/vs/platform/actions/common/actions");
  var commands_js_1 = require("node_modules/monaco-editor/esm/vs/platform/commands/common/commands");
  var configuration_js_1 = require("node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration");
  var contextkey_js_1 = require("node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey");
  var contextView_js_1 = require("node_modules/monaco-editor/esm/vs/platform/contextview/browser/contextView");
  var instantiation_js_1 = require("node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation");
  var keybinding_js_1 = require("node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding");
  var notification_js_1 = require("node_modules/monaco-editor/esm/vs/platform/notification/common/notification");
  var themeService_js_1 = require("node_modules/monaco-editor/esm/vs/platform/theme/common/themeService");
  var accessibility_js_1 = require("node_modules/monaco-editor/esm/vs/platform/accessibility/common/accessibility");
  var standaloneStrings_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/standaloneStrings");
  var LAST_GENERATED_COMMAND_ID = 0;
  var ariaDomNodeCreated = false;
  function createAriaDomNode() {
      if (ariaDomNodeCreated) {
          return;
      }
      ariaDomNodeCreated = true;
      aria.setARIAContainer(document.body);
  }
  /**
   * A code editor to be used both by the standalone editor and the standalone diff editor.
   */
  var StandaloneCodeEditor = /** @class */ (function (_super) {
      __extends(StandaloneCodeEditor, _super);
      function StandaloneCodeEditor(domElement, options, instantiationService, codeEditorService, commandService, contextKeyService, keybindingService, themeService, notificationService, accessibilityService) {
          var _this = this;
          options = options || {};
          options.ariaLabel = options.ariaLabel || standaloneStrings_js_1.StandaloneCodeEditorNLS.editorViewAccessibleLabel;
          options.ariaLabel = options.ariaLabel + ';' + (browser.isIE
              ? standaloneStrings_js_1.StandaloneCodeEditorNLS.accessibilityHelpMessageIE
              : standaloneStrings_js_1.StandaloneCodeEditorNLS.accessibilityHelpMessage);
          _this = _super.call(this, domElement, options, {}, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService) || this;
          if (keybindingService instanceof simpleServices_js_1.StandaloneKeybindingService) {
              _this._standaloneKeybindingService = keybindingService;
          }
          // Create the ARIA dom node as soon as the first editor is instantiated
          createAriaDomNode();
          return _this;
      }
      StandaloneCodeEditor.prototype.addCommand = function (keybinding, handler, context) {
          if (!this._standaloneKeybindingService) {
              console.warn('Cannot add command because the editor is configured with an unrecognized KeybindingService');
              return null;
          }
          var commandId = 'DYNAMIC_' + (++LAST_GENERATED_COMMAND_ID);
          var whenExpression = contextkey_js_1.ContextKeyExpr.deserialize(context);
          this._standaloneKeybindingService.addDynamicKeybinding(commandId, keybinding, handler, whenExpression);
          return commandId;
      };
      StandaloneCodeEditor.prototype.createContextKey = function (key, defaultValue) {
          return this._contextKeyService.createKey(key, defaultValue);
      };
      StandaloneCodeEditor.prototype.addAction = function (_descriptor) {
          var _this = this;
          if ((typeof _descriptor.id !== 'string') || (typeof _descriptor.label !== 'string') || (typeof _descriptor.run !== 'function')) {
              throw new Error('Invalid action descriptor, `id`, `label` and `run` are required properties!');
          }
          if (!this._standaloneKeybindingService) {
              console.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');
              return lifecycle_js_1.Disposable.None;
          }
          // Read descriptor options
          var id = _descriptor.id;
          var label = _descriptor.label;
          var precondition = contextkey_js_1.ContextKeyExpr.and(contextkey_js_1.ContextKeyExpr.equals('editorId', this.getId()), contextkey_js_1.ContextKeyExpr.deserialize(_descriptor.precondition));
          var keybindings = _descriptor.keybindings;
          var keybindingsWhen = contextkey_js_1.ContextKeyExpr.and(precondition, contextkey_js_1.ContextKeyExpr.deserialize(_descriptor.keybindingContext));
          var contextMenuGroupId = _descriptor.contextMenuGroupId || null;
          var contextMenuOrder = _descriptor.contextMenuOrder || 0;
          var run = function () {
              return Promise.resolve(_descriptor.run(_this));
          };
          var toDispose = [];
          // Generate a unique id to allow the same descriptor.id across multiple editor instances
          var uniqueId = this.getId() + ':' + id;
          // Register the command
          toDispose.push(commands_js_1.CommandsRegistry.registerCommand(uniqueId, run));
          // Register the context menu item
          if (contextMenuGroupId) {
              var menuItem = {
                  command: {
                      id: uniqueId,
                      title: label
                  },
                  when: precondition,
                  group: contextMenuGroupId,
                  order: contextMenuOrder
              };
              toDispose.push(actions_js_1.MenuRegistry.appendMenuItem(7 /* EditorContext */, menuItem));
          }
          // Register the keybindings
          if (Array.isArray(keybindings)) {
              toDispose = toDispose.concat(keybindings.map(function (kb) {
                  return _this._standaloneKeybindingService.addDynamicKeybinding(uniqueId, kb, run, keybindingsWhen);
              }));
          }
          // Finally, register an internal editor action
          var internalAction = new editorAction_js_1.InternalEditorAction(uniqueId, label, label, precondition, run, this._contextKeyService);
          // Store it under the original id, such that trigger with the original id will work
          this._actions[id] = internalAction;
          toDispose.push(lifecycle_js_1.toDisposable(function () {
              delete _this._actions[id];
          }));
          return lifecycle_js_1.combinedDisposable(toDispose);
      };
      StandaloneCodeEditor = __decorate([
          __param(2, instantiation_js_1.IInstantiationService),
          __param(3, codeEditorService_js_1.ICodeEditorService),
          __param(4, commands_js_1.ICommandService),
          __param(5, contextkey_js_1.IContextKeyService),
          __param(6, keybinding_js_1.IKeybindingService),
          __param(7, themeService_js_1.IThemeService),
          __param(8, notification_js_1.INotificationService),
          __param(9, accessibility_js_1.IAccessibilityService)
      ], StandaloneCodeEditor);
      return StandaloneCodeEditor;
  }(codeEditorWidget_js_1.CodeEditorWidget));
  exports.StandaloneCodeEditor = StandaloneCodeEditor;
  var StandaloneEditor = /** @class */ (function (_super) {
      __extends(StandaloneEditor, _super);
      function StandaloneEditor(domElement, options, toDispose, instantiationService, codeEditorService, commandService, contextKeyService, keybindingService, contextViewService, themeService, notificationService, configurationService, accessibilityService) {
          var _this = this;
          simpleServices_js_1.applyConfigurationValues(configurationService, options, false);
          options = options || {};
          if (typeof options.theme === 'string') {
              themeService.setTheme(options.theme);
          }
          var _model = options.model;
          delete options.model;
          _this = _super.call(this, domElement, options, instantiationService, codeEditorService, commandService, contextKeyService, keybindingService, themeService, notificationService, accessibilityService) || this;
          _this._contextViewService = contextViewService;
          _this._configurationService = configurationService;
          _this._register(toDispose);
          var model;
          if (typeof _model === 'undefined') {
              model = self.monaco.editor.createModel(options.value || '', options.language || 'text/plain');
              _this._ownsModel = true;
          }
          else {
              model = _model;
              _this._ownsModel = false;
          }
          _this._attachModel(model);
          if (model) {
              var e = {
                  oldModelUrl: null,
                  newModelUrl: model.uri
              };
              _this._onDidChangeModel.fire(e);
          }
          return _this;
      }
      StandaloneEditor.prototype.dispose = function () {
          _super.prototype.dispose.call(this);
      };
      StandaloneEditor.prototype.updateOptions = function (newOptions) {
          simpleServices_js_1.applyConfigurationValues(this._configurationService, newOptions, false);
          _super.prototype.updateOptions.call(this, newOptions);
      };
      StandaloneEditor.prototype._attachModel = function (model) {
          _super.prototype._attachModel.call(this, model);
          if (this._modelData) {
              this._contextViewService.setContainer(this._modelData.view.domNode.domNode);
          }
      };
      StandaloneEditor.prototype._postDetachModelCleanup = function (detachedModel) {
          _super.prototype._postDetachModelCleanup.call(this, detachedModel);
          if (detachedModel && this._ownsModel) {
              detachedModel.dispose();
              this._ownsModel = false;
          }
      };
      StandaloneEditor = __decorate([
          __param(3, instantiation_js_1.IInstantiationService),
          __param(4, codeEditorService_js_1.ICodeEditorService),
          __param(5, commands_js_1.ICommandService),
          __param(6, contextkey_js_1.IContextKeyService),
          __param(7, keybinding_js_1.IKeybindingService),
          __param(8, contextView_js_1.IContextViewService),
          __param(9, standaloneThemeService_js_1.IStandaloneThemeService),
          __param(10, notification_js_1.INotificationService),
          __param(11, configuration_js_1.IConfigurationService),
          __param(12, accessibility_js_1.IAccessibilityService)
      ], StandaloneEditor);
      return StandaloneEditor;
  }(StandaloneCodeEditor));
  exports.StandaloneEditor = StandaloneEditor;
  var StandaloneDiffEditor = /** @class */ (function (_super) {
      __extends(StandaloneDiffEditor, _super);
      function StandaloneDiffEditor(domElement, options, toDispose, instantiationService, contextKeyService, keybindingService, contextViewService, editorWorkerService, codeEditorService, themeService, notificationService, configurationService) {
          var _this = this;
          simpleServices_js_1.applyConfigurationValues(configurationService, options, true);
          options = options || {};
          if (typeof options.theme === 'string') {
              options.theme = themeService.setTheme(options.theme);
          }
          _this = _super.call(this, domElement, options, editorWorkerService, contextKeyService, instantiationService, codeEditorService, themeService, notificationService) || this;
          _this._contextViewService = contextViewService;
          _this._configurationService = configurationService;
          _this._register(toDispose);
          _this._contextViewService.setContainer(_this._containerDomElement);
          return _this;
      }
      StandaloneDiffEditor.prototype.dispose = function () {
          _super.prototype.dispose.call(this);
      };
      StandaloneDiffEditor.prototype.updateOptions = function (newOptions) {
          simpleServices_js_1.applyConfigurationValues(this._configurationService, newOptions, true);
          _super.prototype.updateOptions.call(this, newOptions);
      };
      StandaloneDiffEditor.prototype._createInnerEditor = function (instantiationService, container, options) {
          return instantiationService.createInstance(StandaloneCodeEditor, container, options);
      };
      StandaloneDiffEditor.prototype.getOriginalEditor = function () {
          return _super.prototype.getOriginalEditor.call(this);
      };
      StandaloneDiffEditor.prototype.getModifiedEditor = function () {
          return _super.prototype.getModifiedEditor.call(this);
      };
      StandaloneDiffEditor.prototype.addCommand = function (keybinding, handler, context) {
          return this.getModifiedEditor().addCommand(keybinding, handler, context);
      };
      StandaloneDiffEditor.prototype.createContextKey = function (key, defaultValue) {
          return this.getModifiedEditor().createContextKey(key, defaultValue);
      };
      StandaloneDiffEditor.prototype.addAction = function (descriptor) {
          return this.getModifiedEditor().addAction(descriptor);
      };
      StandaloneDiffEditor = __decorate([
          __param(3, instantiation_js_1.IInstantiationService),
          __param(4, contextkey_js_1.IContextKeyService),
          __param(5, keybinding_js_1.IKeybindingService),
          __param(6, contextView_js_1.IContextViewService),
          __param(7, editorWorkerService_js_1.IEditorWorkerService),
          __param(8, codeEditorService_js_1.ICodeEditorService),
          __param(9, standaloneThemeService_js_1.IStandaloneThemeService),
          __param(10, notification_js_1.INotificationService),
          __param(11, configuration_js_1.IConfigurationService)
      ], StandaloneDiffEditor);
      return StandaloneDiffEditor;
  }(diffEditorWidget_js_1.DiffEditorWidget));
  exports.StandaloneDiffEditor = StandaloneDiffEditor;
  

});
