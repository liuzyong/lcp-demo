define('node_modules/monaco-editor/esm/vs/editor/contrib/tokenization/tokenization', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b)
                  if (b.hasOwnProperty(p))
                      d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var nls = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/nls"));
  var editorExtensions_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions");
  var stopwatch_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/stopwatch");
  var ForceRetokenizeAction = /** @class */ (function (_super) {
      __extends(ForceRetokenizeAction, _super);
      function ForceRetokenizeAction() {
          return _super.call(this, {
              id: 'editor.action.forceRetokenize',
              label: nls.localize('forceRetokenize', "Developer: Force Retokenize"),
              alias: 'Developer: Force Retokenize',
              precondition: null
          }) || this;
      }
      ForceRetokenizeAction.prototype.run = function (accessor, editor) {
          if (!editor.hasModel()) {
              return;
          }
          var model = editor.getModel();
          model.flushTokens();
          var sw = new stopwatch_js_1.StopWatch(true);
          model.forceTokenization(model.getLineCount());
          sw.stop();
          console.log("tokenization took " + sw.elapsed());
      };
      return ForceRetokenizeAction;
  }(editorExtensions_js_1.EditorAction));
  editorExtensions_js_1.registerEditorAction(ForceRetokenizeAction);
  

});
