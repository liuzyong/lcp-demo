define('node_modules/monaco-editor/esm/vs/editor/contrib/wordPartOperations/wordPartOperations', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.CursorWordPartRightSelect = exports.CursorWordPartRight = exports.WordPartRightCommand = exports.CursorWordPartLeftSelect = exports.CursorWordPartLeft = exports.WordPartLeftCommand = exports.DeleteWordPartRight = exports.DeleteWordPartLeft = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b)
                  if (b.hasOwnProperty(p))
                      d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var editorExtensions_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions");
  var cursorWordOperations_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/controller/cursorWordOperations");
  var range_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/range");
  var editorContextKeys_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys");
  var wordOperations_js_1 = require("node_modules/monaco-editor/esm/vs/editor/contrib/wordOperations/wordOperations");
  var commands_js_1 = require("node_modules/monaco-editor/esm/vs/platform/commands/common/commands");
  var DeleteWordPartLeft = /** @class */ (function (_super) {
      __extends(DeleteWordPartLeft, _super);
      function DeleteWordPartLeft() {
          return _super.call(this, {
              whitespaceHeuristics: true,
              wordNavigationType: 0 /* WordStart */,
              id: 'deleteWordPartLeft',
              precondition: editorContextKeys_js_1.EditorContextKeys.writable,
              kbOpts: {
                  kbExpr: editorContextKeys_js_1.EditorContextKeys.textInputFocus,
                  primary: 0,
                  mac: { primary: 256 /* WinCtrl */ | 512 /* Alt */ | 1 /* Backspace */ },
                  weight: 100 /* EditorContrib */
              }
          }) || this;
      }
      DeleteWordPartLeft.prototype._delete = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {
          var r = cursorWordOperations_js_1.WordPartOperations.deleteWordPartLeft(wordSeparators, model, selection, whitespaceHeuristics);
          if (r) {
              return r;
          }
          return new range_js_1.Range(1, 1, 1, 1);
      };
      return DeleteWordPartLeft;
  }(wordOperations_js_1.DeleteWordCommand));
  exports.DeleteWordPartLeft = DeleteWordPartLeft;
  var DeleteWordPartRight = /** @class */ (function (_super) {
      __extends(DeleteWordPartRight, _super);
      function DeleteWordPartRight() {
          return _super.call(this, {
              whitespaceHeuristics: true,
              wordNavigationType: 2 /* WordEnd */,
              id: 'deleteWordPartRight',
              precondition: editorContextKeys_js_1.EditorContextKeys.writable,
              kbOpts: {
                  kbExpr: editorContextKeys_js_1.EditorContextKeys.textInputFocus,
                  primary: 0,
                  mac: { primary: 256 /* WinCtrl */ | 512 /* Alt */ | 20 /* Delete */ },
                  weight: 100 /* EditorContrib */
              }
          }) || this;
      }
      DeleteWordPartRight.prototype._delete = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {
          var r = cursorWordOperations_js_1.WordPartOperations.deleteWordPartRight(wordSeparators, model, selection, whitespaceHeuristics);
          if (r) {
              return r;
          }
          var lineCount = model.getLineCount();
          var maxColumn = model.getLineMaxColumn(lineCount);
          return new range_js_1.Range(lineCount, maxColumn, lineCount, maxColumn);
      };
      return DeleteWordPartRight;
  }(wordOperations_js_1.DeleteWordCommand));
  exports.DeleteWordPartRight = DeleteWordPartRight;
  var WordPartLeftCommand = /** @class */ (function (_super) {
      __extends(WordPartLeftCommand, _super);
      function WordPartLeftCommand() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      WordPartLeftCommand.prototype._move = function (wordSeparators, model, position, wordNavigationType) {
          return cursorWordOperations_js_1.WordPartOperations.moveWordPartLeft(wordSeparators, model, position);
      };
      return WordPartLeftCommand;
  }(wordOperations_js_1.MoveWordCommand));
  exports.WordPartLeftCommand = WordPartLeftCommand;
  var CursorWordPartLeft = /** @class */ (function (_super) {
      __extends(CursorWordPartLeft, _super);
      function CursorWordPartLeft() {
          return _super.call(this, {
              inSelectionMode: false,
              wordNavigationType: 0 /* WordStart */,
              id: 'cursorWordPartLeft',
              precondition: null,
              kbOpts: {
                  kbExpr: editorContextKeys_js_1.EditorContextKeys.textInputFocus,
                  primary: 0,
                  mac: { primary: 256 /* WinCtrl */ | 512 /* Alt */ | 15 /* LeftArrow */ },
                  weight: 100 /* EditorContrib */
              }
          }) || this;
      }
      return CursorWordPartLeft;
  }(WordPartLeftCommand));
  exports.CursorWordPartLeft = CursorWordPartLeft;
  // Register previous id for compatibility purposes
  commands_js_1.CommandsRegistry.registerCommandAlias('cursorWordPartStartLeft', 'cursorWordPartLeft');
  var CursorWordPartLeftSelect = /** @class */ (function (_super) {
      __extends(CursorWordPartLeftSelect, _super);
      function CursorWordPartLeftSelect() {
          return _super.call(this, {
              inSelectionMode: true,
              wordNavigationType: 0 /* WordStart */,
              id: 'cursorWordPartLeftSelect',
              precondition: null,
              kbOpts: {
                  kbExpr: editorContextKeys_js_1.EditorContextKeys.textInputFocus,
                  primary: 0,
                  mac: { primary: 256 /* WinCtrl */ | 512 /* Alt */ | 1024 /* Shift */ | 15 /* LeftArrow */ },
                  weight: 100 /* EditorContrib */
              }
          }) || this;
      }
      return CursorWordPartLeftSelect;
  }(WordPartLeftCommand));
  exports.CursorWordPartLeftSelect = CursorWordPartLeftSelect;
  // Register previous id for compatibility purposes
  commands_js_1.CommandsRegistry.registerCommandAlias('cursorWordPartStartLeftSelect', 'cursorWordPartLeftSelect');
  var WordPartRightCommand = /** @class */ (function (_super) {
      __extends(WordPartRightCommand, _super);
      function WordPartRightCommand() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      WordPartRightCommand.prototype._move = function (wordSeparators, model, position, wordNavigationType) {
          return cursorWordOperations_js_1.WordPartOperations.moveWordPartRight(wordSeparators, model, position);
      };
      return WordPartRightCommand;
  }(wordOperations_js_1.MoveWordCommand));
  exports.WordPartRightCommand = WordPartRightCommand;
  var CursorWordPartRight = /** @class */ (function (_super) {
      __extends(CursorWordPartRight, _super);
      function CursorWordPartRight() {
          return _super.call(this, {
              inSelectionMode: false,
              wordNavigationType: 2 /* WordEnd */,
              id: 'cursorWordPartRight',
              precondition: null,
              kbOpts: {
                  kbExpr: editorContextKeys_js_1.EditorContextKeys.textInputFocus,
                  primary: 0,
                  mac: { primary: 256 /* WinCtrl */ | 512 /* Alt */ | 17 /* RightArrow */ },
                  weight: 100 /* EditorContrib */
              }
          }) || this;
      }
      return CursorWordPartRight;
  }(WordPartRightCommand));
  exports.CursorWordPartRight = CursorWordPartRight;
  var CursorWordPartRightSelect = /** @class */ (function (_super) {
      __extends(CursorWordPartRightSelect, _super);
      function CursorWordPartRightSelect() {
          return _super.call(this, {
              inSelectionMode: true,
              wordNavigationType: 2 /* WordEnd */,
              id: 'cursorWordPartRightSelect',
              precondition: null,
              kbOpts: {
                  kbExpr: editorContextKeys_js_1.EditorContextKeys.textInputFocus,
                  primary: 0,
                  mac: { primary: 256 /* WinCtrl */ | 512 /* Alt */ | 1024 /* Shift */ | 17 /* RightArrow */ },
                  weight: 100 /* EditorContrib */
              }
          }) || this;
      }
      return CursorWordPartRightSelect;
  }(WordPartRightCommand));
  exports.CursorWordPartRightSelect = CursorWordPartRightSelect;
  editorExtensions_js_1.registerEditorCommand(new DeleteWordPartLeft());
  editorExtensions_js_1.registerEditorCommand(new DeleteWordPartRight());
  editorExtensions_js_1.registerEditorCommand(new CursorWordPartLeft());
  editorExtensions_js_1.registerEditorCommand(new CursorWordPartLeftSelect());
  editorExtensions_js_1.registerEditorCommand(new CursorWordPartRight());
  editorExtensions_js_1.registerEditorCommand(new CursorWordPartRightSelect());
  

});
