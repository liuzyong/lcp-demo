define('node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/provideSignatureHelp', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.provideSignatureHelp = exports.Context = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var async_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/async");
  var errors_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/errors");
  var editorExtensions_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions");
  var modes = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/editor/common/modes"));
  var contextkey_js_1 = require("node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey");
  var cancellation_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/cancellation");
  exports.Context = {
      Visible: new contextkey_js_1.RawContextKey('parameterHintsVisible', false),
      MultipleSignatures: new contextkey_js_1.RawContextKey('parameterHintsMultipleSignatures', false),
  };
  function provideSignatureHelp(model, position, context, token) {
      var supports = modes.SignatureHelpProviderRegistry.ordered(model);
      return async_js_1.first(supports.map(function (support) {
          return function () {
              return Promise.resolve(support.provideSignatureHelp(model, position, token, context)).catch(errors_js_1.onUnexpectedExternalError);
          };
      }));
  }
  exports.provideSignatureHelp = provideSignatureHelp;
  editorExtensions_js_1.registerDefaultLanguageCommand('_executeSignatureHelpProvider', function (model, position, args) {
      return provideSignatureHelp(model, position, {
          triggerKind: modes.SignatureHelpTriggerKind.Invoke,
          isRetrigger: false,
          triggerCharacter: args['triggerCharacter']
      }, cancellation_js_1.CancellationToken.None);
  });
  

});
