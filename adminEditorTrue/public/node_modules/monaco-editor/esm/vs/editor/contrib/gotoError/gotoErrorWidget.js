define('node_modules/monaco-editor/esm/vs/editor/contrib/gotoError/gotoErrorWidget', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.editorMarkerNavigationBackground = exports.editorMarkerNavigationInfo = exports.editorMarkerNavigationWarning = exports.editorMarkerNavigationError = exports.MarkerNavigationWidget = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b)
                  if (b.hasOwnProperty(p))
                      d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  ''/*@require node_modules/monaco-editor/esm/vs/editor/contrib/gotoError/media/gotoErrorWidget.css*/;
  var nls = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/nls"));
  var dom = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/base/browser/dom"));
  var lifecycle_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/lifecycle");
  var markers_js_1 = require("node_modules/monaco-editor/esm/vs/platform/markers/common/markers");
  var range_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/range");
  var colorRegistry_js_1 = require("node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry");
  var themeService_js_1 = require("node_modules/monaco-editor/esm/vs/platform/theme/common/themeService");
  var color_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/color");
  var editorColorRegistry_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/view/editorColorRegistry");
  var scrollableElement_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/ui/scrollbar/scrollableElement");
  var labels_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/labels");
  var arrays_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/arrays");
  var event_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/event");
  var peekViewWidget_js_1 = require("node_modules/monaco-editor/esm/vs/editor/contrib/referenceSearch/peekViewWidget");
  var resources_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/resources");
  var referencesWidget_js_1 = require("node_modules/monaco-editor/esm/vs/editor/contrib/referenceSearch/referencesWidget");
  var MessageWidget = /** @class */ (function () {
      function MessageWidget(parent, editor, onRelatedInformation) {
          var _this = this;
          this._lines = 0;
          this._longestLineLength = 0;
          this._relatedDiagnostics = new WeakMap();
          this._disposables = [];
          this._editor = editor;
          var domNode = document.createElement('div');
          domNode.className = 'descriptioncontainer';
          domNode.setAttribute('aria-live', 'assertive');
          domNode.setAttribute('role', 'alert');
          this._messageBlock = document.createElement('div');
          dom.addClass(this._messageBlock, 'message');
          domNode.appendChild(this._messageBlock);
          this._relatedBlock = document.createElement('div');
          domNode.appendChild(this._relatedBlock);
          this._disposables.push(dom.addStandardDisposableListener(this._relatedBlock, 'click', function (event) {
              event.preventDefault();
              var related = _this._relatedDiagnostics.get(event.target);
              if (related) {
                  onRelatedInformation(related);
              }
          }));
          this._scrollable = new scrollableElement_js_1.ScrollableElement(domNode, {
              horizontal: 1 /* Auto */,
              vertical: 1 /* Auto */,
              useShadows: false,
              horizontalScrollbarSize: 3,
              verticalScrollbarSize: 3
          });
          parent.appendChild(this._scrollable.getDomNode());
          this._disposables.push(this._scrollable.onScroll(function (e) {
              domNode.style.left = "-" + e.scrollLeft + "px";
              domNode.style.top = "-" + e.scrollTop + "px";
          }));
          this._disposables.push(this._scrollable);
      }
      MessageWidget.prototype.dispose = function () {
          lifecycle_js_1.dispose(this._disposables);
      };
      MessageWidget.prototype.update = function (_a) {
          var source = _a.source, message = _a.message, relatedInformation = _a.relatedInformation, code = _a.code;
          var lines = message.split(/\r\n|\r|\n/g);
          this._lines = lines.length;
          this._longestLineLength = 0;
          for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
              var line = lines_1[_i];
              this._longestLineLength = Math.max(line.length, this._longestLineLength);
          }
          dom.clearNode(this._messageBlock);
          this._editor.applyFontInfo(this._messageBlock);
          var lastLineElement = this._messageBlock;
          for (var _b = 0, lines_2 = lines; _b < lines_2.length; _b++) {
              var line = lines_2[_b];
              lastLineElement = document.createElement('div');
              lastLineElement.innerText = line;
              if (line === '') {
                  lastLineElement.style.height = this._messageBlock.style.lineHeight;
              }
              this._messageBlock.appendChild(lastLineElement);
          }
          if (source || code) {
              var detailsElement = document.createElement('span');
              dom.addClass(detailsElement, 'details');
              lastLineElement.appendChild(detailsElement);
              if (source) {
                  var sourceElement = document.createElement('span');
                  sourceElement.innerText = source;
                  dom.addClass(sourceElement, 'source');
                  detailsElement.appendChild(sourceElement);
              }
              if (code) {
                  var codeElement = document.createElement('span');
                  codeElement.innerText = "(" + code + ")";
                  dom.addClass(codeElement, 'code');
                  detailsElement.appendChild(codeElement);
              }
          }
          dom.clearNode(this._relatedBlock);
          this._editor.applyFontInfo(this._relatedBlock);
          if (arrays_js_1.isNonEmptyArray(relatedInformation)) {
              var relatedInformationNode = this._relatedBlock.appendChild(document.createElement('div'));
              relatedInformationNode.style.paddingTop = Math.floor(this._editor.getConfiguration().lineHeight * 0.66) + "px";
              this._lines += 1;
              for (var _c = 0, relatedInformation_1 = relatedInformation; _c < relatedInformation_1.length; _c++) {
                  var related = relatedInformation_1[_c];
                  var container = document.createElement('div');
                  var relatedResource = document.createElement('a');
                  dom.addClass(relatedResource, 'filename');
                  relatedResource.innerHTML = labels_js_1.getBaseLabel(related.resource) + "(" + related.startLineNumber + ", " + related.startColumn + "): ";
                  relatedResource.title = labels_js_1.getPathLabel(related.resource, undefined);
                  this._relatedDiagnostics.set(relatedResource, related);
                  var relatedMessage = document.createElement('span');
                  relatedMessage.innerText = related.message;
                  container.appendChild(relatedResource);
                  container.appendChild(relatedMessage);
                  this._lines += 1;
                  relatedInformationNode.appendChild(container);
              }
          }
          var fontInfo = this._editor.getConfiguration().fontInfo;
          var scrollWidth = Math.ceil(fontInfo.typicalFullwidthCharacterWidth * this._longestLineLength * 0.75);
          var scrollHeight = fontInfo.lineHeight * this._lines;
          this._scrollable.setScrollDimensions({ scrollWidth: scrollWidth, scrollHeight: scrollHeight });
      };
      MessageWidget.prototype.layout = function (height, width) {
          this._scrollable.getDomNode().style.height = height + "px";
          this._scrollable.getDomNode().style.width = width + "px";
          this._scrollable.setScrollDimensions({ width: width, height: height });
      };
      MessageWidget.prototype.getHeightInLines = function () {
          return Math.min(17, this._lines);
      };
      return MessageWidget;
  }());
  var MarkerNavigationWidget = /** @class */ (function (_super) {
      __extends(MarkerNavigationWidget, _super);
      function MarkerNavigationWidget(editor, actions, _themeService) {
          var _this = _super.call(this, editor, { showArrow: true, showFrame: true, isAccessible: true }) || this;
          _this.actions = actions;
          _this._themeService = _themeService;
          _this._callOnDispose = [];
          _this._onDidSelectRelatedInformation = new event_js_1.Emitter();
          _this.onDidSelectRelatedInformation = _this._onDidSelectRelatedInformation.event;
          _this._severity = markers_js_1.MarkerSeverity.Warning;
          _this._backgroundColor = color_js_1.Color.white;
          _this._applyTheme(_themeService.getTheme());
          _this._callOnDispose.push(_themeService.onThemeChange(_this._applyTheme.bind(_this)));
          _this.create();
          return _this;
      }
      MarkerNavigationWidget.prototype._applyTheme = function (theme) {
          this._backgroundColor = theme.getColor(exports.editorMarkerNavigationBackground);
          var colorId = exports.editorMarkerNavigationError;
          if (this._severity === markers_js_1.MarkerSeverity.Warning) {
              colorId = exports.editorMarkerNavigationWarning;
          }
          else if (this._severity === markers_js_1.MarkerSeverity.Info) {
              colorId = exports.editorMarkerNavigationInfo;
          }
          var frameColor = theme.getColor(colorId);
          this.style({
              arrowColor: frameColor,
              frameColor: frameColor,
              headerBackgroundColor: this._backgroundColor,
              primaryHeadingColor: theme.getColor(referencesWidget_js_1.peekViewTitleForeground),
              secondaryHeadingColor: theme.getColor(referencesWidget_js_1.peekViewTitleInfoForeground)
          }); // style() will trigger _applyStyles
      };
      MarkerNavigationWidget.prototype._applyStyles = function () {
          if (this._parentContainer) {
              this._parentContainer.style.backgroundColor = this._backgroundColor ? this._backgroundColor.toString() : '';
          }
          _super.prototype._applyStyles.call(this);
      };
      MarkerNavigationWidget.prototype.dispose = function () {
          this._callOnDispose = lifecycle_js_1.dispose(this._callOnDispose);
          _super.prototype.dispose.call(this);
      };
      MarkerNavigationWidget.prototype.focus = function () {
          this._parentContainer.focus();
      };
      MarkerNavigationWidget.prototype._fillHead = function (container) {
          _super.prototype._fillHead.call(this, container);
          this._actionbarWidget.push(this.actions, { label: false, icon: true });
      };
      MarkerNavigationWidget.prototype._getActionBarOptions = function () {
          return {
              orientation: 1 /* HORIZONTAL_REVERSE */
          };
      };
      MarkerNavigationWidget.prototype._fillBody = function (container) {
          var _this = this;
          this._parentContainer = container;
          dom.addClass(container, 'marker-widget');
          this._parentContainer.tabIndex = 0;
          this._parentContainer.setAttribute('role', 'tooltip');
          this._container = document.createElement('div');
          container.appendChild(this._container);
          this._message = new MessageWidget(this._container, this.editor, function (related) { return _this._onDidSelectRelatedInformation.fire(related); });
          this._disposables.push(this._message);
      };
      MarkerNavigationWidget.prototype.show = function (where, heightInLines) {
          throw new Error('call showAtMarker');
      };
      MarkerNavigationWidget.prototype.showAtMarker = function (marker, markerIdx, markerCount) {
          // update:
          // * title
          // * message
          this._container.classList.remove('stale');
          this._message.update(marker);
          // update frame color (only applied on 'show')
          this._severity = marker.severity;
          this._applyTheme(this._themeService.getTheme());
          // show
          var range = range_js_1.Range.lift(marker);
          var editorPosition = this.editor.getPosition();
          var position = editorPosition && range.containsPosition(editorPosition) ? editorPosition : range.getStartPosition();
          _super.prototype.show.call(this, position, this.computeRequiredHeight());
          var model = this.editor.getModel();
          if (model) {
              var detail = markerCount > 1
                  ? nls.localize('problems', "{0} of {1} problems", markerIdx, markerCount)
                  : nls.localize('change', "{0} of {1} problem", markerIdx, markerCount);
              this.setTitle(resources_js_1.basename(model.uri), detail);
          }
          var headingIconClassName = 'error';
          if (this._severity === markers_js_1.MarkerSeverity.Warning) {
              headingIconClassName = 'warning';
          }
          else if (this._severity === markers_js_1.MarkerSeverity.Info) {
              headingIconClassName = 'info';
          }
          this.setTitleIcon(headingIconClassName);
          this.editor.revealPositionInCenter(position, 0 /* Smooth */);
          if (this.editor.getConfiguration().accessibilitySupport !== 1 /* Disabled */) {
              this.focus();
          }
      };
      MarkerNavigationWidget.prototype.updateMarker = function (marker) {
          this._container.classList.remove('stale');
          this._message.update(marker);
      };
      MarkerNavigationWidget.prototype.showStale = function () {
          this._container.classList.add('stale');
          this._relayout();
      };
      MarkerNavigationWidget.prototype._doLayoutBody = function (heightInPixel, widthInPixel) {
          _super.prototype._doLayoutBody.call(this, heightInPixel, widthInPixel);
          this._heightInPixel = heightInPixel;
          this._message.layout(heightInPixel, widthInPixel);
          this._container.style.height = heightInPixel + "px";
      };
      MarkerNavigationWidget.prototype._onWidth = function (widthInPixel) {
          this._message.layout(this._heightInPixel, widthInPixel);
      };
      MarkerNavigationWidget.prototype._relayout = function () {
          _super.prototype._relayout.call(this, this.computeRequiredHeight());
      };
      MarkerNavigationWidget.prototype.computeRequiredHeight = function () {
          return 3 + this._message.getHeightInLines();
      };
      return MarkerNavigationWidget;
  }(peekViewWidget_js_1.PeekViewWidget));
  exports.MarkerNavigationWidget = MarkerNavigationWidget;
  // theming
  var errorDefault = colorRegistry_js_1.oneOf(editorColorRegistry_js_1.editorErrorForeground, editorColorRegistry_js_1.editorErrorBorder);
  var warningDefault = colorRegistry_js_1.oneOf(editorColorRegistry_js_1.editorWarningForeground, editorColorRegistry_js_1.editorWarningBorder);
  var infoDefault = colorRegistry_js_1.oneOf(editorColorRegistry_js_1.editorInfoForeground, editorColorRegistry_js_1.editorInfoBorder);
  exports.editorMarkerNavigationError = colorRegistry_js_1.registerColor('editorMarkerNavigationError.background', { dark: errorDefault, light: errorDefault, hc: errorDefault }, nls.localize('editorMarkerNavigationError', 'Editor marker navigation widget error color.'));
  exports.editorMarkerNavigationWarning = colorRegistry_js_1.registerColor('editorMarkerNavigationWarning.background', { dark: warningDefault, light: warningDefault, hc: warningDefault }, nls.localize('editorMarkerNavigationWarning', 'Editor marker navigation widget warning color.'));
  exports.editorMarkerNavigationInfo = colorRegistry_js_1.registerColor('editorMarkerNavigationInfo.background', { dark: infoDefault, light: infoDefault, hc: infoDefault }, nls.localize('editorMarkerNavigationInfo', 'Editor marker navigation widget info color.'));
  exports.editorMarkerNavigationBackground = colorRegistry_js_1.registerColor('editorMarkerNavigation.background', { dark: '#2D2D30', light: color_js_1.Color.white, hc: '#0C141F' }, nls.localize('editorMarkerNavigationBackground', 'Editor marker navigation widget background.'));
  themeService_js_1.registerThemingParticipant(function (theme, collector) {
      var link = theme.getColor(colorRegistry_js_1.textLinkForeground);
      if (link) {
          collector.addRule(".monaco-editor .marker-widget a { color: " + link + "; }");
      }
  });
  

});
