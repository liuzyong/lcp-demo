define('node_modules/monaco-editor/esm/vs/editor/contrib/referenceSearch/referenceSearch', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.provideReferences = exports.ReferenceAction = exports.ReferenceController = exports.defaultReferenceSearchOptions = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b)
                  if (b.hasOwnProperty(p))
                      d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
      else
          for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                  r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = (this && this.__param) || function (paramIndex, decorator) {
      return function (target, key) { decorator(target, key, paramIndex); };
  };
  var nls = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/nls"));
  var contextkey_js_1 = require("node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey");
  var keybindingsRegistry_js_1 = require("node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry");
  var position_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/position");
  var editorExtensions_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions");
  var modes_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/modes");
  var range_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/range");
  var peekViewWidget_js_1 = require("node_modules/monaco-editor/esm/vs/editor/contrib/referenceSearch/peekViewWidget");
  var referencesController_js_1 = require("node_modules/monaco-editor/esm/vs/editor/contrib/referenceSearch/referencesController");
  var referencesModel_js_1 = require("node_modules/monaco-editor/esm/vs/editor/contrib/referenceSearch/referencesModel");
  var async_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/async");
  var errors_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/errors");
  var editorContextKeys_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys");
  var embeddedCodeEditorWidget_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/widget/embeddedCodeEditorWidget");
  var editorBrowser_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorBrowser");
  var listService_js_1 = require("node_modules/monaco-editor/esm/vs/platform/list/browser/listService");
  var referencesWidget_js_1 = require("node_modules/monaco-editor/esm/vs/editor/contrib/referenceSearch/referencesWidget");
  var commands_js_1 = require("node_modules/monaco-editor/esm/vs/platform/commands/common/commands");
  var uri_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/uri");
  var codeEditorService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService");
  var cancellation_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/cancellation");
  exports.defaultReferenceSearchOptions = {
      getMetaTitle: function (model) {
          return model.references.length > 1 ? nls.localize('meta.titleReference', " â€“ {0} references", model.references.length) : '';
      }
  };
  var ReferenceController = /** @class */ (function () {
      function ReferenceController(editor, contextKeyService) {
          if (editor instanceof embeddedCodeEditorWidget_js_1.EmbeddedCodeEditorWidget) {
              peekViewWidget_js_1.PeekContext.inPeekEditor.bindTo(contextKeyService);
          }
      }
      ReferenceController.prototype.dispose = function () {
      };
      ReferenceController.prototype.getId = function () {
          return ReferenceController.ID;
      };
      ReferenceController.ID = 'editor.contrib.referenceController';
      ReferenceController = __decorate([
          __param(1, contextkey_js_1.IContextKeyService)
      ], ReferenceController);
      return ReferenceController;
  }());
  exports.ReferenceController = ReferenceController;
  var ReferenceAction = /** @class */ (function (_super) {
      __extends(ReferenceAction, _super);
      function ReferenceAction() {
          return _super.call(this, {
              id: 'editor.action.referenceSearch.trigger',
              label: nls.localize('references.action.label', "Peek References"),
              alias: 'Find All References',
              precondition: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.hasReferenceProvider, peekViewWidget_js_1.PeekContext.notInPeekEditor, editorContextKeys_js_1.EditorContextKeys.isInEmbeddedEditor.toNegated()),
              kbOpts: {
                  kbExpr: editorContextKeys_js_1.EditorContextKeys.editorTextFocus,
                  primary: 1024 /* Shift */ | 70 /* F12 */,
                  weight: 100 /* EditorContrib */
              },
              menuOpts: {
                  group: 'navigation',
                  order: 1.5
              }
          }) || this;
      }
      ReferenceAction.prototype.run = function (_accessor, editor) {
          var controller = referencesController_js_1.ReferencesController.get(editor);
          if (!controller) {
              return;
          }
          if (editor.hasModel()) {
              var range_1 = editor.getSelection();
              var model_1 = editor.getModel();
              var references = async_js_1.createCancelablePromise(function (token) { return provideReferences(model_1, range_1.getStartPosition(), token).then(function (references) { return new referencesModel_js_1.ReferencesModel(references); }); });
              controller.toggleWidget(range_1, references, exports.defaultReferenceSearchOptions);
          }
      };
      return ReferenceAction;
  }(editorExtensions_js_1.EditorAction));
  exports.ReferenceAction = ReferenceAction;
  editorExtensions_js_1.registerEditorContribution(ReferenceController);
  editorExtensions_js_1.registerEditorAction(ReferenceAction);
  var findReferencesCommand = function (accessor, resource, position) {
      if (!(resource instanceof uri_js_1.URI)) {
          throw new Error('illegal argument, uri');
      }
      if (!position) {
          throw new Error('illegal argument, position');
      }
      var codeEditorService = accessor.get(codeEditorService_js_1.ICodeEditorService);
      return codeEditorService.openCodeEditor({ resource: resource }, codeEditorService.getFocusedCodeEditor()).then(function (control) {
          if (!editorBrowser_js_1.isCodeEditor(control) || !control.hasModel()) {
              return undefined;
          }
          var controller = referencesController_js_1.ReferencesController.get(control);
          if (!controller) {
              return undefined;
          }
          var references = async_js_1.createCancelablePromise(function (token) { return provideReferences(control.getModel(), position_js_1.Position.lift(position), token).then(function (references) { return new referencesModel_js_1.ReferencesModel(references); }); });
          var range = new range_js_1.Range(position.lineNumber, position.column, position.lineNumber, position.column);
          return Promise.resolve(controller.toggleWidget(range, references, exports.defaultReferenceSearchOptions));
      });
  };
  var showReferencesCommand = function (accessor, resource, position, references) {
      if (!(resource instanceof uri_js_1.URI)) {
          throw new Error('illegal argument, uri expected');
      }
      if (!references) {
          throw new Error('missing references');
      }
      var codeEditorService = accessor.get(codeEditorService_js_1.ICodeEditorService);
      return codeEditorService.openCodeEditor({ resource: resource }, codeEditorService.getFocusedCodeEditor()).then(function (control) {
          if (!editorBrowser_js_1.isCodeEditor(control)) {
              return undefined;
          }
          var controller = referencesController_js_1.ReferencesController.get(control);
          if (!controller) {
              return undefined;
          }
          return controller.toggleWidget(new range_js_1.Range(position.lineNumber, position.column, position.lineNumber, position.column), async_js_1.createCancelablePromise(function (_) { return Promise.resolve(new referencesModel_js_1.ReferencesModel(references)); }), exports.defaultReferenceSearchOptions);
      });
  };
  // register commands
  commands_js_1.CommandsRegistry.registerCommand({
      id: 'editor.action.findReferences',
      handler: findReferencesCommand
  });
  commands_js_1.CommandsRegistry.registerCommand({
      id: 'editor.action.showReferences',
      handler: showReferencesCommand,
      description: {
          description: 'Show references at a position in a file',
          args: [
              { name: 'uri', description: 'The text document in which to show references', constraint: uri_js_1.URI },
              { name: 'position', description: 'The position at which to show', constraint: position_js_1.Position.isIPosition },
              { name: 'locations', description: 'An array of locations.', constraint: Array },
          ]
      }
  });
  function closeActiveReferenceSearch(accessor, args) {
      withController(accessor, function (controller) { return controller.closeWidget(); });
  }
  function openReferenceToSide(accessor, args) {
      var listService = accessor.get(listService_js_1.IListService);
      var focus = listService.lastFocusedList && listService.lastFocusedList.getFocus();
      if (focus instanceof referencesModel_js_1.OneReference) {
          withController(accessor, function (controller) { return controller.openReference(focus, true); });
      }
  }
  function withController(accessor, fn) {
      var outerEditor = peekViewWidget_js_1.getOuterEditor(accessor);
      if (!outerEditor) {
          return;
      }
      var controller = referencesController_js_1.ReferencesController.get(outerEditor);
      if (!controller) {
          return;
      }
      fn(controller);
  }
  keybindingsRegistry_js_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
      id: 'goToNextReference',
      weight: 200 /* WorkbenchContrib */ + 50,
      primary: 62 /* F4 */,
      when: referencesController_js_1.ctxReferenceSearchVisible,
      handler: function (accessor) {
          withController(accessor, function (controller) {
              controller.goToNextOrPreviousReference(true);
          });
      }
  });
  keybindingsRegistry_js_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
      id: 'goToNextReferenceFromEmbeddedEditor',
      weight: 100 /* EditorContrib */ + 50,
      primary: 62 /* F4 */,
      when: peekViewWidget_js_1.PeekContext.inPeekEditor,
      handler: function (accessor) {
          withController(accessor, function (controller) {
              controller.goToNextOrPreviousReference(true);
          });
      }
  });
  keybindingsRegistry_js_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
      id: 'goToPreviousReference',
      weight: 200 /* WorkbenchContrib */ + 50,
      primary: 1024 /* Shift */ | 62 /* F4 */,
      when: referencesController_js_1.ctxReferenceSearchVisible,
      handler: function (accessor) {
          withController(accessor, function (controller) {
              controller.goToNextOrPreviousReference(false);
          });
      }
  });
  keybindingsRegistry_js_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
      id: 'goToPreviousReferenceFromEmbeddedEditor',
      weight: 100 /* EditorContrib */ + 50,
      primary: 1024 /* Shift */ | 62 /* F4 */,
      when: peekViewWidget_js_1.PeekContext.inPeekEditor,
      handler: function (accessor) {
          withController(accessor, function (controller) {
              controller.goToNextOrPreviousReference(false);
          });
      }
  });
  keybindingsRegistry_js_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
      id: 'closeReferenceSearch',
      weight: 200 /* WorkbenchContrib */ + 50,
      primary: 9 /* Escape */,
      secondary: [1024 /* Shift */ | 9 /* Escape */],
      when: contextkey_js_1.ContextKeyExpr.and(referencesController_js_1.ctxReferenceSearchVisible, contextkey_js_1.ContextKeyExpr.not('config.editor.stablePeek')),
      handler: closeActiveReferenceSearch
  });
  keybindingsRegistry_js_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
      id: 'closeReferenceSearchEditor',
      weight: 100 /* EditorContrib */ - 101,
      primary: 9 /* Escape */,
      secondary: [1024 /* Shift */ | 9 /* Escape */],
      when: contextkey_js_1.ContextKeyExpr.and(peekViewWidget_js_1.PeekContext.inPeekEditor, contextkey_js_1.ContextKeyExpr.not('config.editor.stablePeek')),
      handler: closeActiveReferenceSearch
  });
  keybindingsRegistry_js_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
      id: 'openReferenceToSide',
      weight: 100 /* EditorContrib */,
      primary: 2048 /* CtrlCmd */ | 3 /* Enter */,
      mac: {
          primary: 256 /* WinCtrl */ | 3 /* Enter */
      },
      when: contextkey_js_1.ContextKeyExpr.and(referencesController_js_1.ctxReferenceSearchVisible, referencesWidget_js_1.ctxReferenceWidgetSearchTreeFocused),
      handler: openReferenceToSide
  });
  function provideReferences(model, position, token) {
      // collect references from all providers
      var promises = modes_js_1.ReferenceProviderRegistry.ordered(model).map(function (provider) {
          return Promise.resolve(provider.provideReferences(model, position, { includeDeclaration: true }, token)).then(function (result) {
              if (Array.isArray(result)) {
                  return result;
              }
              return undefined;
          }, function (err) {
              errors_js_1.onUnexpectedExternalError(err);
          });
      });
      return Promise.all(promises).then(function (references) {
          var result = [];
          for (var _i = 0, references_1 = references; _i < references_1.length; _i++) {
              var ref = references_1[_i];
              if (ref) {
                  result.push.apply(result, ref);
              }
          }
          return result;
      });
  }
  exports.provideReferences = provideReferences;
  editorExtensions_js_1.registerDefaultLanguageCommand('_executeReferenceProvider', function (model, position) { return provideReferences(model, position, cancellation_js_1.CancellationToken.None); });
  

});
