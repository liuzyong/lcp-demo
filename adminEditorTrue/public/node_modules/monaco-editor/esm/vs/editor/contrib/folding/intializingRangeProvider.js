define('node_modules/monaco-editor/esm/vs/editor/contrib/folding/intializingRangeProvider', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.InitializingRangeProvider = exports.ID_INIT_PROVIDER = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var syntaxRangeProvider_js_1 = require("node_modules/monaco-editor/esm/vs/editor/contrib/folding/syntaxRangeProvider");
  exports.ID_INIT_PROVIDER = 'init';
  var InitializingRangeProvider = /** @class */ (function () {
      function InitializingRangeProvider(editorModel, initialRanges, onTimeout, timeoutTime) {
          this.editorModel = editorModel;
          this.id = exports.ID_INIT_PROVIDER;
          if (initialRanges.length) {
              var toDecorationRange = function (range) {
                  return {
                      range: {
                          startLineNumber: range.startLineNumber,
                          startColumn: 0,
                          endLineNumber: range.endLineNumber,
                          endColumn: editorModel.getLineLength(range.endLineNumber)
                      },
                      options: {
                          stickiness: 1 /* NeverGrowsWhenTypingAtEdges */
                      }
                  };
              };
              this.decorationIds = editorModel.deltaDecorations([], initialRanges.map(toDecorationRange));
              this.timeout = setTimeout(onTimeout, timeoutTime);
          }
      }
      InitializingRangeProvider.prototype.dispose = function () {
          if (this.decorationIds) {
              this.editorModel.deltaDecorations(this.decorationIds, []);
              this.decorationIds = undefined;
          }
          if (typeof this.timeout === 'number') {
              clearTimeout(this.timeout);
              this.timeout = undefined;
          }
      };
      InitializingRangeProvider.prototype.compute = function (cancelationToken) {
          var foldingRangeData = [];
          if (this.decorationIds) {
              for (var _i = 0, _a = this.decorationIds; _i < _a.length; _i++) {
                  var id = _a[_i];
                  var range = this.editorModel.getDecorationRange(id);
                  if (range) {
                      foldingRangeData.push({ start: range.startLineNumber, end: range.endLineNumber, rank: 1 });
                  }
              }
          }
          return Promise.resolve(syntaxRangeProvider_js_1.sanitizeRanges(foldingRangeData, Number.MAX_VALUE));
      };
      return InitializingRangeProvider;
  }());
  exports.InitializingRangeProvider = InitializingRangeProvider;
  

});
