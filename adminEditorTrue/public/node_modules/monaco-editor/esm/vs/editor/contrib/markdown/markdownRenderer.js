define('node_modules/monaco-editor/esm/vs/editor/contrib/markdown/markdownRenderer', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.MarkdownRenderer = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
      else
          for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                  r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = (this && this.__param) || function (paramIndex, decorator) {
      return function (target, key) { decorator(target, key, paramIndex); };
  };
  var htmlContentRenderer_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/htmlContentRenderer");
  var opener_js_1 = require("node_modules/monaco-editor/esm/vs/platform/opener/common/opener");
  var modeService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/services/modeService");
  var uri_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/uri");
  var errors_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/errors");
  var textToHtmlTokenizer_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/modes/textToHtmlTokenizer");
  var instantiation_js_1 = require("node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation");
  var event_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/event");
  var lifecycle_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/lifecycle");
  var modes_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/modes");
  var MarkdownRenderer = /** @class */ (function () {
      function MarkdownRenderer(_editor, _modeService, _openerService) {
          if (_openerService === void 0) {
              _openerService = opener_js_1.NullOpenerService;
          }
          this._editor = _editor;
          this._modeService = _modeService;
          this._openerService = _openerService;
          this._onDidRenderCodeBlock = new event_js_1.Emitter();
          this.onDidRenderCodeBlock = this._onDidRenderCodeBlock.event;
      }
      MarkdownRenderer.prototype.getOptions = function (disposeables) {
          var _this = this;
          return {
              codeBlockRenderer: function (languageAlias, value) {
                  // In markdown,
                  // it is possible that we stumble upon language aliases (e.g.js instead of javascript)
                  // it is possible no alias is given in which case we fall back to the current editor lang
                  var modeId = null;
                  if (languageAlias) {
                      modeId = _this._modeService.getModeIdForLanguageName(languageAlias);
                  }
                  else {
                      var model = _this._editor.getModel();
                      if (model) {
                          modeId = model.getLanguageIdentifier().language;
                      }
                  }
                  _this._modeService.triggerMode(modeId || '');
                  return Promise.resolve(true).then(function (_) {
                      var promise = modes_js_1.TokenizationRegistry.getPromise(modeId || '');
                      if (promise) {
                          return promise.then(function (support) { return textToHtmlTokenizer_js_1.tokenizeToString(value, support); });
                      }
                      return textToHtmlTokenizer_js_1.tokenizeToString(value, undefined);
                  }).then(function (code) {
                      return "<span style=\"font-family: " + _this._editor.getConfiguration().fontInfo.fontFamily + "\">" + code + "</span>";
                  });
              },
              codeBlockRenderCallback: function () { return _this._onDidRenderCodeBlock.fire(); },
              actionHandler: {
                  callback: function (content) {
                      var uri;
                      try {
                          uri = uri_js_1.URI.parse(content);
                      }
                      catch (_a) {
                          // ignore
                      }
                      if (uri && _this._openerService) {
                          _this._openerService.open(uri).catch(errors_js_1.onUnexpectedError);
                      }
                  },
                  disposeables: disposeables
              }
          };
      };
      MarkdownRenderer.prototype.render = function (markdown) {
          var disposeables = [];
          var element;
          if (!markdown) {
              element = document.createElement('span');
          }
          else {
              element = htmlContentRenderer_js_1.renderMarkdown(markdown, this.getOptions(disposeables));
          }
          return {
              element: element,
              dispose: function () { return lifecycle_js_1.dispose(disposeables); }
          };
      };
      MarkdownRenderer = __decorate([
          __param(1, modeService_js_1.IModeService),
          __param(2, instantiation_js_1.optional(opener_js_1.IOpenerService))
      ], MarkdownRenderer);
      return MarkdownRenderer;
  }());
  exports.MarkdownRenderer = MarkdownRenderer;
  

});
