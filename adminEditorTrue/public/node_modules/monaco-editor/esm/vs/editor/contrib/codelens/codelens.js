define('node_modules/monaco-editor/esm/vs/editor/contrib/codelens/codelens', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getCodeLensData = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var arrays_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/arrays");
  var cancellation_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/cancellation");
  var errors_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/errors");
  var uri_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/uri");
  var editorExtensions_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions");
  var modes_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/modes");
  var modelService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/services/modelService");
  function getCodeLensData(model, token) {
      var symbols = [];
      var provider = modes_js_1.CodeLensProviderRegistry.ordered(model);
      var promises = provider.map(function (provider) {
          return Promise.resolve(provider.provideCodeLenses(model, token)).then(function (result) {
              if (Array.isArray(result)) {
                  for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
                      var symbol = result_1[_i];
                      symbols.push({ symbol: symbol, provider: provider });
                  }
              }
          }).catch(errors_js_1.onUnexpectedExternalError);
      });
      return Promise.all(promises).then(function () {
          return arrays_js_1.mergeSort(symbols, function (a, b) {
              // sort by lineNumber, provider-rank, and column
              if (a.symbol.range.startLineNumber < b.symbol.range.startLineNumber) {
                  return -1;
              }
              else if (a.symbol.range.startLineNumber > b.symbol.range.startLineNumber) {
                  return 1;
              }
              else if (provider.indexOf(a.provider) < provider.indexOf(b.provider)) {
                  return -1;
              }
              else if (provider.indexOf(a.provider) > provider.indexOf(b.provider)) {
                  return 1;
              }
              else if (a.symbol.range.startColumn < b.symbol.range.startColumn) {
                  return -1;
              }
              else if (a.symbol.range.startColumn > b.symbol.range.startColumn) {
                  return 1;
              }
              else {
                  return 0;
              }
          });
      });
  }
  exports.getCodeLensData = getCodeLensData;
  editorExtensions_js_1.registerLanguageCommand('_executeCodeLensProvider', function (accessor, args) {
      var resource = args.resource, itemResolveCount = args.itemResolveCount;
      if (!(resource instanceof uri_js_1.URI)) {
          throw errors_js_1.illegalArgument();
      }
      var model = accessor.get(modelService_js_1.IModelService).getModel(resource);
      if (!model) {
          throw errors_js_1.illegalArgument();
      }
      var result = [];
      return getCodeLensData(model, cancellation_js_1.CancellationToken.None).then(function (value) {
          var resolve = [];
          var _loop_1 = function (item) {
              if (typeof itemResolveCount === 'undefined' || Boolean(item.symbol.command)) {
                  result.push(item.symbol);
              }
              else if (itemResolveCount-- > 0 && item.provider.resolveCodeLens) {
                  resolve.push(Promise.resolve(item.provider.resolveCodeLens(model, item.symbol, cancellation_js_1.CancellationToken.None)).then(function (symbol) { return result.push(symbol || item.symbol); }));
              }
          };
          for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
              var item = value_1[_i];
              _loop_1(item);
          }
          return Promise.all(resolve);
      }).then(function () {
          return result;
      });
  });
  

});
