define('node_modules/monaco-editor/esm/vs/editor/contrib/inPlaceReplace/inPlaceReplace', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b)
                  if (b.hasOwnProperty(p))
                      d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
      else
          for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                  r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = (this && this.__param) || function (paramIndex, decorator) {
      return function (target, key) { decorator(target, key, paramIndex); };
  };
  var nls = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/nls"));
  var range_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/range");
  var selection_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/selection");
  var editorContextKeys_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys");
  var editorExtensions_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions");
  var editorWorkerService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/services/editorWorkerService");
  var inPlaceReplaceCommand_js_1 = require("node_modules/monaco-editor/esm/vs/editor/contrib/inPlaceReplace/inPlaceReplaceCommand");
  var editorState_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/core/editorState");
  var themeService_js_1 = require("node_modules/monaco-editor/esm/vs/platform/theme/common/themeService");
  var editorColorRegistry_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/view/editorColorRegistry");
  var textModel_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/model/textModel");
  var async_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/async");
  var errors_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/errors");
  var InPlaceReplaceController = /** @class */ (function () {
      function InPlaceReplaceController(editor, editorWorkerService) {
          this.decorationIds = [];
          this.editor = editor;
          this.editorWorkerService = editorWorkerService;
      }
      InPlaceReplaceController.get = function (editor) {
          return editor.getContribution(InPlaceReplaceController.ID);
      };
      InPlaceReplaceController.prototype.dispose = function () {
      };
      InPlaceReplaceController.prototype.getId = function () {
          return InPlaceReplaceController.ID;
      };
      InPlaceReplaceController.prototype.run = function (source, up) {
          var _this = this;
          // cancel any pending request
          if (this.currentRequest) {
              this.currentRequest.cancel();
          }
          var editorSelection = this.editor.getSelection();
          var model = this.editor.getModel();
          if (!model || !editorSelection) {
              return undefined;
          }
          var selection = editorSelection;
          if (selection.startLineNumber !== selection.endLineNumber) {
              // Can't accept multiline selection
              return undefined;
          }
          var state = new editorState_js_1.EditorState(this.editor, 1 /* Value */ | 4 /* Position */);
          var modelURI = model.uri;
          if (!this.editorWorkerService.canNavigateValueSet(modelURI)) {
              return Promise.resolve(undefined);
          }
          this.currentRequest = async_js_1.createCancelablePromise(function (token) { return _this.editorWorkerService.navigateValueSet(modelURI, selection, up); });
          return this.currentRequest.then(function (result) {
              if (!result || !result.range || !result.value) {
                  // No proper result
                  return;
              }
              if (!state.validate(_this.editor)) {
                  // state has changed
                  return;
              }
              // Selection
              var editRange = range_js_1.Range.lift(result.range);
              var highlightRange = result.range;
              var diff = result.value.length - (selection.endColumn - selection.startColumn);
              // highlight
              highlightRange = {
                  startLineNumber: highlightRange.startLineNumber,
                  startColumn: highlightRange.startColumn,
                  endLineNumber: highlightRange.endLineNumber,
                  endColumn: highlightRange.startColumn + result.value.length
              };
              if (diff > 1) {
                  selection = new selection_js_1.Selection(selection.startLineNumber, selection.startColumn, selection.endLineNumber, selection.endColumn + diff - 1);
              }
              // Insert new text
              var command = new inPlaceReplaceCommand_js_1.InPlaceReplaceCommand(editRange, selection, result.value);
              _this.editor.pushUndoStop();
              _this.editor.executeCommand(source, command);
              _this.editor.pushUndoStop();
              // add decoration
              _this.decorationIds = _this.editor.deltaDecorations(_this.decorationIds, [{
                      range: highlightRange,
                      options: InPlaceReplaceController.DECORATION
                  }]);
              // remove decoration after delay
              if (_this.decorationRemover) {
                  _this.decorationRemover.cancel();
              }
              _this.decorationRemover = async_js_1.timeout(350);
              _this.decorationRemover.then(function () { return _this.decorationIds = _this.editor.deltaDecorations(_this.decorationIds, []); }).catch(errors_js_1.onUnexpectedError);
          }).catch(errors_js_1.onUnexpectedError);
      };
      InPlaceReplaceController.ID = 'editor.contrib.inPlaceReplaceController';
      InPlaceReplaceController.DECORATION = textModel_js_1.ModelDecorationOptions.register({
          className: 'valueSetReplacement'
      });
      InPlaceReplaceController = __decorate([
          __param(1, editorWorkerService_js_1.IEditorWorkerService)
      ], InPlaceReplaceController);
      return InPlaceReplaceController;
  }());
  var InPlaceReplaceUp = /** @class */ (function (_super) {
      __extends(InPlaceReplaceUp, _super);
      function InPlaceReplaceUp() {
          return _super.call(this, {
              id: 'editor.action.inPlaceReplace.up',
              label: nls.localize('InPlaceReplaceAction.previous.label', "Replace with Previous Value"),
              alias: 'Replace with Previous Value',
              precondition: editorContextKeys_js_1.EditorContextKeys.writable,
              kbOpts: {
                  kbExpr: editorContextKeys_js_1.EditorContextKeys.editorTextFocus,
                  primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 82 /* US_COMMA */,
                  weight: 100 /* EditorContrib */
              }
          }) || this;
      }
      InPlaceReplaceUp.prototype.run = function (accessor, editor) {
          var controller = InPlaceReplaceController.get(editor);
          if (!controller) {
              return Promise.resolve(undefined);
          }
          return controller.run(this.id, true);
      };
      return InPlaceReplaceUp;
  }(editorExtensions_js_1.EditorAction));
  var InPlaceReplaceDown = /** @class */ (function (_super) {
      __extends(InPlaceReplaceDown, _super);
      function InPlaceReplaceDown() {
          return _super.call(this, {
              id: 'editor.action.inPlaceReplace.down',
              label: nls.localize('InPlaceReplaceAction.next.label', "Replace with Next Value"),
              alias: 'Replace with Next Value',
              precondition: editorContextKeys_js_1.EditorContextKeys.writable,
              kbOpts: {
                  kbExpr: editorContextKeys_js_1.EditorContextKeys.editorTextFocus,
                  primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 84 /* US_DOT */,
                  weight: 100 /* EditorContrib */
              }
          }) || this;
      }
      InPlaceReplaceDown.prototype.run = function (accessor, editor) {
          var controller = InPlaceReplaceController.get(editor);
          if (!controller) {
              return Promise.resolve(undefined);
          }
          return controller.run(this.id, false);
      };
      return InPlaceReplaceDown;
  }(editorExtensions_js_1.EditorAction));
  editorExtensions_js_1.registerEditorContribution(InPlaceReplaceController);
  editorExtensions_js_1.registerEditorAction(InPlaceReplaceUp);
  editorExtensions_js_1.registerEditorAction(InPlaceReplaceDown);
  themeService_js_1.registerThemingParticipant(function (theme, collector) {
      var border = theme.getColor(editorColorRegistry_js_1.editorBracketMatchBorder);
      if (border) {
          collector.addRule(".monaco-editor.vs .valueSetReplacement { outline: solid 2px " + border + "; }");
      }
  });
  

});
