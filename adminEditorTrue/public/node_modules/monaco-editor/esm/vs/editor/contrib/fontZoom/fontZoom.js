define('node_modules/monaco-editor/esm/vs/editor/contrib/fontZoom/fontZoom', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b)
                  if (b.hasOwnProperty(p))
                      d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var nls = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/nls"));
  var editorExtensions_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions");
  var editorZoom_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/config/editorZoom");
  var EditorFontZoomIn = /** @class */ (function (_super) {
      __extends(EditorFontZoomIn, _super);
      function EditorFontZoomIn() {
          return _super.call(this, {
              id: 'editor.action.fontZoomIn',
              label: nls.localize('EditorFontZoomIn.label', "Editor Font Zoom In"),
              alias: 'Editor Font Zoom In',
              precondition: null
          }) || this;
      }
      EditorFontZoomIn.prototype.run = function (accessor, editor) {
          editorZoom_js_1.EditorZoom.setZoomLevel(editorZoom_js_1.EditorZoom.getZoomLevel() + 1);
      };
      return EditorFontZoomIn;
  }(editorExtensions_js_1.EditorAction));
  var EditorFontZoomOut = /** @class */ (function (_super) {
      __extends(EditorFontZoomOut, _super);
      function EditorFontZoomOut() {
          return _super.call(this, {
              id: 'editor.action.fontZoomOut',
              label: nls.localize('EditorFontZoomOut.label', "Editor Font Zoom Out"),
              alias: 'Editor Font Zoom Out',
              precondition: null
          }) || this;
      }
      EditorFontZoomOut.prototype.run = function (accessor, editor) {
          editorZoom_js_1.EditorZoom.setZoomLevel(editorZoom_js_1.EditorZoom.getZoomLevel() - 1);
      };
      return EditorFontZoomOut;
  }(editorExtensions_js_1.EditorAction));
  var EditorFontZoomReset = /** @class */ (function (_super) {
      __extends(EditorFontZoomReset, _super);
      function EditorFontZoomReset() {
          return _super.call(this, {
              id: 'editor.action.fontZoomReset',
              label: nls.localize('EditorFontZoomReset.label', "Editor Font Zoom Reset"),
              alias: 'Editor Font Zoom Reset',
              precondition: null
          }) || this;
      }
      EditorFontZoomReset.prototype.run = function (accessor, editor) {
          editorZoom_js_1.EditorZoom.setZoomLevel(0);
      };
      return EditorFontZoomReset;
  }(editorExtensions_js_1.EditorAction));
  editorExtensions_js_1.registerEditorAction(EditorFontZoomIn);
  editorExtensions_js_1.registerEditorAction(EditorFontZoomOut);
  editorExtensions_js_1.registerEditorAction(EditorFontZoomReset);
  

});
