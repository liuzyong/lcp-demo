define('node_modules/monaco-editor/esm/vs/editor/contrib/referenceSearch/peekViewWidget', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.PeekViewWidget = exports.getOuterEditor = exports.PeekContext = exports.IPeekViewService = void 0;
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b)
                  if (b.hasOwnProperty(p))
                      d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var dom = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/base/browser/dom"));
  var actionbar_js_1 = require("node_modules/monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar");
  var actions_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/actions");
  var color_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/color");
  var event_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/event");
  var objects = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/base/common/objects"));
  var strings = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/base/common/strings"));
  ''/*@require node_modules/monaco-editor/esm/vs/editor/contrib/referenceSearch/media/peekViewWidget.css*/;
  var codeEditorService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService");
  var embeddedCodeEditorWidget_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/widget/embeddedCodeEditorWidget");
  var zoneWidget_js_1 = require("node_modules/monaco-editor/esm/vs/editor/contrib/zoneWidget/zoneWidget");
  var nls = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/nls"));
  var contextkey_js_1 = require("node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey");
  var instantiation_js_1 = require("node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation");
  var extensions_js_1 = require("node_modules/monaco-editor/esm/vs/platform/instantiation/common/extensions");
  exports.IPeekViewService = instantiation_js_1.createDecorator('IPeekViewService');
  extensions_js_1.registerSingleton(exports.IPeekViewService, /** @class */ (function () {
      function class_1() {
          this._widgets = new Map();
      }
      class_1.prototype.addExclusiveWidget = function (editor, widget) {
          var _this = this;
          var existing = this._widgets.get(editor);
          if (existing) {
              existing.listener.dispose();
              existing.widget.dispose();
          }
          var remove = function () {
              var data = _this._widgets.get(editor);
              if (data && data.widget === widget) {
                  data.listener.dispose();
                  _this._widgets.delete(editor);
              }
          };
          this._widgets.set(editor, { widget: widget, listener: widget.onDidClose(remove) });
      };
      return class_1;
  }()));
  (function (PeekContext) {
      PeekContext.inPeekEditor = new contextkey_js_1.RawContextKey('inReferenceSearchEditor', true);
      PeekContext.notInPeekEditor = PeekContext.inPeekEditor.toNegated();
  })(exports.PeekContext || (exports.PeekContext = {}));
  function getOuterEditor(accessor) {
      var editor = accessor.get(codeEditorService_js_1.ICodeEditorService).getFocusedCodeEditor();
      if (editor instanceof embeddedCodeEditorWidget_js_1.EmbeddedCodeEditorWidget) {
          return editor.getParentEditor();
      }
      return editor;
  }
  exports.getOuterEditor = getOuterEditor;
  var defaultOptions = {
      headerBackgroundColor: color_js_1.Color.white,
      primaryHeadingColor: color_js_1.Color.fromHex('#333333'),
      secondaryHeadingColor: color_js_1.Color.fromHex('#6c6c6cb3')
  };
  var PeekViewWidget = /** @class */ (function (_super) {
      __extends(PeekViewWidget, _super);
      function PeekViewWidget(editor, options) {
          if (options === void 0) {
              options = {};
          }
          var _this = _super.call(this, editor, options) || this;
          _this._onDidClose = new event_js_1.Emitter();
          objects.mixin(_this.options, defaultOptions, false);
          return _this;
      }
      PeekViewWidget.prototype.dispose = function () {
          _super.prototype.dispose.call(this);
          this._onDidClose.fire(this);
      };
      Object.defineProperty(PeekViewWidget.prototype, "onDidClose", {
          get: function () {
              return this._onDidClose.event;
          },
          enumerable: true,
          configurable: true
      });
      PeekViewWidget.prototype.style = function (styles) {
          var options = this.options;
          if (styles.headerBackgroundColor) {
              options.headerBackgroundColor = styles.headerBackgroundColor;
          }
          if (styles.primaryHeadingColor) {
              options.primaryHeadingColor = styles.primaryHeadingColor;
          }
          if (styles.secondaryHeadingColor) {
              options.secondaryHeadingColor = styles.secondaryHeadingColor;
          }
          _super.prototype.style.call(this, styles);
      };
      PeekViewWidget.prototype._applyStyles = function () {
          _super.prototype._applyStyles.call(this);
          var options = this.options;
          if (this._headElement && options.headerBackgroundColor) {
              this._headElement.style.backgroundColor = options.headerBackgroundColor.toString();
          }
          if (this._primaryHeading && options.primaryHeadingColor) {
              this._primaryHeading.style.color = options.primaryHeadingColor.toString();
          }
          if (this._secondaryHeading && options.secondaryHeadingColor) {
              this._secondaryHeading.style.color = options.secondaryHeadingColor.toString();
          }
          if (this._bodyElement && options.frameColor) {
              this._bodyElement.style.borderColor = options.frameColor.toString();
          }
      };
      PeekViewWidget.prototype._fillContainer = function (container) {
          this.setCssClass('peekview-widget');
          this._headElement = dom.$('.head');
          this._bodyElement = dom.$('.body');
          this._fillHead(this._headElement);
          this._fillBody(this._bodyElement);
          container.appendChild(this._headElement);
          container.appendChild(this._bodyElement);
      };
      PeekViewWidget.prototype._fillHead = function (container) {
          var _this = this;
          var titleElement = dom.$('.peekview-title');
          dom.append(this._headElement, titleElement);
          dom.addStandardDisposableListener(titleElement, 'click', function (event) { return _this._onTitleClick(event); });
          this._headingIcon = dom.$('span');
          this._primaryHeading = dom.$('span.filename');
          this._secondaryHeading = dom.$('span.dirname');
          this._metaHeading = dom.$('span.meta');
          dom.append(titleElement, this._headingIcon, this._primaryHeading, this._secondaryHeading, this._metaHeading);
          var actionsContainer = dom.$('.peekview-actions');
          dom.append(this._headElement, actionsContainer);
          var actionBarOptions = this._getActionBarOptions();
          this._actionbarWidget = new actionbar_js_1.ActionBar(actionsContainer, actionBarOptions);
          this._disposables.push(this._actionbarWidget);
          this._actionbarWidget.push(new actions_js_1.Action('peekview.close', nls.localize('label.close', "Close"), 'close-peekview-action', true, function () {
              _this.dispose();
              return Promise.resolve();
          }), { label: false, icon: true });
      };
      PeekViewWidget.prototype._getActionBarOptions = function () {
          return {};
      };
      PeekViewWidget.prototype._onTitleClick = function (event) {
          // implement me
      };
      PeekViewWidget.prototype.setTitleIcon = function (iconClassName) {
          this._headingIcon.className = iconClassName ? "icon " + iconClassName : '';
      };
      PeekViewWidget.prototype.setTitle = function (primaryHeading, secondaryHeading) {
          this._primaryHeading.innerHTML = strings.escape(primaryHeading);
          this._primaryHeading.setAttribute('aria-label', primaryHeading);
          if (secondaryHeading) {
              this._secondaryHeading.innerHTML = strings.escape(secondaryHeading);
          }
          else {
              dom.clearNode(this._secondaryHeading);
          }
      };
      PeekViewWidget.prototype.setMetaTitle = function (value) {
          if (value) {
              this._metaHeading.innerHTML = strings.escape(value);
          }
          else {
              dom.clearNode(this._metaHeading);
          }
      };
      PeekViewWidget.prototype._doLayout = function (heightInPixel, widthInPixel) {
          if (!this._isShowing && heightInPixel < 0) {
              // Looks like the view zone got folded away!
              this.dispose();
              return;
          }
          var headHeight = Math.ceil(this.editor.getConfiguration().lineHeight * 1.2);
          var bodyHeight = heightInPixel - (headHeight + 2 /* the border-top/bottom width*/);
          this._doLayoutHead(headHeight, widthInPixel);
          this._doLayoutBody(bodyHeight, widthInPixel);
      };
      PeekViewWidget.prototype._doLayoutHead = function (heightInPixel, widthInPixel) {
          this._headElement.style.height = heightInPixel + "px";
          this._headElement.style.lineHeight = this._headElement.style.height;
      };
      PeekViewWidget.prototype._doLayoutBody = function (heightInPixel, widthInPixel) {
          this._bodyElement.style.height = heightInPixel + "px";
      };
      return PeekViewWidget;
  }(zoneWidget_js_1.ZoneWidget));
  exports.PeekViewWidget = PeekViewWidget;
  

});
