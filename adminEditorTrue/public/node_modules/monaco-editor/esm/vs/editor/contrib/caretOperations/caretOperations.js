define('node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/caretOperations', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b)
                  if (b.hasOwnProperty(p))
                      d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var nls = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/nls"));
  var editorExtensions_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions");
  var editorContextKeys_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys");
  var moveCaretCommand_js_1 = require("node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/moveCaretCommand");
  var MoveCaretAction = /** @class */ (function (_super) {
      __extends(MoveCaretAction, _super);
      function MoveCaretAction(left, opts) {
          var _this = _super.call(this, opts) || this;
          _this.left = left;
          return _this;
      }
      MoveCaretAction.prototype.run = function (accessor, editor) {
          if (!editor.hasModel()) {
              return;
          }
          var commands = [];
          var selections = editor.getSelections();
          for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {
              var selection = selections_1[_i];
              commands.push(new moveCaretCommand_js_1.MoveCaretCommand(selection, this.left));
          }
          editor.pushUndoStop();
          editor.executeCommands(this.id, commands);
          editor.pushUndoStop();
      };
      return MoveCaretAction;
  }(editorExtensions_js_1.EditorAction));
  var MoveCaretLeftAction = /** @class */ (function (_super) {
      __extends(MoveCaretLeftAction, _super);
      function MoveCaretLeftAction() {
          return _super.call(this, true, {
              id: 'editor.action.moveCarretLeftAction',
              label: nls.localize('caret.moveLeft', "Move Caret Left"),
              alias: 'Move Caret Left',
              precondition: editorContextKeys_js_1.EditorContextKeys.writable
          }) || this;
      }
      return MoveCaretLeftAction;
  }(MoveCaretAction));
  var MoveCaretRightAction = /** @class */ (function (_super) {
      __extends(MoveCaretRightAction, _super);
      function MoveCaretRightAction() {
          return _super.call(this, false, {
              id: 'editor.action.moveCarretRightAction',
              label: nls.localize('caret.moveRight', "Move Caret Right"),
              alias: 'Move Caret Right',
              precondition: editorContextKeys_js_1.EditorContextKeys.writable
          }) || this;
      }
      return MoveCaretRightAction;
  }(MoveCaretAction));
  editorExtensions_js_1.registerEditorAction(MoveCaretLeftAction);
  editorExtensions_js_1.registerEditorAction(MoveCaretRightAction);
  

});
