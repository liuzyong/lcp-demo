define('node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeAction', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getCodeActions = exports.CodeActionSet = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var arrays_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/arrays");
  var cancellation_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/cancellation");
  var errors_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/errors");
  var uri_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/uri");
  var editorExtensions_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions");
  var range_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/range");
  var modes_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/modes");
  var modelService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/services/modelService");
  var codeActionTrigger_js_1 = require("node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeActionTrigger");
  var editorState_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/core/editorState");
  var CodeActionSet = /** @class */ (function () {
      function CodeActionSet(actions) {
          this.actions = arrays_js_1.mergeSort(actions, CodeActionSet.codeActionsComparator);
      }
      CodeActionSet.codeActionsComparator = function (a, b) {
          if (arrays_js_1.isNonEmptyArray(a.diagnostics)) {
              if (arrays_js_1.isNonEmptyArray(b.diagnostics)) {
                  return a.diagnostics[0].message.localeCompare(b.diagnostics[0].message);
              }
              else {
                  return -1;
              }
          }
          else if (arrays_js_1.isNonEmptyArray(b.diagnostics)) {
              return 1;
          }
          else {
              return 0; // both have no diagnostics
          }
      };
      Object.defineProperty(CodeActionSet.prototype, "hasAutoFix", {
          get: function () {
              return this.actions.some(function (fix) { return !!fix.kind && codeActionTrigger_js_1.CodeActionKind.QuickFix.contains(new codeActionTrigger_js_1.CodeActionKind(fix.kind)) && !!fix.isPreferred; });
          },
          enumerable: true,
          configurable: true
      });
      return CodeActionSet;
  }());
  exports.CodeActionSet = CodeActionSet;
  function getCodeActions(model, rangeOrSelection, trigger, token) {
      var filter = trigger.filter || {};
      var codeActionContext = {
          only: filter.kind ? filter.kind.value : undefined,
          trigger: trigger.type === 'manual' ? 2 /* Manual */ : 1 /* Automatic */
      };
      var cts = new editorState_js_1.TextModelCancellationTokenSource(model, token);
      var providers = getCodeActionProviders(model, filter);
      var promises = providers.map(function (provider) {
          return Promise.resolve(provider.provideCodeActions(model, rangeOrSelection, codeActionContext, cts.token)).then(function (providedCodeActions) {
              if (cts.token.isCancellationRequested || !Array.isArray(providedCodeActions)) {
                  return [];
              }
              return providedCodeActions.filter(function (action) { return action && codeActionTrigger_js_1.filtersAction(filter, action); });
          }, function (err) {
              if (errors_js_1.isPromiseCanceledError(err)) {
                  throw err;
              }
              errors_js_1.onUnexpectedExternalError(err);
              return [];
          });
      });
      var listener = modes_js_1.CodeActionProviderRegistry.onDidChange(function () {
          var newProviders = modes_js_1.CodeActionProviderRegistry.all(model);
          if (!arrays_js_1.equals(newProviders, providers)) {
              cts.cancel();
          }
      });
      return Promise.all(promises)
          .then(arrays_js_1.flatten)
          .then(function (actions) { return new CodeActionSet(actions); })
          .finally(function () {
          listener.dispose();
          cts.dispose();
      });
  }
  exports.getCodeActions = getCodeActions;
  function getCodeActionProviders(model, filter) {
      return modes_js_1.CodeActionProviderRegistry.all(model)
          // Don't include providers that we know will not return code actions of interest
          .filter(function (provider) {
          if (!provider.providedCodeActionKinds) {
              // We don't know what type of actions this provider will return.
              return true;
          }
          return provider.providedCodeActionKinds.some(function (kind) { return codeActionTrigger_js_1.mayIncludeActionsOfKind(filter, new codeActionTrigger_js_1.CodeActionKind(kind)); });
      });
  }
  editorExtensions_js_1.registerLanguageCommand('_executeCodeActionProvider', function (accessor, args) {
      var resource = args.resource, range = args.range, kind = args.kind;
      if (!(resource instanceof uri_js_1.URI) || !range_js_1.Range.isIRange(range)) {
          throw errors_js_1.illegalArgument();
      }
      var model = accessor.get(modelService_js_1.IModelService).getModel(resource);
      if (!model) {
          throw errors_js_1.illegalArgument();
      }
      return getCodeActions(model, model.validateRange(range), { type: 'manual', filter: { includeSourceActions: true, kind: kind && kind.value ? new codeActionTrigger_js_1.CodeActionKind(kind.value) : undefined } }, cancellation_js_1.CancellationToken.None).then(function (actions) { return actions.actions; });
  });
  

});
