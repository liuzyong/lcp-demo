define('node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/color', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getColorPresentations = exports.getColors = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var cancellation_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/cancellation");
  var errors_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/errors");
  var uri_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/uri");
  var editorExtensions_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions");
  var range_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/range");
  var modes_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/modes");
  var modelService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/services/modelService");
  function getColors(model, token) {
      var colors = [];
      var providers = modes_js_1.ColorProviderRegistry.ordered(model).reverse();
      var promises = providers.map(function (provider) {
          return Promise.resolve(provider.provideDocumentColors(model, token)).then(function (result) {
              if (Array.isArray(result)) {
                  for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
                      var colorInfo = result_1[_i];
                      colors.push({ colorInfo: colorInfo, provider: provider });
                  }
              }
          });
      });
      return Promise.all(promises).then(function () { return colors; });
  }
  exports.getColors = getColors;
  function getColorPresentations(model, colorInfo, provider, token) {
      return Promise.resolve(provider.provideColorPresentations(model, colorInfo, token));
  }
  exports.getColorPresentations = getColorPresentations;
  editorExtensions_js_1.registerLanguageCommand('_executeDocumentColorProvider', function (accessor, args) {
      var resource = args.resource;
      if (!(resource instanceof uri_js_1.URI)) {
          throw errors_js_1.illegalArgument();
      }
      var model = accessor.get(modelService_js_1.IModelService).getModel(resource);
      if (!model) {
          throw errors_js_1.illegalArgument();
      }
      var rawCIs = [];
      var providers = modes_js_1.ColorProviderRegistry.ordered(model).reverse();
      var promises = providers.map(function (provider) {
          return Promise.resolve(provider.provideDocumentColors(model, cancellation_js_1.CancellationToken.None)).then(function (result) {
              if (Array.isArray(result)) {
                  for (var _i = 0, result_2 = result; _i < result_2.length; _i++) {
                      var ci = result_2[_i];
                      rawCIs.push({ range: ci.range, color: [ci.color.red, ci.color.green, ci.color.blue, ci.color.alpha] });
                  }
              }
          });
      });
      return Promise.all(promises).then(function () { return rawCIs; });
  });
  editorExtensions_js_1.registerLanguageCommand('_executeColorPresentationProvider', function (accessor, args) {
      var resource = args.resource, color = args.color, range = args.range;
      if (!(resource instanceof uri_js_1.URI) || !Array.isArray(color) || color.length !== 4 || !range_js_1.Range.isIRange(range)) {
          throw errors_js_1.illegalArgument();
      }
      var red = color[0], green = color[1], blue = color[2], alpha = color[3];
      var model = accessor.get(modelService_js_1.IModelService).getModel(resource);
      if (!model) {
          throw errors_js_1.illegalArgument();
      }
      var colorInfo = {
          range: range,
          color: { red: red, green: green, blue: blue, alpha: alpha }
      };
      var presentations = [];
      var providers = modes_js_1.ColorProviderRegistry.ordered(model).reverse();
      var promises = providers.map(function (provider) {
          return Promise.resolve(provider.provideColorPresentations(model, colorInfo, cancellation_js_1.CancellationToken.None)).then(function (result) {
              if (Array.isArray(result)) {
                  presentations.push.apply(presentations, result);
              }
          });
      });
      return Promise.all(promises).then(function () { return presentations; });
  });
  

});
