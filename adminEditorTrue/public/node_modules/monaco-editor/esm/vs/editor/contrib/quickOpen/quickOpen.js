define('node_modules/monaco-editor/esm/vs/editor/contrib/quickOpen/quickOpen', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getDocumentSymbols = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var errors_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/errors");
  var uri_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/uri");
  var range_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/core/range");
  var editorExtensions_js_1 = require("node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions");
  var modes_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/modes");
  var modelService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/services/modelService");
  var cancellation_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/cancellation");
  var resolverService_js_1 = require("node_modules/monaco-editor/esm/vs/editor/common/services/resolverService");
  function getDocumentSymbols(model, flat, token) {
      var roots = [];
      var promises = modes_js_1.DocumentSymbolProviderRegistry.all(model).map(function (support) {
          return Promise.resolve(support.provideDocumentSymbols(model, token)).then(function (result) {
              if (Array.isArray(result)) {
                  roots.push.apply(roots, result);
              }
          }, function (err) {
              errors_js_1.onUnexpectedExternalError(err);
          });
      });
      return Promise.all(promises).then(function () {
          var flatEntries = [];
          if (token.isCancellationRequested) {
              return flatEntries;
          }
          if (flat) {
              flatten(flatEntries, roots, '');
          }
          else {
              flatEntries = roots;
          }
          flatEntries.sort(compareEntriesUsingStart);
          return flatEntries;
      });
  }
  exports.getDocumentSymbols = getDocumentSymbols;
  function compareEntriesUsingStart(a, b) {
      return range_js_1.Range.compareRangesUsingStarts(a.range, b.range);
  }
  function flatten(bucket, entries, overrideContainerLabel) {
      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
          var entry = entries_1[_i];
          bucket.push({
              kind: entry.kind,
              name: entry.name,
              detail: entry.detail,
              containerName: entry.containerName || overrideContainerLabel,
              range: entry.range,
              selectionRange: entry.selectionRange,
              children: undefined,
          });
          if (entry.children) {
              flatten(bucket, entry.children, entry.name);
          }
      }
  }
  editorExtensions_js_1.registerLanguageCommand('_executeDocumentSymbolProvider', function (accessor, args) {
      var resource = args.resource;
      if (!(resource instanceof uri_js_1.URI)) {
          throw errors_js_1.illegalArgument('resource');
      }
      var model = accessor.get(modelService_js_1.IModelService).getModel(resource);
      if (model) {
          return getDocumentSymbols(model, false, cancellation_js_1.CancellationToken.None);
      }
      return accessor.get(resolverService_js_1.ITextModelService).createModelReference(resource).then(function (reference) {
          return new Promise(function (resolve, reject) {
              try {
                  var result = getDocumentSymbols(reference.object.textEditorModel, false, cancellation_js_1.CancellationToken.None);
                  resolve(result);
              }
              catch (err) {
                  reject(err);
              }
          }).finally(function () {
              reference.dispose();
          });
      });
  });
  

});
