define('node_modules/monaco-editor/esm/vs/base/common/extpath', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isWindowsDriveLetter = exports.isEqualOrParent = exports.toSlashes = void 0;
  var strings_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/strings");
  var path_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/path");
  /**
   * Takes a Windows OS path and changes backward slashes to forward slashes.
   * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).
   * Using it on a Linux or MaxOS path might change it.
   */
  function toSlashes(osPath) {
      return osPath.replace(/[\\/]/g, path_js_1.posix.sep);
  }
  exports.toSlashes = toSlashes;
  function isEqualOrParent(path, candidate, ignoreCase, separator) {
      if (separator === void 0) {
          separator = path_js_1.sep;
      }
      if (path === candidate) {
          return true;
      }
      if (!path || !candidate) {
          return false;
      }
      if (candidate.length > path.length) {
          return false;
      }
      if (ignoreCase) {
          var beginsWith = strings_js_1.startsWithIgnoreCase(path, candidate);
          if (!beginsWith) {
              return false;
          }
          if (candidate.length === path.length) {
              return true; // same path, different casing
          }
          var sepOffset = candidate.length;
          if (candidate.charAt(candidate.length - 1) === separator) {
              sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character
          }
          return path.charAt(sepOffset) === separator;
      }
      if (candidate.charAt(candidate.length - 1) !== separator) {
          candidate += separator;
      }
      return path.indexOf(candidate) === 0;
  }
  exports.isEqualOrParent = isEqualOrParent;
  function isWindowsDriveLetter(char0) {
      return char0 >= 65 /* A */ && char0 <= 90 /* Z */ || char0 >= 97 /* a */ && char0 <= 122 /* z */;
  }
  exports.isWindowsDriveLetter = isWindowsDriveLetter;
  

});
