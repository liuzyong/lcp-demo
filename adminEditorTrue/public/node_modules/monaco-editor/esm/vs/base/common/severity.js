define('node_modules/monaco-editor/esm/vs/base/common/severity', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var tslib_1 = require("node_modules/tslib/tslib");
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var nls = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/nls"));
  var strings = tslib_1.__importStar(require("node_modules/monaco-editor/esm/vs/base/common/strings"));
  var Severity;
  (function (Severity) {
      Severity[Severity["Ignore"] = 0] = "Ignore";
      Severity[Severity["Info"] = 1] = "Info";
      Severity[Severity["Warning"] = 2] = "Warning";
      Severity[Severity["Error"] = 3] = "Error";
  })(Severity || (Severity = {}));
  (function (Severity) {
      var _error = 'error';
      var _warning = 'warning';
      var _warn = 'warn';
      var _info = 'info';
      var _displayStrings = Object.create(null);
      _displayStrings[Severity.Error] = nls.localize('sev.error', "Error");
      _displayStrings[Severity.Warning] = nls.localize('sev.warning', "Warning");
      _displayStrings[Severity.Info] = nls.localize('sev.info', "Info");
      /**
       * Parses 'error', 'warning', 'warn', 'info' in call casings
       * and falls back to ignore.
       */
      function fromValue(value) {
          if (!value) {
              return Severity.Ignore;
          }
          if (strings.equalsIgnoreCase(_error, value)) {
              return Severity.Error;
          }
          if (strings.equalsIgnoreCase(_warning, value) || strings.equalsIgnoreCase(_warn, value)) {
              return Severity.Warning;
          }
          if (strings.equalsIgnoreCase(_info, value)) {
              return Severity.Info;
          }
          return Severity.Ignore;
      }
      Severity.fromValue = fromValue;
  })(Severity || (Severity = {}));
  exports.default = Severity;
  

});
