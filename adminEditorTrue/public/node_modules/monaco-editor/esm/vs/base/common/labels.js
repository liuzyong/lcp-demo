define('node_modules/monaco-editor/esm/vs/base/common/labels', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.tildify = exports.normalizeDriveLetter = exports.getBaseLabel = exports.getPathLabel = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var uri_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/uri");
  var path_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/path");
  var strings_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/strings");
  var network_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/network");
  var platform_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/platform");
  var resources_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/resources");
  /**
   * @deprecated use LabelService instead
   */
  function getPathLabel(resource, userHomeProvider, rootProvider) {
      if (typeof resource === 'string') {
          resource = uri_js_1.URI.file(resource);
      }
      // return early if we can resolve a relative path label from the root
      if (rootProvider) {
          var baseResource = rootProvider.getWorkspaceFolder(resource);
          if (baseResource) {
              var hasMultipleRoots = rootProvider.getWorkspace().folders.length > 1;
              var pathLabel = void 0;
              if (resources_js_1.isEqual(baseResource.uri, resource)) {
                  pathLabel = ''; // no label if paths are identical
              }
              else {
                  pathLabel = resources_js_1.relativePath(baseResource.uri, resource);
              }
              if (hasMultipleRoots) {
                  var rootName = (baseResource && baseResource.name) ? baseResource.name : resources_js_1.basename(baseResource.uri);
                  pathLabel = pathLabel ? (rootName + ' â€¢ ' + pathLabel) : rootName; // always show root basename if there are multiple
              }
              return pathLabel;
          }
      }
      // return if the resource is neither file:// nor untitled:// and no baseResource was provided
      if (resource.scheme !== network_js_1.Schemas.file && resource.scheme !== network_js_1.Schemas.untitled) {
          return resource.with({ query: null, fragment: null }).toString(true);
      }
      // convert c:\something => C:\something
      if (hasDriveLetter(resource.fsPath)) {
          return path_js_1.normalize(normalizeDriveLetter(resource.fsPath));
      }
      // normalize and tildify (macOS, Linux only)
      var res = path_js_1.normalize(resource.fsPath);
      if (!platform_js_1.isWindows && userHomeProvider) {
          res = tildify(res, userHomeProvider.userHome);
      }
      return res;
  }
  exports.getPathLabel = getPathLabel;
  function getBaseLabel(resource) {
      if (!resource) {
          return undefined;
      }
      if (typeof resource === 'string') {
          resource = uri_js_1.URI.file(resource);
      }
      var base = resources_js_1.basename(resource) || (resource.scheme === network_js_1.Schemas.file ? resource.fsPath : resource.path) /* can be empty string if '/' is passed in */;
      // convert c: => C:
      if (hasDriveLetter(base)) {
          return normalizeDriveLetter(base);
      }
      return base;
  }
  exports.getBaseLabel = getBaseLabel;
  function hasDriveLetter(path) {
      return !!(platform_js_1.isWindows && path && path[1] === ':');
  }
  function normalizeDriveLetter(path) {
      if (hasDriveLetter(path)) {
          return path.charAt(0).toUpperCase() + path.slice(1);
      }
      return path;
  }
  exports.normalizeDriveLetter = normalizeDriveLetter;
  var normalizedUserHomeCached = Object.create(null);
  function tildify(path, userHome) {
      if (platform_js_1.isWindows || !path || !userHome) {
          return path; // unsupported
      }
      // Keep a normalized user home path as cache to prevent accumulated string creation
      var normalizedUserHome = normalizedUserHomeCached.original === userHome ? normalizedUserHomeCached.normalized : undefined;
      if (!normalizedUserHome) {
          normalizedUserHome = "" + strings_js_1.rtrim(userHome, path_js_1.posix.sep) + path_js_1.posix.sep;
          normalizedUserHomeCached = { original: userHome, normalized: normalizedUserHome };
      }
      // Linux: case sensitive, macOS: case insensitive
      if (platform_js_1.isLinux ? strings_js_1.startsWith(path, normalizedUserHome) : strings_js_1.startsWithIgnoreCase(path, normalizedUserHome)) {
          path = "~/" + path.substr(normalizedUserHome.length);
      }
      return path;
  }
  exports.tildify = tildify;
  

});
