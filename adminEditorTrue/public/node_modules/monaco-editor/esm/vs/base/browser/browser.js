define('node_modules/monaco-editor/esm/vs/base/browser/browser', function(require, exports, module) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.hasClipboardSupport = exports.isEdgeWebView = exports.isIPad = exports.isWebkitWebView = exports.isSafari = exports.isChrome = exports.isWebKit = exports.isFirefox = exports.isEdgeOrIE = exports.isEdge = exports.isIE = exports.getPixelRatio = exports.onDidChangeZoomLevel = exports.getTimeSinceLastZoomLevelChanged = exports.getZoomLevel = void 0;
  /*---------------------------------------------------------------------------------------------
   *  Copyright (c) Microsoft Corporation. All rights reserved.
   *  Licensed under the MIT License. See License.txt in the project root for license information.
   *--------------------------------------------------------------------------------------------*/
  var event_js_1 = require("node_modules/monaco-editor/esm/vs/base/common/event");
  var WindowManager = /** @class */ (function () {
      function WindowManager() {
          // --- Zoom Level
          this._zoomLevel = 0;
          this._lastZoomLevelChangeTime = 0;
          this._onDidChangeZoomLevel = new event_js_1.Emitter();
          this.onDidChangeZoomLevel = this._onDidChangeZoomLevel.event;
      }
      WindowManager.prototype.getZoomLevel = function () {
          return this._zoomLevel;
      };
      WindowManager.prototype.getTimeSinceLastZoomLevelChanged = function () {
          return Date.now() - this._lastZoomLevelChangeTime;
      };
      // --- Pixel Ratio
      WindowManager.prototype.getPixelRatio = function () {
          var ctx = document.createElement('canvas').getContext('2d');
          var dpr = window.devicePixelRatio || 1;
          var bsr = ctx.webkitBackingStorePixelRatio ||
              ctx.mozBackingStorePixelRatio ||
              ctx.msBackingStorePixelRatio ||
              ctx.oBackingStorePixelRatio ||
              ctx.backingStorePixelRatio || 1;
          return dpr / bsr;
      };
      WindowManager.INSTANCE = new WindowManager();
      return WindowManager;
  }());
  function getZoomLevel() {
      return WindowManager.INSTANCE.getZoomLevel();
  }
  exports.getZoomLevel = getZoomLevel;
  /** Returns the time (in ms) since the zoom level was changed */
  function getTimeSinceLastZoomLevelChanged() {
      return WindowManager.INSTANCE.getTimeSinceLastZoomLevelChanged();
  }
  exports.getTimeSinceLastZoomLevelChanged = getTimeSinceLastZoomLevelChanged;
  function onDidChangeZoomLevel(callback) {
      return WindowManager.INSTANCE.onDidChangeZoomLevel(callback);
  }
  exports.onDidChangeZoomLevel = onDidChangeZoomLevel;
  function getPixelRatio() {
      return WindowManager.INSTANCE.getPixelRatio();
  }
  exports.getPixelRatio = getPixelRatio;
  var userAgent = navigator.userAgent;
  exports.isIE = (userAgent.indexOf('Trident') >= 0);
  exports.isEdge = (userAgent.indexOf('Edge/') >= 0);
  exports.isEdgeOrIE = exports.isIE || exports.isEdge;
  exports.isFirefox = (userAgent.indexOf('Firefox') >= 0);
  exports.isWebKit = (userAgent.indexOf('AppleWebKit') >= 0);
  exports.isChrome = (userAgent.indexOf('Chrome') >= 0);
  exports.isSafari = (!exports.isChrome && (userAgent.indexOf('Safari') >= 0));
  exports.isWebkitWebView = (!exports.isChrome && !exports.isSafari && exports.isWebKit);
  exports.isIPad = (userAgent.indexOf('iPad') >= 0);
  exports.isEdgeWebView = exports.isEdge && (userAgent.indexOf('WebView/') >= 0);
  function hasClipboardSupport() {
      if (exports.isIE) {
          return false;
      }
      if (exports.isEdge) {
          var index = userAgent.indexOf('Edge/');
          var version = parseInt(userAgent.substring(index + 5, userAgent.indexOf('.', index)), 10);
          if (!version || (version >= 12 && version <= 16)) {
              return false;
          }
      }
      return true;
  }
  exports.hasClipboardSupport = hasClipboardSupport;
  

});
