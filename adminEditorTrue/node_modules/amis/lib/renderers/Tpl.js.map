{
    "version": 3,
    "file": "Tpl.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Tpl.tsx"
    ],
    "names": [],
    "mappings": ";;;AAAA,wDAA0B;AAC1B,sCAAmD;AACnD,oCAAoC;AAEpC,0CAA2C;AAC3C,oDAAgD;AAahD;IAAyB,+BAAiC;IASxD,aAAY,KAAe;QAA3B,YACE,kBAAM,KAAK,CAAC,SAEb;QADC,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACzC,CAAC;IAED,gCAAkB,GAAlB,UAAmB,SAAmB;QACpC,IACE,mBAAU,CACR,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,EAC/C,IAAI,CAAC,KAAK,EACV,SAAS,CACV,EACD;YACA,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;IACH,CAAC;IAED,qBAAO,GAAP,UAAQ,GAAQ;QACd,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,wBAAU,GAAV;QACQ,IAAA,eAA6D,EAA5D,YAAG,EAAE,cAAI,EAAE,cAAI,EAAE,YAAG,EAAE,gBAAK,EAAE,cAAI,EAAE,4BAAyB,CAAC;QAEpE,IAAI,GAAG,EAAE;YACP,OAAO,GAAG,CAAC;SACZ;aAAM,IAAI,IAAI,EAAE;YACf,OAAO,YAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC3B;aAAM,IAAI,GAAG,EAAE;YACd,OAAO,YAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SAC1B;aAAM,IAAI,IAAI,EAAE;YACf,OAAO,wBAAU,CAAC,YAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;SACvC;aAAM;YACL,OAAO,KAAK,IAAI,IAAI,IAAI,KAAK,KAAK,EAAE;gBAClC,CAAC,CAAC,gCAA4B,WAAW,YAAS;gBAClD,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ;oBAC3B,CAAC,CAAC,KAAK;oBACP,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC3B;IACH,CAAC;IAED,qBAAO,GAAP;QACE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YACb,OAAO;SACR;QAED,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IACzC,CAAC;IAED,oBAAM,GAAN;QACQ,IAAA,eAAkE,EAAjE,wBAAS,EAAE,sCAAgB,EAAE,kBAAM,EAAE,kBAA4B,CAAC;QAEzE,IAAM,SAAS,GAAG,gBAAgB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAEhE,OAAO,CACL,8BAAC,SAAS,IACR,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,EAC3B,GAAG,EAAE,IAAI,CAAC,OAAO,EACjB,SAAS,EAAE,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC,GACpC,CACH,CAAC;IACJ,CAAC;IAtEM,gBAAY,GAAsB;QACvC,MAAM,EAAE,IAAI;QACZ,WAAW,EAAE,EAAE;QACf,KAAK,EAAE,EAAE;KACV,CAAC;IAmEJ,UAAC;CAAA,AAxED,CAAyB,eAAK,CAAC,SAAS,GAwEvC;AAxEY,kBAAG;AA8EhB;IAAiC,uCAAG;IAApC;;IAAsC,CAAC;IAA1B,WAAW;QAJvB,kBAAQ,CAAC;YACR,IAAI,EAAE,qBAAqB;YAC3B,IAAI,EAAE,KAAK;SACZ,CAAC;OACW,WAAW,CAAe;IAAD,kBAAC;CAAA,AAAvC,CAAiC,GAAG,GAAG;AAA1B,kCAAW",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {filter} from '../utils/tpl';\nimport cx from 'classnames';\nimport {anyChanged} from '../utils/helper';\nimport {escapeHtml} from '../utils/tpl-builtin';\n\nexport interface TplProps extends RendererProps {\n  className?: string;\n  tpl?: string;\n  html?: string;\n  text?: string;\n  raw?: string;\n  value?: string;\n  wrapperComponent?: any;\n  inline?: boolean;\n}\n\nexport class Tpl extends React.Component<TplProps, object> {\n  static defaultProps: Partial<TplProps> = {\n    inline: true,\n    placeholder: '',\n    value: ''\n  };\n\n  dom: any;\n\n  constructor(props: TplProps) {\n    super(props);\n    this.htmlRef = this.htmlRef.bind(this);\n  }\n\n  componentDidUpdate(prevProps: TplProps) {\n    if (\n      anyChanged(\n        ['data', 'tpl', 'html', 'text', 'raw', 'value'],\n        this.props,\n        prevProps\n      )\n    ) {\n      this._render();\n    }\n  }\n\n  htmlRef(dom: any) {\n    this.dom = dom;\n    this._render();\n  }\n\n  getContent() {\n    const {tpl, html, text, raw, value, data, placeholder} = this.props;\n\n    if (raw) {\n      return raw;\n    } else if (html) {\n      return filter(html, data);\n    } else if (tpl) {\n      return filter(tpl, data);\n    } else if (text) {\n      return escapeHtml(filter(text, data));\n    } else {\n      return value == null || value === ''\n        ? `<span class=\"text-muted\">${placeholder}</span>`\n        : typeof value === 'string'\n        ? value\n        : JSON.stringify(value);\n    }\n  }\n\n  _render() {\n    if (!this.dom) {\n      return;\n    }\n\n    this.dom.innerHTML = this.getContent();\n  }\n\n  render() {\n    const {className, wrapperComponent, inline, classnames: cx} = this.props;\n\n    const Component = wrapperComponent || (inline ? 'span' : 'div');\n\n    return (\n      <Component\n        children={this.getContent()}\n        ref={this.htmlRef}\n        className={cx('TplField', className)}\n      />\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)(?:tpl|html)$/,\n  name: 'tpl'\n})\nexport class TplRenderer extends Tpl {}\n"
    ]
}