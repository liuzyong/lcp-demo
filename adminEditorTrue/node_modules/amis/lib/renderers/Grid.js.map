{
    "version": 3,
    "file": "Grid.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Grid.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {Schema} from '../types';\nimport cx from 'classnames';\nimport pick from 'lodash/pick';\n\nexport const ColProps = ['lg', 'md', 'sm', 'xs'];\n\nexport type Column = Schema & {\n  xs?: number;\n  xsHidden?: boolean;\n  xsOffset?: number;\n  xsPull?: number;\n  xsPush?: number;\n\n  sm?: number;\n  smHidden?: boolean;\n  smOffset?: number;\n  smPull?: number;\n  smPush?: number;\n\n  md?: number;\n  mdHidden?: boolean;\n  mdOffset?: number;\n  mdPull?: number;\n  mdPush?: number;\n\n  lg?: number;\n  lgHidden?: boolean;\n  lgOffset?: number;\n  lgPull?: number;\n  lgPush?: number;\n\n  mode?: string;\n  horizontal?: any;\n};\nexport type ColumnNode = Column | ColumnArray;\nexport interface ColumnArray extends Array<ColumnNode> {}\n\nexport interface GridProps extends RendererProps {\n  columns: Array<Column>;\n  itemRender?: (\n    item: any,\n    key: number,\n    length: number,\n    props: any\n  ) => JSX.Element;\n}\n\nfunction fromBsClass(cn: string) {\n  if (typeof cn === 'string' && cn) {\n    return cn.replace(\n      /\\bcol-(xs|sm|md|lg)-(\\d+)\\b/g,\n      (_, bp, size) => `Grid-col--${bp}${size}`\n    );\n  }\n\n  return cn;\n}\n\nfunction copProps2Class(props: any): string {\n  const cns: Array<string> = [];\n  const modifiers = ColProps;\n\n  modifiers.forEach(\n    modifier =>\n      props &&\n      props[modifier] &&\n      cns.push(`Grid-col--${modifier}${props[modifier]}`)\n  );\n  cns.length || cns.push('Grid-col--sm');\n  return cns.join(' ');\n}\n\nexport default class Grid<T> extends React.Component<GridProps & T, object> {\n  static propsList: Array<string> = ['columns'];\n  static defaultProps = {};\n\n  renderChild(region: string, node: Schema, key: number, length: number) {\n    const {render, itemRender} = this.props;\n\n    return itemRender\n      ? itemRender(node, key, length, this.props)\n      : render(region, node);\n  }\n\n  renderColumn(column: ColumnNode, key: number, length: number) {\n    let colProps: {\n      [propName: string]: any;\n    } = pick(column, ColProps);\n\n    colProps = {\n      ...colProps\n    };\n\n    const cx = this.props.classnames;\n\n    return (\n      <div\n        key={key}\n        className={cx(\n          copProps2Class(colProps),\n          fromBsClass((column as Column).columnClassName)\n        )}\n      >\n        {Array.isArray(column) ? (\n          <div className={cx('Grid')}>\n            {column.map((column, key) =>\n              this.renderColumn(column, key, column.length)\n            )}\n          </div>\n        ) : (\n          this.renderChild(`column/${key}`, column, key, length)\n        )}\n      </div>\n    );\n  }\n\n  renderColumns(columns: ColumnArray) {\n    return columns.map((column, key) =>\n      this.renderColumn(column, key, columns.length)\n    );\n  }\n\n  render() {\n    const {className, classnames: cx} = this.props;\n    return (\n      <div className={cx('Grid', className)}>\n        {this.renderColumns(this.props.columns)}\n      </div>\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)grid$/,\n  name: 'grid'\n})\nexport class GridRenderer extends Grid<{}> {}\n"
    ]
}