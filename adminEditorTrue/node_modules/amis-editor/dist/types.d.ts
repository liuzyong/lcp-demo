import { RenderOptions, fetcherConfig, RootRenderProps, RenderSchemaFilter, RendererConfig, RendererComponent, TestFunc, RendererBasicConfig, RendererEnv, RendererProps, renderChildProps } from 'amis/lib/factory';
import { ClassNamesFn, ThemeInstance } from 'amis/lib/theme';
import { ApiObject, ApiString, Api, fetcherResult, fetchOptions, Schema, Button, Action } from 'amis/lib/types';
export interface Location {
    pathname: string;
    search: string;
    state: any;
    hash: string;
    key?: string;
    query?: any;
}
export interface PlainObject {
    [propsName: string]: any;
}
export interface JSONSchema {
    [propsName: string]: any;
}
export declare type RequiredKnownKeys<T> = {
    [K in keyof T]: {} extends Pick<T, K> ? never : K;
} extends {
    [_ in keyof T]: infer U;
} ? {} extends U ? never : U : never;
export declare type OptionalKnownKeys<T> = {
    [K in keyof T]: string extends K ? never : number extends K ? never : {} extends Pick<T, K> ? K : never;
} extends {
    [_ in keyof T]: infer U;
} ? {} extends U ? never : U : never;
export declare type Override<T, U> = {
    [K in Exclude<RequiredKnownKeys<T>, keyof U>]: K extends keyof T ? T[K] : never;
} & {
    [K in Exclude<OptionalKnownKeys<T>, keyof U>]?: K extends keyof T ? T[K] : never;
} & U;
export declare type MakeOptional<T, U> = {
    [K in OptionalKnownKeys<T>]?: K extends keyof T ? T[K] : never;
} & {
    [K in Exclude<RequiredKnownKeys<T>, keyof U>]: K extends keyof T ? T[K] : never;
} & {
    [K in Extract<RequiredKnownKeys<T>, keyof U>]?: K extends keyof T ? T[K] : never;
};
export { ApiObject, ApiString, Api, fetcherResult, fetchOptions, Schema, Button, Action, TestFunc, RendererBasicConfig, ClassNamesFn, ThemeInstance, RendererEnv, RendererProps, renderChildProps, RendererComponent, RendererConfig, RenderSchemaFilter, RootRenderProps, RenderOptions, fetcherConfig };
