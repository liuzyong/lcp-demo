/// <reference types="react" />
import BasicEditor from './BasicEditor';
import { Schema, RendererProps } from './types';
export default class BasicContainerEditor<T extends RendererProps = RendererProps> extends BasicEditor<T> {
    dropable: boolean;
    containers: Array<string>;
    disabledContainers: Array<string>;
    diyContainer: Array<string>;
    containerLabels: Array<string>;
    constructor(props: T, context: any);
    componentWillReceiveProps(nextProps: RendererProps): void;
    editorWillUpdate(activeId: string | null, prevId: string | null, mode: string): any;
    modifyProps(props: any, context?: any): any;
    isDropableRegion(region: string): boolean;
    updateRegion(name?: string): void;
    getContextMenus(): any[];
    _allSubRenderers: Array<any>;
    get allSubRenderers(): any[];
    getAvaiableSubRenderers(region?: string): {
        label: string | undefined;
        value: any;
        docLink: string | undefined;
        previewSchema: Schema | undefined;
        description: string | undefined;
        id: string;
        icon: string | undefined;
        tags: string[];
    }[];
    /**
     * 当把目标节点拖入到当前节点的区域时执行，用来完成数据写入。
     * @param region
     * @param dragId
     * @param indexOrBeforeId
     */
    moveTo(region: string, dragId: string, indexOrBeforeId: string | number): void;
    /**
     * 从外面拖入一个组件时执行，实现拖入组件的逻辑。
     * @param region
     * @param index
     * @param data
     */
    add(region: string, index: number, data: any, rendererId: string): Promise<void>;
    regionRef(regionName: string, ref: any): void;
    updateHighlight(viewOnly?: boolean): void;
    renderChild(region: string, node: Schema, props?: any): JSX.Element;
}
