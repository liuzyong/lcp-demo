import React from 'react';
import { Schema } from './types';
export interface SettingsProps {
    settings: {
        id: string;
        editor: any;
        $schema?: string;
        schema: Schema;
        value?: any;
        getValue?: () => any;
        getRaw: () => any;
        onChange: (value: any, mode: string, callback?: (value: any) => void) => void;
    } | null;
    size?: 'large' | 'normal';
    theme?: string;
    onSizeToggle: () => void;
    activeId: any;
    outline: Array<any>;
    onHover: (id?: string | null) => void;
    onSelect: (value: any, forceOpen?: boolean) => void;
    showDropableNodesOnly?: boolean;
}
interface AMisSettingsState {
    schema: any;
    data: any;
    raw: any;
    activeKey?: 'nav' | 'form' | 'code' | 'renderers' | 'none';
}
export default class AMisSettings extends React.PureComponent<SettingsProps, AMisSettingsState> {
    id: any;
    lastKey?: 'nav' | 'form' | 'code' | 'renderers' | 'none';
    data: any;
    raw: any;
    innerRef: React.RefObject<HTMLDivElement>;
    toDispose: Array<Function>;
    state: AMisSettingsState;
    pipeIn(props: SettingsProps): any;
    pipeOut(value: any): any;
    handleSelect: (key: 'nav' | 'form' | 'code' | 'renderers' | 'none', force?: boolean) => void;
    componentDidUpdate(prevProps: SettingsProps): void;
    openTab(key: 'nav' | 'form' | 'code' | 'renderers' | 'none'): void;
    formChangedAt: number;
    handleFormChange: (value: any) => void;
    handleCodeChange: (value: any, diff: any) => void;
    getPopOverContainer(): HTMLDivElement | null;
    form: any;
    formRef(form: any): void;
    updateSettings(id?: string, mode?: string): void;
    startX: number;
    startWidth: number;
    codeWrap: HTMLElement;
    handleResizeMouseDown(e: React.MouseEvent): void;
    handleResizeMouseMove(e: MouseEvent): void;
    handleResizeMouseUp(): void;
    render(): JSX.Element;
}
export {};
