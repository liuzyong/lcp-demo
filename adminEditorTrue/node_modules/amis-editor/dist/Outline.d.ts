import React from 'react';
import PropTypes from 'prop-types';
interface OutlineProps {
    options: Array<any>;
    value: any;
    onHover: (id: string | null) => void;
    onSelect: (value: any, forceOpen?: boolean) => void;
    showDropableNodesOnly?: boolean;
}
declare type OutlineNode = {
    label: string;
    value: string;
    isRegion?: boolean;
    draggable: boolean;
    dropable: boolean;
    children?: Array<OutlineNode>;
};
interface OutlineState {
    options: Array<OutlineNode>;
    folded: {
        [propName: string]: boolean;
    };
}
export default class Outline extends React.PureComponent<OutlineProps, OutlineState> {
    static contextTypes: {
        editor: PropTypes.Requireable<object>;
    };
    constructor(props: OutlineProps);
    componentWillReceiveProps(nextProps: OutlineProps): void;
    handleClick(e: React.MouseEvent<HTMLElement>): void;
    handleEnter(e: React.MouseEvent<HTMLElement>): void;
    handleExpanderClick(e: React.MouseEvent<HTMLSpanElement>): void;
    handleDragStart(e: React.DragEvent<HTMLElement>): void;
    handleDragOver(e: React.DragEvent<HTMLElement>): void;
    renderItem(option: OutlineNode, index: number): JSX.Element;
    render(): JSX.Element;
}
export {};
