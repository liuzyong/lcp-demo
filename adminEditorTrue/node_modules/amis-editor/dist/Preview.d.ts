/// <reference types="lodash" />
import React from 'react';
import { Schema, RendererComponent, RendererConfig, RendererProps, RenderOptions } from './types';
import H from 'history';
export interface scaffoldForm {
    title: string;
    controls: Array<any>;
    onConfirm?: (value: any) => any;
}
export interface EditoConfig {
    name?: string;
    description?: string;
    docLink?: string;
    previewSchema?: Schema;
    type: string;
    scaffold?: any;
    scaffoldForm?: scaffoldForm;
    affixPath?: string;
    image?: string;
    tags?: Array<string> | string;
    icon?: string;
    rendererName: string;
    renderer: RendererComponent;
    component: RendererComponent;
}
export declare const editors: Array<EditoConfig>;
export declare const getEditorByName: ((name: string) => EditoConfig | undefined) & import("lodash").MemoizedFunction;
export declare function Editor(rendererName: string, config?: Omit<EditoConfig, 'rendererName' | 'renderer' | 'component'>, proto?: any): (component: React.ComponentClass<RendererProps>) => any;
export declare function resolveEditor(renderer: RendererComponent): any;
export interface PreviewProps {
    editable?: boolean;
    getSchema: () => any;
    schema: Schema;
    schemaFilter?: (schema: Schema) => Schema;
    widgetsLayerRef?: (dom: any) => void;
    pathPrefix?: string;
    className?: string;
    history?: H.History;
    env?: any;
    theme?: string;
    onResize: () => void;
    onMouseMove?: (e: React.MouseEvent<any>) => void;
    onMouseLeave?: (e: React.MouseEvent<any>) => void;
    onClick?: (e: MouseEvent) => void;
    onDragEnter?: (e: React.DragEvent) => void;
    onDragOver?: (e: React.DragEvent) => void;
    onDragLeave?: (e: React.DragEvent) => void;
    onDrop?: (e: React.DragEvent) => void;
    isEditorEnabled?: (path: string, editor: any, renderer: any, schema: any) => boolean;
    [propName: string]: any;
}
export default class AMisPreview extends React.Component<PreviewProps, any> {
    env: RenderOptions;
    unSensor?: () => void;
    static defaultProps: {
        onResize: () => void;
    };
    id: string;
    widgetsLayer: HTMLDivElement;
    constructor(props: PreviewProps);
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: PreviewProps): void;
    componentWillUnmount(): void;
    widgetsLayerRef(ref: any): void;
    handleClick(e: MouseEvent): void;
    handleFocusIn(e: any): void;
    handeMouseOver(e: MouseEvent): void;
    rendererResolver(path: string, schema: Schema, props: any): RendererConfig | null;
    dragEnterCount: number;
    handleDragEnter(e: React.DragEvent): void;
    handleDragLeave(e: React.DragEvent): void;
    handleDrop(e: React.DragEvent): void;
    reset(): void;
    render(): JSX.Element;
}
