/// <reference types="react" />
import BasicEditor from '../BasicEditor';
import { RendererProps } from '../types';
import BasicContainerEditor from '../BasicContainerEditor';
export declare class ListEditor extends BasicContainerEditor {
    tipName: string;
    $schema: string;
    isCRUDBody: boolean;
    isUnderField: boolean;
    dropable: boolean;
    containers: string[];
    settingsSchema: {
        title: string;
        controls: any;
    };
    state: any;
    constructor(props: RendererProps, context: any);
    componentWillReceiveProps(nextProps: RendererProps): void;
    editorWillUpdate(activeId: string | null, prevId: string | null, mode: string): any;
    modifyProps(props: RendererProps, context?: any): {
        header: any;
        footer: any;
        data: {
            [propName: string]: any;
        };
        listItem: any;
    };
    handleToolbarAction(id: string): void;
    handleEditlistItem(): void;
}
export declare class ListItemEditor extends BasicEditor {
    tipName: string;
    $schema: string;
    containers: string[];
    handleAdd: () => void;
    settingsSchema: {
        title: string;
        controls: any[];
    };
    state: any;
    constructor(props: RendererProps, context: any);
    componentWillReceiveProps(nextProps: RendererProps): void;
    editorWillUpdate(activeId: string | null, prevId: string | null, mode: string): any;
    modifyProps(props: RendererProps, context?: any): {
        body: any;
    };
}
export declare class ListItemFieldEditor extends BasicEditor {
    tipName: string;
    replaceable: boolean;
    settingsSchema: {
        title: string;
        controls: any[];
    };
    childrenOrder: string[];
    constructor(props: RendererProps, context: any);
    componentWillReceiveProps(nextProps: RendererProps): void;
    editorWillUpdate(activeId: string | null, prevId: string | null, mode: string): any;
    modifyProps(props: RendererProps, context?: any): {
        quickEdit: any;
        popOver: any;
    };
    deleteSelf(): void;
    onChildSettingsGet(type: string, value: any): any;
    onChildSettingsSet(type: string, value: any, origin: any, replaceMode?: boolean): any;
    getSettingsValue(): any;
    setSettingsValue(value: any): void;
    handleQuickEditSetting(): void;
    handlePopOverSetting(): void;
    acceptChild(type: string, region?: string, rendererId?: string): boolean | null;
    renderRenderer(props: any): JSX.Element;
}
